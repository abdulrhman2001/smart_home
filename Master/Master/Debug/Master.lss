
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000249c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001da  00800060  0000249c  00002530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080023a  0080023a  0000270a  2**0
                  ALLOC
  3 .stab         000020c4  00000000  00000000  0000270c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000704  00000000  00000000  000047d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00004ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020fc  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ac  00000000  00000000  00007154  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001129  00000000  00000000  00007900  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000428  00000000  00000000  00008a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d6  00000000  00000000  00008e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c09  00000000  00000000  0000932a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000af33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 d3 0e 	jmp	0x1da6	; 0x1da6 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 33       	cpi	r26, 0x3A	; 58
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa e3       	ldi	r26, 0x3A	; 58
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 33       	cpi	r26, 0x3E	; 62
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 33 05 	call	0xa66	; 0xa66 <main>
      8a:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SET_PIN_DIR>:
#include "STD_MACROS.h"
#include <avr/io.h>
void DIO_SET_PIN_DIR(unsigned char port,unsigned char pin,unsigned char dir)
{
	switch(port)
      92:	84 34       	cpi	r24, 0x44	; 68
      94:	09 f4       	brne	.+2      	; 0x98 <DIO_SET_PIN_DIR+0x6>
      96:	71 c0       	rjmp	.+226    	; 0x17a <DIO_SET_PIN_DIR+0xe8>
      98:	85 34       	cpi	r24, 0x45	; 69
      9a:	48 f4       	brcc	.+18     	; 0xae <DIO_SET_PIN_DIR+0x1c>
      9c:	82 34       	cpi	r24, 0x42	; 66
      9e:	99 f1       	breq	.+102    	; 0x106 <DIO_SET_PIN_DIR+0x74>
      a0:	83 34       	cpi	r24, 0x43	; 67
      a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_SET_PIN_DIR+0x14>
      a4:	4d c0       	rjmp	.+154    	; 0x140 <DIO_SET_PIN_DIR+0xae>
      a6:	81 34       	cpi	r24, 0x41	; 65
      a8:	09 f0       	breq	.+2      	; 0xac <DIO_SET_PIN_DIR+0x1a>
      aa:	83 c0       	rjmp	.+262    	; 0x1b2 <DIO_SET_PIN_DIR+0x120>
      ac:	0f c0       	rjmp	.+30     	; 0xcc <DIO_SET_PIN_DIR+0x3a>
      ae:	82 36       	cpi	r24, 0x62	; 98
      b0:	51 f1       	breq	.+84     	; 0x106 <DIO_SET_PIN_DIR+0x74>
      b2:	83 36       	cpi	r24, 0x63	; 99
      b4:	20 f4       	brcc	.+8      	; 0xbe <DIO_SET_PIN_DIR+0x2c>
      b6:	81 36       	cpi	r24, 0x61	; 97
      b8:	09 f0       	breq	.+2      	; 0xbc <DIO_SET_PIN_DIR+0x2a>
      ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_SET_PIN_DIR+0x120>
      bc:	07 c0       	rjmp	.+14     	; 0xcc <DIO_SET_PIN_DIR+0x3a>
      be:	83 36       	cpi	r24, 0x63	; 99
      c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_SET_PIN_DIR+0x32>
      c2:	3e c0       	rjmp	.+124    	; 0x140 <DIO_SET_PIN_DIR+0xae>
      c4:	84 36       	cpi	r24, 0x64	; 100
      c6:	09 f0       	breq	.+2      	; 0xca <DIO_SET_PIN_DIR+0x38>
      c8:	74 c0       	rjmp	.+232    	; 0x1b2 <DIO_SET_PIN_DIR+0x120>
      ca:	57 c0       	rjmp	.+174    	; 0x17a <DIO_SET_PIN_DIR+0xe8>
	{
		case 'A':
		case 'a':
			if(dir==1)
      cc:	41 30       	cpi	r20, 0x01	; 1
      ce:	69 f4       	brne	.+26     	; 0xea <DIO_SET_PIN_DIR+0x58>
			{
				SET_BIT(DDRA,pin);
      d0:	2a b3       	in	r18, 0x1a	; 26
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	ac 01       	movw	r20, r24
      d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_SET_PIN_DIR+0x4c>
      da:	44 0f       	add	r20, r20
      dc:	55 1f       	adc	r21, r21
      de:	6a 95       	dec	r22
      e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_SET_PIN_DIR+0x48>
      e2:	ba 01       	movw	r22, r20
      e4:	62 2b       	or	r22, r18
      e6:	6a bb       	out	0x1a, r22	; 26
      e8:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRA,pin);
      ea:	2a b3       	in	r18, 0x1a	; 26
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	ac 01       	movw	r20, r24
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_SET_PIN_DIR+0x66>
      f4:	44 0f       	add	r20, r20
      f6:	55 1f       	adc	r21, r21
      f8:	6a 95       	dec	r22
      fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_SET_PIN_DIR+0x62>
      fc:	ba 01       	movw	r22, r20
      fe:	60 95       	com	r22
     100:	62 23       	and	r22, r18
     102:	6a bb       	out	0x1a, r22	; 26
     104:	08 95       	ret
			}
			break;
		case 'B':
		case 'b':
			if(dir==1)
     106:	41 30       	cpi	r20, 0x01	; 1
     108:	69 f4       	brne	.+26     	; 0x124 <DIO_SET_PIN_DIR+0x92>
			{
				SET_BIT(DDRB,pin);
     10a:	27 b3       	in	r18, 0x17	; 23
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	ac 01       	movw	r20, r24
     112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_SET_PIN_DIR+0x86>
     114:	44 0f       	add	r20, r20
     116:	55 1f       	adc	r21, r21
     118:	6a 95       	dec	r22
     11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_SET_PIN_DIR+0x82>
     11c:	ba 01       	movw	r22, r20
     11e:	62 2b       	or	r22, r18
     120:	67 bb       	out	0x17, r22	; 23
     122:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRB,pin);
     124:	27 b3       	in	r18, 0x17	; 23
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	ac 01       	movw	r20, r24
     12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_SET_PIN_DIR+0xa0>
     12e:	44 0f       	add	r20, r20
     130:	55 1f       	adc	r21, r21
     132:	6a 95       	dec	r22
     134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_SET_PIN_DIR+0x9c>
     136:	ba 01       	movw	r22, r20
     138:	60 95       	com	r22
     13a:	62 23       	and	r22, r18
     13c:	67 bb       	out	0x17, r22	; 23
     13e:	08 95       	ret
			}
			break;
		case 'C':
		case 'c':
			if(dir==1)
     140:	41 30       	cpi	r20, 0x01	; 1
     142:	69 f4       	brne	.+26     	; 0x15e <DIO_SET_PIN_DIR+0xcc>
			{
				SET_BIT(DDRC,pin);
     144:	24 b3       	in	r18, 0x14	; 20
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	ac 01       	movw	r20, r24
     14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_SET_PIN_DIR+0xc0>
     14e:	44 0f       	add	r20, r20
     150:	55 1f       	adc	r21, r21
     152:	6a 95       	dec	r22
     154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_SET_PIN_DIR+0xbc>
     156:	ba 01       	movw	r22, r20
     158:	62 2b       	or	r22, r18
     15a:	64 bb       	out	0x14, r22	; 20
     15c:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRC,pin);
     15e:	24 b3       	in	r18, 0x14	; 20
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	ac 01       	movw	r20, r24
     166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_SET_PIN_DIR+0xda>
     168:	44 0f       	add	r20, r20
     16a:	55 1f       	adc	r21, r21
     16c:	6a 95       	dec	r22
     16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_SET_PIN_DIR+0xd6>
     170:	ba 01       	movw	r22, r20
     172:	60 95       	com	r22
     174:	62 23       	and	r22, r18
     176:	64 bb       	out	0x14, r22	; 20
     178:	08 95       	ret
			}
			break;
		case 'D':
		case 'd':
			if(dir==1)
     17a:	41 30       	cpi	r20, 0x01	; 1
     17c:	69 f4       	brne	.+26     	; 0x198 <DIO_SET_PIN_DIR+0x106>
			{
				SET_BIT(DDRD,pin);
     17e:	21 b3       	in	r18, 0x11	; 17
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	ac 01       	movw	r20, r24
     186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_SET_PIN_DIR+0xfa>
     188:	44 0f       	add	r20, r20
     18a:	55 1f       	adc	r21, r21
     18c:	6a 95       	dec	r22
     18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_SET_PIN_DIR+0xf6>
     190:	ba 01       	movw	r22, r20
     192:	62 2b       	or	r22, r18
     194:	61 bb       	out	0x11, r22	; 17
     196:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRD,pin);
     198:	21 b3       	in	r18, 0x11	; 17
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	ac 01       	movw	r20, r24
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_SET_PIN_DIR+0x114>
     1a2:	44 0f       	add	r20, r20
     1a4:	55 1f       	adc	r21, r21
     1a6:	6a 95       	dec	r22
     1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_SET_PIN_DIR+0x110>
     1aa:	ba 01       	movw	r22, r20
     1ac:	60 95       	com	r22
     1ae:	62 23       	and	r22, r18
     1b0:	61 bb       	out	0x11, r22	; 17
     1b2:	08 95       	ret

000001b4 <DIO_WRITE_PIN>:
		break;	
	}
}
void DIO_WRITE_PIN(unsigned char port,unsigned char pin,unsigned char val)
{
	switch(port)
     1b4:	84 34       	cpi	r24, 0x44	; 68
     1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_WRITE_PIN+0x6>
     1b8:	71 c0       	rjmp	.+226    	; 0x29c <DIO_WRITE_PIN+0xe8>
     1ba:	85 34       	cpi	r24, 0x45	; 69
     1bc:	48 f4       	brcc	.+18     	; 0x1d0 <DIO_WRITE_PIN+0x1c>
     1be:	82 34       	cpi	r24, 0x42	; 66
     1c0:	99 f1       	breq	.+102    	; 0x228 <DIO_WRITE_PIN+0x74>
     1c2:	83 34       	cpi	r24, 0x43	; 67
     1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_WRITE_PIN+0x14>
     1c6:	4d c0       	rjmp	.+154    	; 0x262 <DIO_WRITE_PIN+0xae>
     1c8:	81 34       	cpi	r24, 0x41	; 65
     1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_WRITE_PIN+0x1a>
     1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <DIO_WRITE_PIN+0x120>
     1ce:	0f c0       	rjmp	.+30     	; 0x1ee <DIO_WRITE_PIN+0x3a>
     1d0:	82 36       	cpi	r24, 0x62	; 98
     1d2:	51 f1       	breq	.+84     	; 0x228 <DIO_WRITE_PIN+0x74>
     1d4:	83 36       	cpi	r24, 0x63	; 99
     1d6:	20 f4       	brcc	.+8      	; 0x1e0 <DIO_WRITE_PIN+0x2c>
     1d8:	81 36       	cpi	r24, 0x61	; 97
     1da:	09 f0       	breq	.+2      	; 0x1de <DIO_WRITE_PIN+0x2a>
     1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <DIO_WRITE_PIN+0x120>
     1de:	07 c0       	rjmp	.+14     	; 0x1ee <DIO_WRITE_PIN+0x3a>
     1e0:	83 36       	cpi	r24, 0x63	; 99
     1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_WRITE_PIN+0x32>
     1e4:	3e c0       	rjmp	.+124    	; 0x262 <DIO_WRITE_PIN+0xae>
     1e6:	84 36       	cpi	r24, 0x64	; 100
     1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_WRITE_PIN+0x38>
     1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <DIO_WRITE_PIN+0x120>
     1ec:	57 c0       	rjmp	.+174    	; 0x29c <DIO_WRITE_PIN+0xe8>
	{
		case 'A':
		case 'a':
		if(val==1)
     1ee:	41 30       	cpi	r20, 0x01	; 1
     1f0:	69 f4       	brne	.+26     	; 0x20c <DIO_WRITE_PIN+0x58>
		{
			SET_BIT(PORTA,pin);
     1f2:	2b b3       	in	r18, 0x1b	; 27
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	ac 01       	movw	r20, r24
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_WRITE_PIN+0x4c>
     1fc:	44 0f       	add	r20, r20
     1fe:	55 1f       	adc	r21, r21
     200:	6a 95       	dec	r22
     202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_WRITE_PIN+0x48>
     204:	ba 01       	movw	r22, r20
     206:	62 2b       	or	r22, r18
     208:	6b bb       	out	0x1b, r22	; 27
     20a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin);
     20c:	2b b3       	in	r18, 0x1b	; 27
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	ac 01       	movw	r20, r24
     214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_WRITE_PIN+0x66>
     216:	44 0f       	add	r20, r20
     218:	55 1f       	adc	r21, r21
     21a:	6a 95       	dec	r22
     21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_WRITE_PIN+0x62>
     21e:	ba 01       	movw	r22, r20
     220:	60 95       	com	r22
     222:	62 23       	and	r22, r18
     224:	6b bb       	out	0x1b, r22	; 27
     226:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if(val==1)
     228:	41 30       	cpi	r20, 0x01	; 1
     22a:	69 f4       	brne	.+26     	; 0x246 <DIO_WRITE_PIN+0x92>
		{
			SET_BIT(PORTB,pin);
     22c:	28 b3       	in	r18, 0x18	; 24
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	ac 01       	movw	r20, r24
     234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_WRITE_PIN+0x86>
     236:	44 0f       	add	r20, r20
     238:	55 1f       	adc	r21, r21
     23a:	6a 95       	dec	r22
     23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_WRITE_PIN+0x82>
     23e:	ba 01       	movw	r22, r20
     240:	62 2b       	or	r22, r18
     242:	68 bb       	out	0x18, r22	; 24
     244:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin);
     246:	28 b3       	in	r18, 0x18	; 24
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	ac 01       	movw	r20, r24
     24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_WRITE_PIN+0xa0>
     250:	44 0f       	add	r20, r20
     252:	55 1f       	adc	r21, r21
     254:	6a 95       	dec	r22
     256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_WRITE_PIN+0x9c>
     258:	ba 01       	movw	r22, r20
     25a:	60 95       	com	r22
     25c:	62 23       	and	r22, r18
     25e:	68 bb       	out	0x18, r22	; 24
     260:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if(val==1)
     262:	41 30       	cpi	r20, 0x01	; 1
     264:	69 f4       	brne	.+26     	; 0x280 <DIO_WRITE_PIN+0xcc>
		{
			SET_BIT(PORTC,pin);
     266:	25 b3       	in	r18, 0x15	; 21
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	ac 01       	movw	r20, r24
     26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_WRITE_PIN+0xc0>
     270:	44 0f       	add	r20, r20
     272:	55 1f       	adc	r21, r21
     274:	6a 95       	dec	r22
     276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_WRITE_PIN+0xbc>
     278:	ba 01       	movw	r22, r20
     27a:	62 2b       	or	r22, r18
     27c:	65 bb       	out	0x15, r22	; 21
     27e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin);
     280:	25 b3       	in	r18, 0x15	; 21
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	ac 01       	movw	r20, r24
     288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_WRITE_PIN+0xda>
     28a:	44 0f       	add	r20, r20
     28c:	55 1f       	adc	r21, r21
     28e:	6a 95       	dec	r22
     290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_WRITE_PIN+0xd6>
     292:	ba 01       	movw	r22, r20
     294:	60 95       	com	r22
     296:	62 23       	and	r22, r18
     298:	65 bb       	out	0x15, r22	; 21
     29a:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if(val==1)
     29c:	41 30       	cpi	r20, 0x01	; 1
     29e:	69 f4       	brne	.+26     	; 0x2ba <DIO_WRITE_PIN+0x106>
		{
			SET_BIT(PORTD,pin);
     2a0:	22 b3       	in	r18, 0x12	; 18
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	ac 01       	movw	r20, r24
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_WRITE_PIN+0xfa>
     2aa:	44 0f       	add	r20, r20
     2ac:	55 1f       	adc	r21, r21
     2ae:	6a 95       	dec	r22
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_WRITE_PIN+0xf6>
     2b2:	ba 01       	movw	r22, r20
     2b4:	62 2b       	or	r22, r18
     2b6:	62 bb       	out	0x12, r22	; 18
     2b8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pin);
     2ba:	22 b3       	in	r18, 0x12	; 18
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	ac 01       	movw	r20, r24
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_WRITE_PIN+0x114>
     2c4:	44 0f       	add	r20, r20
     2c6:	55 1f       	adc	r21, r21
     2c8:	6a 95       	dec	r22
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_WRITE_PIN+0x110>
     2cc:	ba 01       	movw	r22, r20
     2ce:	60 95       	com	r22
     2d0:	62 23       	and	r22, r18
     2d2:	62 bb       	out	0x12, r22	; 18
     2d4:	08 95       	ret

000002d6 <DIO_TOGGLE_PIN>:
		break;
	}
}
void DIO_TOGGLE_PIN(unsigned char port,unsigned char pin)
{
	switch(port)
     2d6:	84 34       	cpi	r24, 0x44	; 68
     2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_TOGGLE_PIN+0x6>
     2da:	3d c0       	rjmp	.+122    	; 0x356 <DIO_TOGGLE_PIN+0x80>
     2dc:	85 34       	cpi	r24, 0x45	; 69
     2de:	40 f4       	brcc	.+16     	; 0x2f0 <DIO_TOGGLE_PIN+0x1a>
     2e0:	82 34       	cpi	r24, 0x42	; 66
     2e2:	f9 f0       	breq	.+62     	; 0x322 <DIO_TOGGLE_PIN+0x4c>
     2e4:	83 34       	cpi	r24, 0x43	; 67
     2e6:	50 f5       	brcc	.+84     	; 0x33c <DIO_TOGGLE_PIN+0x66>
     2e8:	81 34       	cpi	r24, 0x41	; 65
     2ea:	09 f0       	breq	.+2      	; 0x2ee <DIO_TOGGLE_PIN+0x18>
     2ec:	40 c0       	rjmp	.+128    	; 0x36e <DIO_TOGGLE_PIN+0x98>
     2ee:	0c c0       	rjmp	.+24     	; 0x308 <DIO_TOGGLE_PIN+0x32>
     2f0:	82 36       	cpi	r24, 0x62	; 98
     2f2:	b9 f0       	breq	.+46     	; 0x322 <DIO_TOGGLE_PIN+0x4c>
     2f4:	83 36       	cpi	r24, 0x63	; 99
     2f6:	18 f4       	brcc	.+6      	; 0x2fe <DIO_TOGGLE_PIN+0x28>
     2f8:	81 36       	cpi	r24, 0x61	; 97
     2fa:	c9 f5       	brne	.+114    	; 0x36e <DIO_TOGGLE_PIN+0x98>
     2fc:	05 c0       	rjmp	.+10     	; 0x308 <DIO_TOGGLE_PIN+0x32>
     2fe:	83 36       	cpi	r24, 0x63	; 99
     300:	e9 f0       	breq	.+58     	; 0x33c <DIO_TOGGLE_PIN+0x66>
     302:	84 36       	cpi	r24, 0x64	; 100
     304:	a1 f5       	brne	.+104    	; 0x36e <DIO_TOGGLE_PIN+0x98>
     306:	27 c0       	rjmp	.+78     	; 0x356 <DIO_TOGGLE_PIN+0x80>
	{
		case 'A':
		case 'a':
		TOG_BIT(PORTA,pin);
     308:	2b b3       	in	r18, 0x1b	; 27
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	ac 01       	movw	r20, r24
     310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_TOGGLE_PIN+0x40>
     312:	44 0f       	add	r20, r20
     314:	55 1f       	adc	r21, r21
     316:	6a 95       	dec	r22
     318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_TOGGLE_PIN+0x3c>
     31a:	ba 01       	movw	r22, r20
     31c:	62 27       	eor	r22, r18
     31e:	6b bb       	out	0x1b, r22	; 27
		break;
     320:	08 95       	ret
		case 'B':
		case 'b':
		TOG_BIT(PORTB,pin);
     322:	28 b3       	in	r18, 0x18	; 24
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	ac 01       	movw	r20, r24
     32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_TOGGLE_PIN+0x5a>
     32c:	44 0f       	add	r20, r20
     32e:	55 1f       	adc	r21, r21
     330:	6a 95       	dec	r22
     332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_TOGGLE_PIN+0x56>
     334:	ba 01       	movw	r22, r20
     336:	62 27       	eor	r22, r18
     338:	68 bb       	out	0x18, r22	; 24
		break;
     33a:	08 95       	ret
		case 'C':
		case 'c':
		TOG_BIT(PORTC,pin);
     33c:	25 b3       	in	r18, 0x15	; 21
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	ac 01       	movw	r20, r24
     344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_TOGGLE_PIN+0x74>
     346:	44 0f       	add	r20, r20
     348:	55 1f       	adc	r21, r21
     34a:	6a 95       	dec	r22
     34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_TOGGLE_PIN+0x70>
     34e:	ba 01       	movw	r22, r20
     350:	62 27       	eor	r22, r18
     352:	65 bb       	out	0x15, r22	; 21
		break;
     354:	08 95       	ret
		case 'D':
		case 'd':
		TOG_BIT(PORTD,pin);
     356:	22 b3       	in	r18, 0x12	; 18
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	ac 01       	movw	r20, r24
     35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_TOGGLE_PIN+0x8e>
     360:	44 0f       	add	r20, r20
     362:	55 1f       	adc	r21, r21
     364:	6a 95       	dec	r22
     366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_TOGGLE_PIN+0x8a>
     368:	ba 01       	movw	r22, r20
     36a:	62 27       	eor	r22, r18
     36c:	62 bb       	out	0x12, r22	; 18
     36e:	08 95       	ret

00000370 <DIO_u8_READ_PIN>:
	}
}
unsigned char DIO_u8_READ_PIN(unsigned char port,unsigned char pin)
{
	unsigned char val;
	switch(port)
     370:	84 34       	cpi	r24, 0x44	; 68
     372:	09 f4       	brne	.+2      	; 0x376 <DIO_u8_READ_PIN+0x6>
     374:	51 c0       	rjmp	.+162    	; 0x418 <DIO_u8_READ_PIN+0xa8>
     376:	85 34       	cpi	r24, 0x45	; 69
     378:	40 f4       	brcc	.+16     	; 0x38a <DIO_u8_READ_PIN+0x1a>
     37a:	82 34       	cpi	r24, 0x42	; 66
     37c:	39 f1       	breq	.+78     	; 0x3cc <DIO_u8_READ_PIN+0x5c>
     37e:	83 34       	cpi	r24, 0x43	; 67
     380:	c0 f5       	brcc	.+112    	; 0x3f2 <DIO_u8_READ_PIN+0x82>
     382:	81 34       	cpi	r24, 0x41	; 65
     384:	09 f0       	breq	.+2      	; 0x388 <DIO_u8_READ_PIN+0x18>
     386:	5a c0       	rjmp	.+180    	; 0x43c <DIO_u8_READ_PIN+0xcc>
     388:	0e c0       	rjmp	.+28     	; 0x3a6 <DIO_u8_READ_PIN+0x36>
     38a:	82 36       	cpi	r24, 0x62	; 98
     38c:	f9 f0       	breq	.+62     	; 0x3cc <DIO_u8_READ_PIN+0x5c>
     38e:	83 36       	cpi	r24, 0x63	; 99
     390:	20 f4       	brcc	.+8      	; 0x39a <DIO_u8_READ_PIN+0x2a>
     392:	81 36       	cpi	r24, 0x61	; 97
     394:	09 f0       	breq	.+2      	; 0x398 <DIO_u8_READ_PIN+0x28>
     396:	52 c0       	rjmp	.+164    	; 0x43c <DIO_u8_READ_PIN+0xcc>
     398:	06 c0       	rjmp	.+12     	; 0x3a6 <DIO_u8_READ_PIN+0x36>
     39a:	83 36       	cpi	r24, 0x63	; 99
     39c:	51 f1       	breq	.+84     	; 0x3f2 <DIO_u8_READ_PIN+0x82>
     39e:	84 36       	cpi	r24, 0x64	; 100
     3a0:	09 f0       	breq	.+2      	; 0x3a4 <DIO_u8_READ_PIN+0x34>
     3a2:	4c c0       	rjmp	.+152    	; 0x43c <DIO_u8_READ_PIN+0xcc>
     3a4:	39 c0       	rjmp	.+114    	; 0x418 <DIO_u8_READ_PIN+0xa8>
	{
		case 'A':
		case 'a':
		val=READ_BIT(PINA,pin);
     3a6:	29 b3       	in	r18, 0x19	; 25
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	06 2e       	mov	r0, r22
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_u8_READ_PIN+0x44>
     3b0:	88 0f       	add	r24, r24
     3b2:	99 1f       	adc	r25, r25
     3b4:	0a 94       	dec	r0
     3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_u8_READ_PIN+0x40>
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	82 23       	and	r24, r18
     3bc:	93 23       	and	r25, r19
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_u8_READ_PIN+0x54>
     3c0:	96 95       	lsr	r25
     3c2:	87 95       	ror	r24
     3c4:	6a 95       	dec	r22
     3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_u8_READ_PIN+0x50>
     3c8:	98 2f       	mov	r25, r24
		break;
     3ca:	38 c0       	rjmp	.+112    	; 0x43c <DIO_u8_READ_PIN+0xcc>
		case 'B':
		case 'b':
		val=READ_BIT(PINB,pin);
     3cc:	26 b3       	in	r18, 0x16	; 22
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	06 2e       	mov	r0, r22
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_u8_READ_PIN+0x6a>
     3d6:	88 0f       	add	r24, r24
     3d8:	99 1f       	adc	r25, r25
     3da:	0a 94       	dec	r0
     3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_u8_READ_PIN+0x66>
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	82 23       	and	r24, r18
     3e2:	93 23       	and	r25, r19
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_u8_READ_PIN+0x7a>
     3e6:	96 95       	lsr	r25
     3e8:	87 95       	ror	r24
     3ea:	6a 95       	dec	r22
     3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_u8_READ_PIN+0x76>
     3ee:	98 2f       	mov	r25, r24
		break;
     3f0:	25 c0       	rjmp	.+74     	; 0x43c <DIO_u8_READ_PIN+0xcc>
		case 'C':
		case 'c':
		val=READ_BIT(PINC,pin);
     3f2:	23 b3       	in	r18, 0x13	; 19
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	06 2e       	mov	r0, r22
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <DIO_u8_READ_PIN+0x90>
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	0a 94       	dec	r0
     402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_u8_READ_PIN+0x8c>
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	82 23       	and	r24, r18
     408:	93 23       	and	r25, r19
     40a:	02 c0       	rjmp	.+4      	; 0x410 <DIO_u8_READ_PIN+0xa0>
     40c:	96 95       	lsr	r25
     40e:	87 95       	ror	r24
     410:	6a 95       	dec	r22
     412:	e2 f7       	brpl	.-8      	; 0x40c <DIO_u8_READ_PIN+0x9c>
     414:	98 2f       	mov	r25, r24
		break;
     416:	12 c0       	rjmp	.+36     	; 0x43c <DIO_u8_READ_PIN+0xcc>
		case 'D':
		case 'd':
		val=READ_BIT(PIND,pin);
     418:	20 b3       	in	r18, 0x10	; 16
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	06 2e       	mov	r0, r22
     420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_u8_READ_PIN+0xb6>
     422:	88 0f       	add	r24, r24
     424:	99 1f       	adc	r25, r25
     426:	0a 94       	dec	r0
     428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_u8_READ_PIN+0xb2>
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	82 23       	and	r24, r18
     42e:	93 23       	and	r25, r19
     430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_u8_READ_PIN+0xc6>
     432:	96 95       	lsr	r25
     434:	87 95       	ror	r24
     436:	6a 95       	dec	r22
     438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_u8_READ_PIN+0xc2>
     43a:	98 2f       	mov	r25, r24
		break;
	}
	return val;	
}
     43c:	89 2f       	mov	r24, r25
     43e:	08 95       	ret

00000440 <DIO_SET_PORT_DIR>:
void DIO_SET_PORT_DIR(unsigned char port,unsigned char dir)
{
	switch(port)
     440:	84 34       	cpi	r24, 0x44	; 68
     442:	d9 f0       	breq	.+54     	; 0x47a <DIO_SET_PORT_DIR+0x3a>
     444:	85 34       	cpi	r24, 0x45	; 69
     446:	38 f4       	brcc	.+14     	; 0x456 <DIO_SET_PORT_DIR+0x16>
     448:	82 34       	cpi	r24, 0x42	; 66
     44a:	99 f0       	breq	.+38     	; 0x472 <DIO_SET_PORT_DIR+0x32>
     44c:	83 34       	cpi	r24, 0x43	; 67
     44e:	98 f4       	brcc	.+38     	; 0x476 <DIO_SET_PORT_DIR+0x36>
     450:	81 34       	cpi	r24, 0x41	; 65
     452:	a1 f4       	brne	.+40     	; 0x47c <DIO_SET_PORT_DIR+0x3c>
     454:	0c c0       	rjmp	.+24     	; 0x46e <DIO_SET_PORT_DIR+0x2e>
     456:	82 36       	cpi	r24, 0x62	; 98
     458:	61 f0       	breq	.+24     	; 0x472 <DIO_SET_PORT_DIR+0x32>
     45a:	83 36       	cpi	r24, 0x63	; 99
     45c:	18 f4       	brcc	.+6      	; 0x464 <DIO_SET_PORT_DIR+0x24>
     45e:	81 36       	cpi	r24, 0x61	; 97
     460:	69 f4       	brne	.+26     	; 0x47c <DIO_SET_PORT_DIR+0x3c>
     462:	05 c0       	rjmp	.+10     	; 0x46e <DIO_SET_PORT_DIR+0x2e>
     464:	83 36       	cpi	r24, 0x63	; 99
     466:	39 f0       	breq	.+14     	; 0x476 <DIO_SET_PORT_DIR+0x36>
     468:	84 36       	cpi	r24, 0x64	; 100
     46a:	41 f4       	brne	.+16     	; 0x47c <DIO_SET_PORT_DIR+0x3c>
     46c:	06 c0       	rjmp	.+12     	; 0x47a <DIO_SET_PORT_DIR+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=dir;
     46e:	6a bb       	out	0x1a, r22	; 26
		break;
     470:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=dir;
     472:	67 bb       	out	0x17, r22	; 23
		break;
     474:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=dir;
     476:	64 bb       	out	0x14, r22	; 20
		break;
     478:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=dir;
     47a:	61 bb       	out	0x11, r22	; 17
     47c:	08 95       	ret

0000047e <DIO_WRITE_PORT>:
		break;
	}
}
void DIO_WRITE_PORT(unsigned char port,unsigned char val)
{
	switch(port)
     47e:	84 34       	cpi	r24, 0x44	; 68
     480:	d9 f0       	breq	.+54     	; 0x4b8 <DIO_WRITE_PORT+0x3a>
     482:	85 34       	cpi	r24, 0x45	; 69
     484:	38 f4       	brcc	.+14     	; 0x494 <DIO_WRITE_PORT+0x16>
     486:	82 34       	cpi	r24, 0x42	; 66
     488:	99 f0       	breq	.+38     	; 0x4b0 <DIO_WRITE_PORT+0x32>
     48a:	83 34       	cpi	r24, 0x43	; 67
     48c:	98 f4       	brcc	.+38     	; 0x4b4 <DIO_WRITE_PORT+0x36>
     48e:	81 34       	cpi	r24, 0x41	; 65
     490:	a1 f4       	brne	.+40     	; 0x4ba <DIO_WRITE_PORT+0x3c>
     492:	0c c0       	rjmp	.+24     	; 0x4ac <DIO_WRITE_PORT+0x2e>
     494:	82 36       	cpi	r24, 0x62	; 98
     496:	61 f0       	breq	.+24     	; 0x4b0 <DIO_WRITE_PORT+0x32>
     498:	83 36       	cpi	r24, 0x63	; 99
     49a:	18 f4       	brcc	.+6      	; 0x4a2 <DIO_WRITE_PORT+0x24>
     49c:	81 36       	cpi	r24, 0x61	; 97
     49e:	69 f4       	brne	.+26     	; 0x4ba <DIO_WRITE_PORT+0x3c>
     4a0:	05 c0       	rjmp	.+10     	; 0x4ac <DIO_WRITE_PORT+0x2e>
     4a2:	83 36       	cpi	r24, 0x63	; 99
     4a4:	39 f0       	breq	.+14     	; 0x4b4 <DIO_WRITE_PORT+0x36>
     4a6:	84 36       	cpi	r24, 0x64	; 100
     4a8:	41 f4       	brne	.+16     	; 0x4ba <DIO_WRITE_PORT+0x3c>
     4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <DIO_WRITE_PORT+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=val;
     4ac:	6b bb       	out	0x1b, r22	; 27
		break;
     4ae:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=val;
     4b0:	68 bb       	out	0x18, r22	; 24
		break;
     4b2:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=val;
     4b4:	65 bb       	out	0x15, r22	; 21
		break;
     4b6:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=val;
     4b8:	62 bb       	out	0x12, r22	; 18
     4ba:	08 95       	ret

000004bc <DIO_u8_READ_PORT>:
	}
}
unsigned char DIO_u8_READ_PORT(unsigned char port)
{
	unsigned char val;
	switch(port)
     4bc:	84 34       	cpi	r24, 0x44	; 68
     4be:	d9 f0       	breq	.+54     	; 0x4f6 <DIO_u8_READ_PORT+0x3a>
     4c0:	85 34       	cpi	r24, 0x45	; 69
     4c2:	38 f4       	brcc	.+14     	; 0x4d2 <DIO_u8_READ_PORT+0x16>
     4c4:	82 34       	cpi	r24, 0x42	; 66
     4c6:	99 f0       	breq	.+38     	; 0x4ee <DIO_u8_READ_PORT+0x32>
     4c8:	83 34       	cpi	r24, 0x43	; 67
     4ca:	98 f4       	brcc	.+38     	; 0x4f2 <DIO_u8_READ_PORT+0x36>
     4cc:	81 34       	cpi	r24, 0x41	; 65
     4ce:	a1 f4       	brne	.+40     	; 0x4f8 <DIO_u8_READ_PORT+0x3c>
     4d0:	0c c0       	rjmp	.+24     	; 0x4ea <DIO_u8_READ_PORT+0x2e>
     4d2:	82 36       	cpi	r24, 0x62	; 98
     4d4:	61 f0       	breq	.+24     	; 0x4ee <DIO_u8_READ_PORT+0x32>
     4d6:	83 36       	cpi	r24, 0x63	; 99
     4d8:	18 f4       	brcc	.+6      	; 0x4e0 <DIO_u8_READ_PORT+0x24>
     4da:	81 36       	cpi	r24, 0x61	; 97
     4dc:	69 f4       	brne	.+26     	; 0x4f8 <DIO_u8_READ_PORT+0x3c>
     4de:	05 c0       	rjmp	.+10     	; 0x4ea <DIO_u8_READ_PORT+0x2e>
     4e0:	83 36       	cpi	r24, 0x63	; 99
     4e2:	39 f0       	breq	.+14     	; 0x4f2 <DIO_u8_READ_PORT+0x36>
     4e4:	84 36       	cpi	r24, 0x64	; 100
     4e6:	41 f4       	brne	.+16     	; 0x4f8 <DIO_u8_READ_PORT+0x3c>
     4e8:	06 c0       	rjmp	.+12     	; 0x4f6 <DIO_u8_READ_PORT+0x3a>
	{
		case 'A':
		case 'a':
		val=PINA;
     4ea:	99 b3       	in	r25, 0x19	; 25
		break;
     4ec:	05 c0       	rjmp	.+10     	; 0x4f8 <DIO_u8_READ_PORT+0x3c>
		case 'B':
		case 'b':
		val=PINB;
     4ee:	96 b3       	in	r25, 0x16	; 22
		break;
     4f0:	03 c0       	rjmp	.+6      	; 0x4f8 <DIO_u8_READ_PORT+0x3c>
		case 'C':
		case 'c':
		val=PINC;
     4f2:	93 b3       	in	r25, 0x13	; 19
		break;
     4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <DIO_u8_READ_PORT+0x3c>
		case 'D':
		case 'd':
		val=PIND;
     4f6:	90 b3       	in	r25, 0x10	; 16
		break;
	}
	return val;
}
     4f8:	89 2f       	mov	r24, r25
     4fa:	08 95       	ret

000004fc <DIO_TOGGLE_PORT>:
void DIO_TOGGLE_PORT (unsigned char port)
{
	switch(port)
     4fc:	84 34       	cpi	r24, 0x44	; 68
     4fe:	09 f1       	breq	.+66     	; 0x542 <DIO_TOGGLE_PORT+0x46>
     500:	85 34       	cpi	r24, 0x45	; 69
     502:	38 f4       	brcc	.+14     	; 0x512 <DIO_TOGGLE_PORT+0x16>
     504:	82 34       	cpi	r24, 0x42	; 66
     506:	a9 f0       	breq	.+42     	; 0x532 <DIO_TOGGLE_PORT+0x36>
     508:	83 34       	cpi	r24, 0x43	; 67
     50a:	b8 f4       	brcc	.+46     	; 0x53a <DIO_TOGGLE_PORT+0x3e>
     50c:	81 34       	cpi	r24, 0x41	; 65
     50e:	e1 f4       	brne	.+56     	; 0x548 <DIO_TOGGLE_PORT+0x4c>
     510:	0c c0       	rjmp	.+24     	; 0x52a <DIO_TOGGLE_PORT+0x2e>
     512:	82 36       	cpi	r24, 0x62	; 98
     514:	71 f0       	breq	.+28     	; 0x532 <DIO_TOGGLE_PORT+0x36>
     516:	83 36       	cpi	r24, 0x63	; 99
     518:	18 f4       	brcc	.+6      	; 0x520 <DIO_TOGGLE_PORT+0x24>
     51a:	81 36       	cpi	r24, 0x61	; 97
     51c:	a9 f4       	brne	.+42     	; 0x548 <DIO_TOGGLE_PORT+0x4c>
     51e:	05 c0       	rjmp	.+10     	; 0x52a <DIO_TOGGLE_PORT+0x2e>
     520:	83 36       	cpi	r24, 0x63	; 99
     522:	59 f0       	breq	.+22     	; 0x53a <DIO_TOGGLE_PORT+0x3e>
     524:	84 36       	cpi	r24, 0x64	; 100
     526:	81 f4       	brne	.+32     	; 0x548 <DIO_TOGGLE_PORT+0x4c>
     528:	0c c0       	rjmp	.+24     	; 0x542 <DIO_TOGGLE_PORT+0x46>
	{
		case 'A':
		case 'a':
		PORTA=~PORTA;
     52a:	8b b3       	in	r24, 0x1b	; 27
     52c:	80 95       	com	r24
     52e:	8b bb       	out	0x1b, r24	; 27
		break;
     530:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=~PORTB;
     532:	88 b3       	in	r24, 0x18	; 24
     534:	80 95       	com	r24
     536:	88 bb       	out	0x18, r24	; 24
		break;
     538:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=~PORTC;
     53a:	85 b3       	in	r24, 0x15	; 21
     53c:	80 95       	com	r24
     53e:	85 bb       	out	0x15, r24	; 21
		break;
     540:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=~PORTD;
     542:	82 b3       	in	r24, 0x12	; 18
     544:	80 95       	com	r24
     546:	82 bb       	out	0x12, r24	; 18
     548:	08 95       	ret

0000054a <DIO_ENABLE_PULL_UP>:
		break;
	}
}
void DIO_ENABLE_PULL_UP(unsigned char port,unsigned char pin,unsigned char enable)
{
	switch(port)
     54a:	84 34       	cpi	r24, 0x44	; 68
     54c:	09 f4       	brne	.+2      	; 0x550 <DIO_ENABLE_PULL_UP+0x6>
     54e:	71 c0       	rjmp	.+226    	; 0x632 <DIO_ENABLE_PULL_UP+0xe8>
     550:	85 34       	cpi	r24, 0x45	; 69
     552:	48 f4       	brcc	.+18     	; 0x566 <DIO_ENABLE_PULL_UP+0x1c>
     554:	82 34       	cpi	r24, 0x42	; 66
     556:	99 f1       	breq	.+102    	; 0x5be <DIO_ENABLE_PULL_UP+0x74>
     558:	83 34       	cpi	r24, 0x43	; 67
     55a:	08 f0       	brcs	.+2      	; 0x55e <DIO_ENABLE_PULL_UP+0x14>
     55c:	4d c0       	rjmp	.+154    	; 0x5f8 <DIO_ENABLE_PULL_UP+0xae>
     55e:	81 34       	cpi	r24, 0x41	; 65
     560:	09 f0       	breq	.+2      	; 0x564 <DIO_ENABLE_PULL_UP+0x1a>
     562:	83 c0       	rjmp	.+262    	; 0x66a <DIO_ENABLE_PULL_UP+0x120>
     564:	0f c0       	rjmp	.+30     	; 0x584 <DIO_ENABLE_PULL_UP+0x3a>
     566:	82 36       	cpi	r24, 0x62	; 98
     568:	51 f1       	breq	.+84     	; 0x5be <DIO_ENABLE_PULL_UP+0x74>
     56a:	83 36       	cpi	r24, 0x63	; 99
     56c:	20 f4       	brcc	.+8      	; 0x576 <DIO_ENABLE_PULL_UP+0x2c>
     56e:	81 36       	cpi	r24, 0x61	; 97
     570:	09 f0       	breq	.+2      	; 0x574 <DIO_ENABLE_PULL_UP+0x2a>
     572:	7b c0       	rjmp	.+246    	; 0x66a <DIO_ENABLE_PULL_UP+0x120>
     574:	07 c0       	rjmp	.+14     	; 0x584 <DIO_ENABLE_PULL_UP+0x3a>
     576:	83 36       	cpi	r24, 0x63	; 99
     578:	09 f4       	brne	.+2      	; 0x57c <DIO_ENABLE_PULL_UP+0x32>
     57a:	3e c0       	rjmp	.+124    	; 0x5f8 <DIO_ENABLE_PULL_UP+0xae>
     57c:	84 36       	cpi	r24, 0x64	; 100
     57e:	09 f0       	breq	.+2      	; 0x582 <DIO_ENABLE_PULL_UP+0x38>
     580:	74 c0       	rjmp	.+232    	; 0x66a <DIO_ENABLE_PULL_UP+0x120>
     582:	57 c0       	rjmp	.+174    	; 0x632 <DIO_ENABLE_PULL_UP+0xe8>
	{
		case 'A':
		case 'a':
		if(enable==1)
     584:	41 30       	cpi	r20, 0x01	; 1
     586:	69 f4       	brne	.+26     	; 0x5a2 <DIO_ENABLE_PULL_UP+0x58>
		{
			SET_BIT(PORTA,pin);
     588:	2b b3       	in	r18, 0x1b	; 27
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	ac 01       	movw	r20, r24
     590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_ENABLE_PULL_UP+0x4c>
     592:	44 0f       	add	r20, r20
     594:	55 1f       	adc	r21, r21
     596:	6a 95       	dec	r22
     598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_ENABLE_PULL_UP+0x48>
     59a:	ba 01       	movw	r22, r20
     59c:	62 2b       	or	r22, r18
     59e:	6b bb       	out	0x1b, r22	; 27
     5a0:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin);
     5a2:	2b b3       	in	r18, 0x1b	; 27
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	ac 01       	movw	r20, r24
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <DIO_ENABLE_PULL_UP+0x66>
     5ac:	44 0f       	add	r20, r20
     5ae:	55 1f       	adc	r21, r21
     5b0:	6a 95       	dec	r22
     5b2:	e2 f7       	brpl	.-8      	; 0x5ac <DIO_ENABLE_PULL_UP+0x62>
     5b4:	ba 01       	movw	r22, r20
     5b6:	60 95       	com	r22
     5b8:	62 23       	and	r22, r18
     5ba:	6b bb       	out	0x1b, r22	; 27
     5bc:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if(enable==1)
     5be:	41 30       	cpi	r20, 0x01	; 1
     5c0:	69 f4       	brne	.+26     	; 0x5dc <DIO_ENABLE_PULL_UP+0x92>
		{
			SET_BIT(PORTB,pin);
     5c2:	28 b3       	in	r18, 0x18	; 24
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	ac 01       	movw	r20, r24
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <DIO_ENABLE_PULL_UP+0x86>
     5cc:	44 0f       	add	r20, r20
     5ce:	55 1f       	adc	r21, r21
     5d0:	6a 95       	dec	r22
     5d2:	e2 f7       	brpl	.-8      	; 0x5cc <DIO_ENABLE_PULL_UP+0x82>
     5d4:	ba 01       	movw	r22, r20
     5d6:	62 2b       	or	r22, r18
     5d8:	68 bb       	out	0x18, r22	; 24
     5da:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin);
     5dc:	28 b3       	in	r18, 0x18	; 24
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	ac 01       	movw	r20, r24
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <DIO_ENABLE_PULL_UP+0xa0>
     5e6:	44 0f       	add	r20, r20
     5e8:	55 1f       	adc	r21, r21
     5ea:	6a 95       	dec	r22
     5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <DIO_ENABLE_PULL_UP+0x9c>
     5ee:	ba 01       	movw	r22, r20
     5f0:	60 95       	com	r22
     5f2:	62 23       	and	r22, r18
     5f4:	68 bb       	out	0x18, r22	; 24
     5f6:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if(enable==1)
     5f8:	41 30       	cpi	r20, 0x01	; 1
     5fa:	69 f4       	brne	.+26     	; 0x616 <DIO_ENABLE_PULL_UP+0xcc>
		{
			SET_BIT(PORTC,pin);
     5fc:	25 b3       	in	r18, 0x15	; 21
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	ac 01       	movw	r20, r24
     604:	02 c0       	rjmp	.+4      	; 0x60a <DIO_ENABLE_PULL_UP+0xc0>
     606:	44 0f       	add	r20, r20
     608:	55 1f       	adc	r21, r21
     60a:	6a 95       	dec	r22
     60c:	e2 f7       	brpl	.-8      	; 0x606 <DIO_ENABLE_PULL_UP+0xbc>
     60e:	ba 01       	movw	r22, r20
     610:	62 2b       	or	r22, r18
     612:	65 bb       	out	0x15, r22	; 21
     614:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin);
     616:	25 b3       	in	r18, 0x15	; 21
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	ac 01       	movw	r20, r24
     61e:	02 c0       	rjmp	.+4      	; 0x624 <DIO_ENABLE_PULL_UP+0xda>
     620:	44 0f       	add	r20, r20
     622:	55 1f       	adc	r21, r21
     624:	6a 95       	dec	r22
     626:	e2 f7       	brpl	.-8      	; 0x620 <DIO_ENABLE_PULL_UP+0xd6>
     628:	ba 01       	movw	r22, r20
     62a:	60 95       	com	r22
     62c:	62 23       	and	r22, r18
     62e:	65 bb       	out	0x15, r22	; 21
     630:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if(enable==1)
     632:	41 30       	cpi	r20, 0x01	; 1
     634:	69 f4       	brne	.+26     	; 0x650 <DIO_ENABLE_PULL_UP+0x106>
		{
			SET_BIT(PORTD,pin);
     636:	22 b3       	in	r18, 0x12	; 18
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	ac 01       	movw	r20, r24
     63e:	02 c0       	rjmp	.+4      	; 0x644 <DIO_ENABLE_PULL_UP+0xfa>
     640:	44 0f       	add	r20, r20
     642:	55 1f       	adc	r21, r21
     644:	6a 95       	dec	r22
     646:	e2 f7       	brpl	.-8      	; 0x640 <DIO_ENABLE_PULL_UP+0xf6>
     648:	ba 01       	movw	r22, r20
     64a:	62 2b       	or	r22, r18
     64c:	62 bb       	out	0x12, r22	; 18
     64e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pin);
     650:	22 b3       	in	r18, 0x12	; 18
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	ac 01       	movw	r20, r24
     658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_ENABLE_PULL_UP+0x114>
     65a:	44 0f       	add	r20, r20
     65c:	55 1f       	adc	r21, r21
     65e:	6a 95       	dec	r22
     660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_ENABLE_PULL_UP+0x110>
     662:	ba 01       	movw	r22, r20
     664:	60 95       	com	r22
     666:	62 23       	and	r22, r18
     668:	62 bb       	out	0x12, r22	; 18
     66a:	08 95       	ret

0000066c <DIO_WRITE_Lownibble>:
		}
		break;
	}
}
void DIO_WRITE_Lownibble(unsigned char port,unsigned char val)
{
     66c:	0f 93       	push	r16
     66e:	1f 93       	push	r17
     670:	cf 93       	push	r28
     672:	c8 2f       	mov	r28, r24
     674:	06 2f       	mov	r16, r22
	DIO_WRITE_PIN(port,0,READ_BIT(val,0));
     676:	46 2f       	mov	r20, r22
     678:	41 70       	andi	r20, 0x01	; 1
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
	DIO_WRITE_PIN(port,1,READ_BIT(val,1));
     680:	10 e0       	ldi	r17, 0x00	; 0
     682:	a8 01       	movw	r20, r16
     684:	42 70       	andi	r20, 0x02	; 2
     686:	50 70       	andi	r21, 0x00	; 0
     688:	56 95       	lsr	r21
     68a:	47 95       	ror	r20
     68c:	8c 2f       	mov	r24, r28
     68e:	61 e0       	ldi	r22, 0x01	; 1
     690:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
	DIO_WRITE_PIN(port,2,READ_BIT(val,2));
     694:	a8 01       	movw	r20, r16
     696:	44 70       	andi	r20, 0x04	; 4
     698:	50 70       	andi	r21, 0x00	; 0
     69a:	56 95       	lsr	r21
     69c:	47 95       	ror	r20
     69e:	56 95       	lsr	r21
     6a0:	47 95       	ror	r20
     6a2:	8c 2f       	mov	r24, r28
     6a4:	62 e0       	ldi	r22, 0x02	; 2
     6a6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
	DIO_WRITE_PIN(port,3,READ_BIT(val,3));
     6aa:	08 70       	andi	r16, 0x08	; 8
     6ac:	10 70       	andi	r17, 0x00	; 0
     6ae:	a8 01       	movw	r20, r16
     6b0:	56 95       	lsr	r21
     6b2:	47 95       	ror	r20
     6b4:	56 95       	lsr	r21
     6b6:	47 95       	ror	r20
     6b8:	56 95       	lsr	r21
     6ba:	47 95       	ror	r20
     6bc:	8c 2f       	mov	r24, r28
     6be:	63 e0       	ldi	r22, 0x03	; 3
     6c0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
		case 'd':
		PORTD&=0xF0;
		PORTD|=val;
		break;
	}*/
}
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	0f 91       	pop	r16
     6ca:	08 95       	ret

000006cc <DIO_WRITE_Highnibble>:
void DIO_WRITE_Highnibble(unsigned char port,unsigned char val)
{
     6cc:	0f 93       	push	r16
     6ce:	1f 93       	push	r17
     6d0:	cf 93       	push	r28
     6d2:	c8 2f       	mov	r28, r24
     6d4:	06 2f       	mov	r16, r22
	DIO_WRITE_PIN(port,4,READ_BIT(val,0));
     6d6:	46 2f       	mov	r20, r22
     6d8:	41 70       	andi	r20, 0x01	; 1
     6da:	64 e0       	ldi	r22, 0x04	; 4
     6dc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
	DIO_WRITE_PIN(port,5,READ_BIT(val,1));
     6e0:	10 e0       	ldi	r17, 0x00	; 0
     6e2:	a8 01       	movw	r20, r16
     6e4:	42 70       	andi	r20, 0x02	; 2
     6e6:	50 70       	andi	r21, 0x00	; 0
     6e8:	56 95       	lsr	r21
     6ea:	47 95       	ror	r20
     6ec:	8c 2f       	mov	r24, r28
     6ee:	65 e0       	ldi	r22, 0x05	; 5
     6f0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
	DIO_WRITE_PIN(port,6,READ_BIT(val,2));
     6f4:	a8 01       	movw	r20, r16
     6f6:	44 70       	andi	r20, 0x04	; 4
     6f8:	50 70       	andi	r21, 0x00	; 0
     6fa:	56 95       	lsr	r21
     6fc:	47 95       	ror	r20
     6fe:	56 95       	lsr	r21
     700:	47 95       	ror	r20
     702:	8c 2f       	mov	r24, r28
     704:	66 e0       	ldi	r22, 0x06	; 6
     706:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
	DIO_WRITE_PIN(port,7,READ_BIT(val,3));
     70a:	08 70       	andi	r16, 0x08	; 8
     70c:	10 70       	andi	r17, 0x00	; 0
     70e:	a8 01       	movw	r20, r16
     710:	56 95       	lsr	r21
     712:	47 95       	ror	r20
     714:	56 95       	lsr	r21
     716:	47 95       	ror	r20
     718:	56 95       	lsr	r21
     71a:	47 95       	ror	r20
     71c:	8c 2f       	mov	r24, r28
     71e:	67 e0       	ldi	r22, 0x07	; 7
     720:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
		case 'd':
		PORTD&=0x0F;
		PORTD|=val;
		break;
	}*/
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	0f 91       	pop	r16
     72a:	08 95       	ret

0000072c <EEPROM_WRITE>:
#include <avr/io.h>
#include "STD_MACROS.h"
void EEPROM_WRITE(unsigned short address,unsigned char data)
{
	EEAR=address;
     72c:	9f bb       	out	0x1f, r25	; 31
     72e:	8e bb       	out	0x1e, r24	; 30
	//*((volatile unsigned short*)(0x3E))=address;
	/*EEARL=(char)(address);
	EEARH=(char)(address>>8);*/
	EEDR=data;
     730:	6d bb       	out	0x1d, r22	; 29
	SET_BIT(EECR,EEMWE);
     732:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(EECR,EEWE);
     734:	e1 9a       	sbi	0x1c, 1	; 28
	while((READ_BIT(EECR,EEWE))==1);
     736:	e1 99       	sbic	0x1c, 1	; 28
     738:	fe cf       	rjmp	.-4      	; 0x736 <EEPROM_WRITE+0xa>
}
     73a:	08 95       	ret

0000073c <EEPROM_READ>:
unsigned char EEPROM_READ(unsigned short address)
{
	EEAR=address;
     73c:	9f bb       	out	0x1f, r25	; 31
     73e:	8e bb       	out	0x1e, r24	; 30
	SET_BIT(EECR,EERE);
     740:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
     742:	8d b3       	in	r24, 0x1d	; 29
     744:	08 95       	ret

00000746 <KEYPAD_Init>:
#include "DIO.h"
#include "KEYPAD.h"
void KEYPAD_Init(void)
{
	DIO_SET_PIN_DIR('D',0,1);//rows
     746:	84 e4       	ldi	r24, 0x44	; 68
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	41 e0       	ldi	r20, 0x01	; 1
     74c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('D',1,1);
     750:	84 e4       	ldi	r24, 0x44	; 68
     752:	61 e0       	ldi	r22, 0x01	; 1
     754:	41 e0       	ldi	r20, 0x01	; 1
     756:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('D',2,1);
     75a:	84 e4       	ldi	r24, 0x44	; 68
     75c:	62 e0       	ldi	r22, 0x02	; 2
     75e:	41 e0       	ldi	r20, 0x01	; 1
     760:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('D',3,1);
     764:	84 e4       	ldi	r24, 0x44	; 68
     766:	63 e0       	ldi	r22, 0x03	; 3
     768:	41 e0       	ldi	r20, 0x01	; 1
     76a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
	
	DIO_SET_PIN_DIR('D',4,0);//coloums
     76e:	84 e4       	ldi	r24, 0x44	; 68
     770:	64 e0       	ldi	r22, 0x04	; 4
     772:	40 e0       	ldi	r20, 0x00	; 0
     774:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('D',5,0);
     778:	84 e4       	ldi	r24, 0x44	; 68
     77a:	65 e0       	ldi	r22, 0x05	; 5
     77c:	40 e0       	ldi	r20, 0x00	; 0
     77e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('D',6,0);
     782:	84 e4       	ldi	r24, 0x44	; 68
     784:	66 e0       	ldi	r22, 0x06	; 6
     786:	40 e0       	ldi	r20, 0x00	; 0
     788:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('D',7,0);
     78c:	84 e4       	ldi	r24, 0x44	; 68
     78e:	67 e0       	ldi	r22, 0x07	; 7
     790:	40 e0       	ldi	r20, 0x00	; 0
     792:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
	
	DIO_ENABLE_PULL_UP('D',4,1);//set pull-up resistances 
     796:	84 e4       	ldi	r24, 0x44	; 68
     798:	64 e0       	ldi	r22, 0x04	; 4
     79a:	41 e0       	ldi	r20, 0x01	; 1
     79c:	0e 94 a5 02 	call	0x54a	; 0x54a <DIO_ENABLE_PULL_UP>
	DIO_ENABLE_PULL_UP('D',5,1);
     7a0:	84 e4       	ldi	r24, 0x44	; 68
     7a2:	65 e0       	ldi	r22, 0x05	; 5
     7a4:	41 e0       	ldi	r20, 0x01	; 1
     7a6:	0e 94 a5 02 	call	0x54a	; 0x54a <DIO_ENABLE_PULL_UP>
	DIO_ENABLE_PULL_UP('D',6,1);
     7aa:	84 e4       	ldi	r24, 0x44	; 68
     7ac:	66 e0       	ldi	r22, 0x06	; 6
     7ae:	41 e0       	ldi	r20, 0x01	; 1
     7b0:	0e 94 a5 02 	call	0x54a	; 0x54a <DIO_ENABLE_PULL_UP>
	DIO_ENABLE_PULL_UP('D',7,1);
     7b4:	84 e4       	ldi	r24, 0x44	; 68
     7b6:	67 e0       	ldi	r22, 0x07	; 7
     7b8:	41 e0       	ldi	r20, 0x01	; 1
     7ba:	0e 94 a5 02 	call	0x54a	; 0x54a <DIO_ENABLE_PULL_UP>
}
     7be:	08 95       	ret

000007c0 <KEYPAD_CHECK_PRESS>:
unsigned char KEYPAD_CHECK_PRESS(void)
{
     7c0:	0f 93       	push	r16
     7c2:	1f 93       	push	r17
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
     7cc:	60 97       	sbiw	r28, 0x10	; 16
     7ce:	0f b6       	in	r0, 0x3f	; 63
     7d0:	f8 94       	cli
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	cd bf       	out	0x3d, r28	; 61
	unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
     7d8:	de 01       	movw	r26, r28
     7da:	11 96       	adiw	r26, 0x01	; 1
     7dc:	e0 e6       	ldi	r30, 0x60	; 96
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	80 e1       	ldi	r24, 0x10	; 16
     7e2:	01 90       	ld	r0, Z+
     7e4:	0d 92       	st	X+, r0
     7e6:	81 50       	subi	r24, 0x01	; 1
     7e8:	e1 f7       	brne	.-8      	; 0x7e2 <KEYPAD_CHECK_PRESS+0x22>
	unsigned char coloum,row,x;
	unsigned char return_val=0xFF;
	for(row=0;row<=3;row++)
     7ea:	00 e0       	ldi	r16, 0x00	; 0
	{
		DIO_WRITE_PIN('D',0,1);
     7ec:	84 e4       	ldi	r24, 0x44	; 68
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	41 e0       	ldi	r20, 0x01	; 1
     7f2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
		DIO_WRITE_PIN('D',1,1);
     7f6:	84 e4       	ldi	r24, 0x44	; 68
     7f8:	61 e0       	ldi	r22, 0x01	; 1
     7fa:	41 e0       	ldi	r20, 0x01	; 1
     7fc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
		DIO_WRITE_PIN('D',2,1);
     800:	84 e4       	ldi	r24, 0x44	; 68
     802:	62 e0       	ldi	r22, 0x02	; 2
     804:	41 e0       	ldi	r20, 0x01	; 1
     806:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
		DIO_WRITE_PIN('D',3,1);
     80a:	84 e4       	ldi	r24, 0x44	; 68
     80c:	63 e0       	ldi	r22, 0x03	; 3
     80e:	41 e0       	ldi	r20, 0x01	; 1
     810:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
		DIO_WRITE_PIN('D',row,0);
     814:	84 e4       	ldi	r24, 0x44	; 68
     816:	60 2f       	mov	r22, r16
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
		for(coloum=0;coloum<=3;coloum++)
     81e:	10 e0       	ldi	r17, 0x00	; 0
		{
			x=DIO_u8_READ_PIN('D',coloum+4);
     820:	61 2f       	mov	r22, r17
     822:	6c 5f       	subi	r22, 0xFC	; 252
     824:	84 e4       	ldi	r24, 0x44	; 68
     826:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_u8_READ_PIN>
			if(x==0)
     82a:	88 23       	and	r24, r24
     82c:	61 f4       	brne	.+24     	; 0x846 <KEYPAD_CHECK_PRESS+0x86>
			{
				return_val=arr[row][coloum];
     82e:	e0 2f       	mov	r30, r16
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	ee 0f       	add	r30, r30
     834:	ff 1f       	adc	r31, r31
     836:	ee 0f       	add	r30, r30
     838:	ff 1f       	adc	r31, r31
     83a:	e1 0f       	add	r30, r17
     83c:	f1 1d       	adc	r31, r1
     83e:	ec 0f       	add	r30, r28
     840:	fd 1f       	adc	r31, r29
     842:	81 81       	ldd	r24, Z+1	; 0x01
     844:	04 c0       	rjmp	.+8      	; 0x84e <KEYPAD_CHECK_PRESS+0x8e>
		DIO_WRITE_PIN('D',0,1);
		DIO_WRITE_PIN('D',1,1);
		DIO_WRITE_PIN('D',2,1);
		DIO_WRITE_PIN('D',3,1);
		DIO_WRITE_PIN('D',row,0);
		for(coloum=0;coloum<=3;coloum++)
     846:	1f 5f       	subi	r17, 0xFF	; 255
     848:	14 30       	cpi	r17, 0x04	; 4
     84a:	51 f7       	brne	.-44     	; 0x820 <KEYPAD_CHECK_PRESS+0x60>
     84c:	0b c0       	rjmp	.+22     	; 0x864 <__stack+0x5>
		{
			break;
		}
	}
	return return_val;
     84e:	60 96       	adiw	r28, 0x10	; 16
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	f8 94       	cli
     854:	de bf       	out	0x3e, r29	; 62
     856:	0f be       	out	0x3f, r0	; 63
     858:	cd bf       	out	0x3d, r28	; 61
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	08 95       	ret
unsigned char KEYPAD_CHECK_PRESS(void)
{
	unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	unsigned char coloum,row,x;
	unsigned char return_val=0xFF;
	for(row=0;row<=3;row++)
     864:	0f 5f       	subi	r16, 0xFF	; 255
     866:	04 30       	cpi	r16, 0x04	; 4
     868:	09 f6       	brne	.-126    	; 0x7ec <KEYPAD_CHECK_PRESS+0x2c>
     86a:	8f ef       	ldi	r24, 0xFF	; 255
     86c:	f0 cf       	rjmp	.-32     	; 0x84e <KEYPAD_CHECK_PRESS+0x8e>

0000086e <ENABLE>:
	_delay_ms(1);
	
	#endif
}
void ENABLE(unsigned char port,unsigned char pin)
{
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	d8 2f       	mov	r29, r24
     874:	c6 2f       	mov	r28, r22
	//DIO_SET_PIN_DIR(port,pin,1);
	DIO_WRITE_PIN(port,pin,1);
     876:	41 e0       	ldi	r20, 0x01	; 1
     878:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     87c:	8f e9       	ldi	r24, 0x9F	; 159
     87e:	9f e0       	ldi	r25, 0x0F	; 15
     880:	01 97       	sbiw	r24, 0x01	; 1
     882:	f1 f7       	brne	.-4      	; 0x880 <ENABLE+0x12>
     884:	00 c0       	rjmp	.+0      	; 0x886 <ENABLE+0x18>
     886:	00 00       	nop
	_delay_ms(2);
	DIO_WRITE_PIN(port,pin,0);
     888:	8d 2f       	mov	r24, r29
     88a:	6c 2f       	mov	r22, r28
     88c:	40 e0       	ldi	r20, 0x00	; 0
     88e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
     892:	8f e9       	ldi	r24, 0x9F	; 159
     894:	9f e0       	ldi	r25, 0x0F	; 15
     896:	01 97       	sbiw	r24, 0x01	; 1
     898:	f1 f7       	brne	.-4      	; 0x896 <ENABLE+0x28>
     89a:	00 c0       	rjmp	.+0      	; 0x89c <ENABLE+0x2e>
     89c:	00 00       	nop
	_delay_ms(2);
}
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <LCD_SEND_char>:
void LCD_SEND_char(unsigned char port,unsigned char data)
{
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	d8 2f       	mov	r29, r24
     8aa:	c6 2f       	mov	r28, r22
	DIO_WRITE_PIN('B',RS,1);
	ENABLE('B',EN);
	
	#elif defined four_bits_mode
	
	DIO_WRITE_Highnibble(port,data>>4);
     8ac:	62 95       	swap	r22
     8ae:	6f 70       	andi	r22, 0x0F	; 15
     8b0:	0e 94 66 03 	call	0x6cc	; 0x6cc <DIO_WRITE_Highnibble>
	DIO_WRITE_PIN('B',RS,1);
     8b4:	82 e4       	ldi	r24, 0x42	; 66
     8b6:	61 e0       	ldi	r22, 0x01	; 1
     8b8:	41 e0       	ldi	r20, 0x01	; 1
     8ba:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
	ENABLE('B',EN);
     8be:	82 e4       	ldi	r24, 0x42	; 66
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	0e 94 37 04 	call	0x86e	; 0x86e <ENABLE>
	DIO_WRITE_Highnibble(port,data);
     8c6:	8d 2f       	mov	r24, r29
     8c8:	6c 2f       	mov	r22, r28
     8ca:	0e 94 66 03 	call	0x6cc	; 0x6cc <DIO_WRITE_Highnibble>
	ENABLE('B',EN);
     8ce:	82 e4       	ldi	r24, 0x42	; 66
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	0e 94 37 04 	call	0x86e	; 0x86e <ENABLE>
	
	#endif
}
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	08 95       	ret

000008dc <LCD_SEND_CMD>:
void LCD_SEND_CMD(unsigned char port,unsigned char cmd)
{
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	d8 2f       	mov	r29, r24
     8e2:	c6 2f       	mov	r28, r22
	ENABLE('B',EN);
	_delay_ms(1);
	
	#elif defined four_bits_mode
	
	DIO_WRITE_Highnibble(port,cmd>>4);
     8e4:	62 95       	swap	r22
     8e6:	6f 70       	andi	r22, 0x0F	; 15
     8e8:	0e 94 66 03 	call	0x6cc	; 0x6cc <DIO_WRITE_Highnibble>
	DIO_WRITE_PIN('B',RS,0);
     8ec:	82 e4       	ldi	r24, 0x42	; 66
     8ee:	61 e0       	ldi	r22, 0x01	; 1
     8f0:	40 e0       	ldi	r20, 0x00	; 0
     8f2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
	ENABLE('B',EN);
     8f6:	82 e4       	ldi	r24, 0x42	; 66
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	0e 94 37 04 	call	0x86e	; 0x86e <ENABLE>
	DIO_WRITE_Highnibble(port,cmd);
     8fe:	8d 2f       	mov	r24, r29
     900:	6c 2f       	mov	r22, r28
     902:	0e 94 66 03 	call	0x6cc	; 0x6cc <DIO_WRITE_Highnibble>
	ENABLE('B',EN);
     906:	82 e4       	ldi	r24, 0x42	; 66
     908:	60 e0       	ldi	r22, 0x00	; 0
     90a:	0e 94 37 04 	call	0x86e	; 0x86e <ENABLE>
     90e:	8f ec       	ldi	r24, 0xCF	; 207
     910:	97 e0       	ldi	r25, 0x07	; 7
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	f1 f7       	brne	.-4      	; 0x912 <LCD_SEND_CMD+0x36>
     916:	00 c0       	rjmp	.+0      	; 0x918 <LCD_SEND_CMD+0x3c>
     918:	00 00       	nop
	_delay_ms(1);
	
	#endif
}
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	08 95       	ret

00000920 <LCD_Init>:
     920:	8f ef       	ldi	r24, 0xFF	; 255
     922:	91 ee       	ldi	r25, 0xE1	; 225
     924:	a4 e0       	ldi	r26, 0x04	; 4
     926:	81 50       	subi	r24, 0x01	; 1
     928:	90 40       	sbci	r25, 0x00	; 0
     92a:	a0 40       	sbci	r26, 0x00	; 0
     92c:	e1 f7       	brne	.-8      	; 0x926 <LCD_Init+0x6>
     92e:	00 c0       	rjmp	.+0      	; 0x930 <LCD_Init+0x10>
     930:	00 00       	nop
	_delay_ms(1);
	
	#elif defined four_bits_mode
	
	_delay_ms(200);
	DIO_SET_PIN_DIR('A',4,1);
     932:	81 e4       	ldi	r24, 0x41	; 65
     934:	64 e0       	ldi	r22, 0x04	; 4
     936:	41 e0       	ldi	r20, 0x01	; 1
     938:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('A',5,1);
     93c:	81 e4       	ldi	r24, 0x41	; 65
     93e:	65 e0       	ldi	r22, 0x05	; 5
     940:	41 e0       	ldi	r20, 0x01	; 1
     942:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('A',6,1);
     946:	81 e4       	ldi	r24, 0x41	; 65
     948:	66 e0       	ldi	r22, 0x06	; 6
     94a:	41 e0       	ldi	r20, 0x01	; 1
     94c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('A',7,1);
     950:	81 e4       	ldi	r24, 0x41	; 65
     952:	67 e0       	ldi	r22, 0x07	; 7
     954:	41 e0       	ldi	r20, 0x01	; 1
     956:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('B',EN,1);
     95a:	82 e4       	ldi	r24, 0x42	; 66
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	41 e0       	ldi	r20, 0x01	; 1
     960:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('B',RS,1);
     964:	82 e4       	ldi	r24, 0x42	; 66
     966:	61 e0       	ldi	r22, 0x01	; 1
     968:	41 e0       	ldi	r20, 0x01	; 1
     96a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
	LCD_SEND_CMD('A',RETURN_HOME);
     96e:	81 e4       	ldi	r24, 0x41	; 65
     970:	62 e0       	ldi	r22, 0x02	; 2
     972:	0e 94 6e 04 	call	0x8dc	; 0x8dc <LCD_SEND_CMD>
     976:	af e1       	ldi	r26, 0x1F	; 31
     978:	be e4       	ldi	r27, 0x4E	; 78
     97a:	11 97       	sbiw	r26, 0x01	; 1
     97c:	f1 f7       	brne	.-4      	; 0x97a <LCD_Init+0x5a>
     97e:	00 c0       	rjmp	.+0      	; 0x980 <LCD_Init+0x60>
     980:	00 00       	nop
	_delay_ms(10);
	LCD_SEND_CMD('A',FOUR_BITS); 
     982:	81 e4       	ldi	r24, 0x41	; 65
     984:	68 e2       	ldi	r22, 0x28	; 40
     986:	0e 94 6e 04 	call	0x8dc	; 0x8dc <LCD_SEND_CMD>
     98a:	8f ec       	ldi	r24, 0xCF	; 207
     98c:	97 e0       	ldi	r25, 0x07	; 7
     98e:	01 97       	sbiw	r24, 0x01	; 1
     990:	f1 f7       	brne	.-4      	; 0x98e <LCD_Init+0x6e>
     992:	00 c0       	rjmp	.+0      	; 0x994 <LCD_Init+0x74>
     994:	00 00       	nop
	_delay_ms(1);
	LCD_SEND_CMD('A',CURSOR_ON_DISPLAN_ON);
     996:	81 e4       	ldi	r24, 0x41	; 65
     998:	6e e0       	ldi	r22, 0x0E	; 14
     99a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <LCD_SEND_CMD>
     99e:	af ec       	ldi	r26, 0xCF	; 207
     9a0:	b7 e0       	ldi	r27, 0x07	; 7
     9a2:	11 97       	sbiw	r26, 0x01	; 1
     9a4:	f1 f7       	brne	.-4      	; 0x9a2 <LCD_Init+0x82>
     9a6:	00 c0       	rjmp	.+0      	; 0x9a8 <LCD_Init+0x88>
     9a8:	00 00       	nop
	_delay_ms(1);
	LCD_SEND_CMD('A',CLR_SCREEN);
     9aa:	81 e4       	ldi	r24, 0x41	; 65
     9ac:	61 e0       	ldi	r22, 0x01	; 1
     9ae:	0e 94 6e 04 	call	0x8dc	; 0x8dc <LCD_SEND_CMD>
     9b2:	8f e1       	ldi	r24, 0x1F	; 31
     9b4:	9e e4       	ldi	r25, 0x4E	; 78
     9b6:	01 97       	sbiw	r24, 0x01	; 1
     9b8:	f1 f7       	brne	.-4      	; 0x9b6 <LCD_Init+0x96>
     9ba:	00 c0       	rjmp	.+0      	; 0x9bc <LCD_Init+0x9c>
     9bc:	00 00       	nop
	_delay_ms(10);
	LCD_SEND_CMD('A',ENTRY_MODE);
     9be:	81 e4       	ldi	r24, 0x41	; 65
     9c0:	66 e0       	ldi	r22, 0x06	; 6
     9c2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <LCD_SEND_CMD>
     9c6:	af ec       	ldi	r26, 0xCF	; 207
     9c8:	b7 e0       	ldi	r27, 0x07	; 7
     9ca:	11 97       	sbiw	r26, 0x01	; 1
     9cc:	f1 f7       	brne	.-4      	; 0x9ca <LCD_Init+0xaa>
     9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <LCD_Init+0xb0>
     9d0:	00 00       	nop
	_delay_ms(1);
	
	#endif
}
     9d2:	08 95       	ret

000009d4 <LCD_CLR_SCREEN>:
	
	#endif
}
void LCD_CLR_SCREEN(void)
{
	LCD_SEND_CMD('A',0x01);
     9d4:	81 e4       	ldi	r24, 0x41	; 65
     9d6:	61 e0       	ldi	r22, 0x01	; 1
     9d8:	0e 94 6e 04 	call	0x8dc	; 0x8dc <LCD_SEND_CMD>
}
     9dc:	08 95       	ret

000009de <LCD_Move_Cursor>:
void LCD_Move_Cursor(unsigned char row,unsigned char coloum)
{
	unsigned char data;
	if(row>2||row<1||coloum>16||coloum<1)
     9de:	28 2f       	mov	r18, r24
     9e0:	21 50       	subi	r18, 0x01	; 1
     9e2:	22 30       	cpi	r18, 0x02	; 2
     9e4:	70 f4       	brcc	.+28     	; 0xa02 <LCD_Move_Cursor+0x24>
     9e6:	61 31       	cpi	r22, 0x11	; 17
     9e8:	70 f4       	brcc	.+28     	; 0xa06 <LCD_Move_Cursor+0x28>
     9ea:	66 23       	and	r22, r22
     9ec:	71 f0       	breq	.+28     	; 0xa0a <LCD_Move_Cursor+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
     9ee:	81 30       	cpi	r24, 0x01	; 1
     9f0:	19 f4       	brne	.+6      	; 0x9f8 <LCD_Move_Cursor+0x1a>
	{
		data=0x80+coloum-1;
     9f2:	96 2f       	mov	r25, r22
     9f4:	91 58       	subi	r25, 0x81	; 129
     9f6:	0a c0       	rjmp	.+20     	; 0xa0c <LCD_Move_Cursor+0x2e>
	}
	else if(row==2)
     9f8:	82 30       	cpi	r24, 0x02	; 2
     9fa:	41 f4       	brne	.+16     	; 0xa0c <LCD_Move_Cursor+0x2e>
	{
		data=0xc0+coloum-1;
     9fc:	96 2f       	mov	r25, r22
     9fe:	91 54       	subi	r25, 0x41	; 65
     a00:	05 c0       	rjmp	.+10     	; 0xa0c <LCD_Move_Cursor+0x2e>
void LCD_Move_Cursor(unsigned char row,unsigned char coloum)
{
	unsigned char data;
	if(row>2||row<1||coloum>16||coloum<1)
	{
		data=0x80;
     a02:	90 e8       	ldi	r25, 0x80	; 128
     a04:	03 c0       	rjmp	.+6      	; 0xa0c <LCD_Move_Cursor+0x2e>
     a06:	90 e8       	ldi	r25, 0x80	; 128
     a08:	01 c0       	rjmp	.+2      	; 0xa0c <LCD_Move_Cursor+0x2e>
     a0a:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if(row==2)
	{
		data=0xc0+coloum-1;
	}
	LCD_SEND_CMD('A',data);
     a0c:	81 e4       	ldi	r24, 0x41	; 65
     a0e:	69 2f       	mov	r22, r25
     a10:	0e 94 6e 04 	call	0x8dc	; 0x8dc <LCD_SEND_CMD>
     a14:	8f ec       	ldi	r24, 0xCF	; 207
     a16:	97 e0       	ldi	r25, 0x07	; 7
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	f1 f7       	brne	.-4      	; 0xa18 <LCD_Move_Cursor+0x3a>
     a1c:	00 c0       	rjmp	.+0      	; 0xa1e <LCD_Move_Cursor+0x40>
     a1e:	00 00       	nop
	_delay_ms(1);
}
     a20:	08 95       	ret

00000a22 <LCD_SEND_STRING>:
void LCD_SEND_STRING(unsigned char *ptr)
{
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	ec 01       	movw	r28, r24
	while((*ptr)!=0)
     a28:	68 81       	ld	r22, Y
     a2a:	66 23       	and	r22, r22
     a2c:	39 f0       	breq	.+14     	; 0xa3c <LCD_SEND_STRING+0x1a>
		data=0xc0+coloum-1;
	}
	LCD_SEND_CMD('A',data);
	_delay_ms(1);
}
void LCD_SEND_STRING(unsigned char *ptr)
     a2e:	21 96       	adiw	r28, 0x01	; 1
{
	while((*ptr)!=0)
	{
		LCD_SEND_char('A',*ptr);
     a30:	81 e4       	ldi	r24, 0x41	; 65
     a32:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_SEND_char>
	LCD_SEND_CMD('A',data);
	_delay_ms(1);
}
void LCD_SEND_STRING(unsigned char *ptr)
{
	while((*ptr)!=0)
     a36:	69 91       	ld	r22, Y+
     a38:	66 23       	and	r22, r22
     a3a:	d1 f7       	brne	.-12     	; 0xa30 <LCD_SEND_STRING+0xe>
	{
		LCD_SEND_char('A',*ptr);
		ptr++;
	}
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	08 95       	ret

00000a42 <LED_vInit>:
#include "DIO.h"
void LED_vInit(unsigned char port,unsigned char pin)
{
	DIO_SET_PIN_DIR(port,pin,1);
     a42:	41 e0       	ldi	r20, 0x01	; 1
     a44:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
}
     a48:	08 95       	ret

00000a4a <LED_ON>:
void LED_ON(unsigned char port,unsigned char pin)
{
	DIO_WRITE_PIN(port,pin,1);
     a4a:	41 e0       	ldi	r20, 0x01	; 1
     a4c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
}
     a50:	08 95       	ret

00000a52 <LED_OFF>:
void LED_OFF(unsigned char port,unsigned char pin)
{
	DIO_WRITE_PIN(port,pin,0);
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
}
     a58:	08 95       	ret

00000a5a <LED_TOGGLE>:
void LED_TOGGLE(unsigned char port,unsigned char pin)
{
	DIO_TOGGLE_PIN(port,pin);
     a5a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_TOGGLE_PIN>
}
     a5e:	08 95       	ret

00000a60 <LED_READ_STATUS>:
unsigned char LED_READ_STATUS(unsigned char port,unsigned char pin)
{
	return DIO_u8_READ_PIN(port,pin);
     a60:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_u8_READ_PIN>
     a64:	08 95       	ret

00000a66 <main>:
unsigned char flag=1;
unsigned char temp1=0xff;
unsigned char temp2=0xff;
unsigned char temp=0xff;
int main(void)
{
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	00 d0       	rcall	.+0      	; 0xa6c <main+0x6>
     a6c:	00 d0       	rcall	.+0      	; 0xa6e <main+0x8>
     a6e:	cd b7       	in	r28, 0x3d	; 61
     a70:	de b7       	in	r29, 0x3e	; 62
	LCD_Init();
     a72:	0e 94 90 04 	call	0x920	; 0x920 <LCD_Init>
	KEYPAD_Init();
     a76:	0e 94 a3 03 	call	0x746	; 0x746 <KEYPAD_Init>
	SPI_vMasterInit();
     a7a:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <SPI_vMasterInit>
	LED_vInit('A',1);
     a7e:	81 e4       	ldi	r24, 0x41	; 65
     a80:	61 e0       	ldi	r22, 0x01	; 1
     a82:	0e 94 21 05 	call	0xa42	; 0xa42 <LED_vInit>
	LED_vInit('A',2);
     a86:	81 e4       	ldi	r24, 0x41	; 65
     a88:	62 e0       	ldi	r22, 0x02	; 2
     a8a:	0e 94 21 05 	call	0xa42	; 0xa42 <LED_vInit>
	LED_vInit('A',3);
     a8e:	81 e4       	ldi	r24, 0x41	; 65
     a90:	63 e0       	ldi	r22, 0x03	; 3
     a92:	0e 94 21 05 	call	0xa42	; 0xa42 <LED_vInit>
	tries=MAXTRIES;
     a96:	83 e0       	ldi	r24, 0x03	; 3
     a98:	80 93 3d 02 	sts	0x023D, r24
	/*Welcome message*/
	LCD_SEND_STRING("Welcome To:Smart");
     a9c:	80 e7       	ldi	r24, 0x70	; 112
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
	LCD_Move_Cursor(2,1);
     aa4:	82 e0       	ldi	r24, 0x02	; 2
     aa6:	61 e0       	ldi	r22, 0x01	; 1
     aa8:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
	LCD_SEND_STRING("Home System!!");
     aac:	81 e8       	ldi	r24, 0x81	; 129
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
     ab4:	2f ef       	ldi	r18, 0xFF	; 255
     ab6:	39 e6       	ldi	r19, 0x69	; 105
     ab8:	48 e1       	ldi	r20, 0x18	; 24
     aba:	21 50       	subi	r18, 0x01	; 1
     abc:	30 40       	sbci	r19, 0x00	; 0
     abe:	40 40       	sbci	r20, 0x00	; 0
     ac0:	e1 f7       	brne	.-8      	; 0xaba <main+0x54>
     ac2:	00 c0       	rjmp	.+0      	; 0xac4 <main+0x5e>
     ac4:	00 00       	nop
	_delay_ms(1000);
	LCD_CLR_SCREEN();
     ac6:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
									}
									 else if(option_check=='2')
									{
										SPI_MasterTransmitchar(0);
										LCD_Move_Cursor(1,9);
										LCD_SEND_STRING("OFF");
     aca:	0c e2       	ldi	r16, 0x2C	; 44
     acc:	11 e0       	ldi	r17, 0x01	; 1
									_delay_ms(100);
									if(option_check=='1')
									{
										SPI_MasterTransmitchar(1);
										LCD_Move_Cursor(1,9);
										LCD_SEND_STRING("ON ");
     ace:	0f 2e       	mov	r0, r31
     ad0:	f8 e2       	ldi	r31, 0x28	; 40
     ad2:	ef 2e       	mov	r14, r31
     ad4:	f1 e0       	ldi	r31, 0x01	; 1
     ad6:	ff 2e       	mov	r15, r31
     ad8:	f0 2d       	mov	r31, r0
									}
									 else if(option_check=='2')
									{
										SPI_MasterTransmitchar(0);
										LCD_Move_Cursor(1,9);
										LCD_SEND_STRING("OFF");
     ada:	90 2e       	mov	r9, r16
     adc:	81 2e       	mov	r8, r17
									_delay_ms(100);
									if(option_check=='1')
									{
										SPI_MasterTransmitchar(1);
										LCD_Move_Cursor(1,9);
										LCD_SEND_STRING("ON ");
     ade:	7e 2c       	mov	r7, r14
     ae0:	6f 2c       	mov	r6, r15
									}
									 else if(option_check=='2')
									{
										SPI_MasterTransmitchar(0);
										LCD_Move_Cursor(1,9);
										LCD_SEND_STRING("OFF");
     ae2:	50 2e       	mov	r5, r16
     ae4:	41 2e       	mov	r4, r17
									_delay_ms(100);
									if(option_check=='1')
									{
										SPI_MasterTransmitchar(1);
										LCD_Move_Cursor(1,9);
										LCD_SEND_STRING("ON ");
     ae6:	3e 2c       	mov	r3, r14
     ae8:	2f 2c       	mov	r2, r15
	_delay_ms(1000);
	LCD_CLR_SCREEN();
    while(1)
    { 
		 /*Set admin Pass*/
         if((EEPROM_READ(EEPROM_ADMIN_STATUS)==0xFF)||(EEPROM_READ(EEPROM_GUEST_STATUS)==0xFF))
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	0e 94 9e 03 	call	0x73c	; 0x73c <EEPROM_READ>
     af2:	8f 3f       	cpi	r24, 0xFF	; 255
     af4:	11 f4       	brne	.+4      	; 0xafa <main+0x94>
     af6:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <main+0x12ea>
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	0e 94 9e 03 	call	0x73c	; 0x73c <EEPROM_READ>
     b02:	8f 3f       	cpi	r24, 0xFF	; 255
     b04:	09 f0       	breq	.+2      	; 0xb08 <main+0xa2>
     b06:	bf c0       	rjmp	.+382    	; 0xc86 <main+0x220>
		 {
			 LCD_SEND_STRING("Login For");
     b08:	8f e8       	ldi	r24, 0x8F	; 143
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
			 LCD_Move_Cursor(2,1);
     b10:	82 e0       	ldi	r24, 0x02	; 2
     b12:	61 e0       	ldi	r22, 0x01	; 1
     b14:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
			 LCD_SEND_STRING("First Time!!");
     b18:	89 e9       	ldi	r24, 0x99	; 153
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
     b20:	8f ef       	ldi	r24, 0xFF	; 255
     b22:	99 e6       	ldi	r25, 0x69	; 105
     b24:	a8 e1       	ldi	r26, 0x18	; 24
     b26:	81 50       	subi	r24, 0x01	; 1
     b28:	90 40       	sbci	r25, 0x00	; 0
     b2a:	a0 40       	sbci	r26, 0x00	; 0
     b2c:	e1 f7       	brne	.-8      	; 0xb26 <main+0xc0>
     b2e:	00 c0       	rjmp	.+0      	; 0xb30 <main+0xca>
     b30:	00 00       	nop
			 _delay_ms(1000);
			 LCD_CLR_SCREEN();
     b32:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
			 LCD_SEND_STRING("Set Admin");
     b36:	86 ea       	ldi	r24, 0xA6	; 166
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
			 LCD_Move_Cursor(2,1);
     b3e:	82 e0       	ldi	r24, 0x02	; 2
     b40:	61 e0       	ldi	r22, 0x01	; 1
     b42:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
			 LCD_SEND_STRING("Pass:");
     b46:	80 eb       	ldi	r24, 0xB0	; 176
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
			 LCD_Move_Cursor(2,6);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	66 e0       	ldi	r22, 0x06	; 6
     b52:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
			 for(i=0;i<=3;i++)
     b56:	10 92 3c 02 	sts	0x023C, r1
				 EEPROM_WRITE(EEPROM_LOCATION1+i,admin_login);
				 LCD_SEND_char('A',admin_login);
				 _delay_ms(200);
				 LCD_Move_Cursor(2,6+i);
				 LCD_SEND_char('A','*');
				 admin_login=0xFF;
     b5a:	dd 24       	eor	r13, r13
     b5c:	da 94       	dec	r13
			 LCD_Move_Cursor(2,6);
			 for(i=0;i<=3;i++)
			 {
				 do
				 {
					 admin_login=KEYPAD_CHECK_PRESS();
     b5e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <KEYPAD_CHECK_PRESS>
     b62:	68 2f       	mov	r22, r24
     b64:	80 93 30 02 	sts	0x0230, r24
				 } while (admin_login==0xFF); 
     b68:	8f 3f       	cpi	r24, 0xFF	; 255
     b6a:	c9 f3       	breq	.-14     	; 0xb5e <main+0xf8>
				 EEPROM_WRITE(EEPROM_LOCATION1+i,admin_login);
     b6c:	20 91 3c 02 	lds	r18, 0x023C
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	c9 01       	movw	r24, r18
     b74:	80 50       	subi	r24, 0x00	; 0
     b76:	9f 4f       	sbci	r25, 0xFF	; 255
     b78:	0e 94 96 03 	call	0x72c	; 0x72c <EEPROM_WRITE>
				 LCD_SEND_char('A',admin_login);
     b7c:	81 e4       	ldi	r24, 0x41	; 65
     b7e:	60 91 30 02 	lds	r22, 0x0230
     b82:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_SEND_char>
     b86:	2f ef       	ldi	r18, 0xFF	; 255
     b88:	31 ee       	ldi	r19, 0xE1	; 225
     b8a:	44 e0       	ldi	r20, 0x04	; 4
     b8c:	21 50       	subi	r18, 0x01	; 1
     b8e:	30 40       	sbci	r19, 0x00	; 0
     b90:	40 40       	sbci	r20, 0x00	; 0
     b92:	e1 f7       	brne	.-8      	; 0xb8c <main+0x126>
     b94:	00 c0       	rjmp	.+0      	; 0xb96 <main+0x130>
     b96:	00 00       	nop
				 _delay_ms(200);
				 LCD_Move_Cursor(2,6+i);
     b98:	60 91 3c 02 	lds	r22, 0x023C
     b9c:	6a 5f       	subi	r22, 0xFA	; 250
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
				 LCD_SEND_char('A','*');
     ba4:	81 e4       	ldi	r24, 0x41	; 65
     ba6:	6a e2       	ldi	r22, 0x2A	; 42
     ba8:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_SEND_char>
				 admin_login=0xFF;
     bac:	d0 92 30 02 	sts	0x0230, r13
			 LCD_CLR_SCREEN();
			 LCD_SEND_STRING("Set Admin");
			 LCD_Move_Cursor(2,1);
			 LCD_SEND_STRING("Pass:");
			 LCD_Move_Cursor(2,6);
			 for(i=0;i<=3;i++)
     bb0:	80 91 3c 02 	lds	r24, 0x023C
     bb4:	8f 5f       	subi	r24, 0xFF	; 255
     bb6:	80 93 3c 02 	sts	0x023C, r24
     bba:	84 30       	cpi	r24, 0x04	; 4
     bbc:	80 f2       	brcs	.-96     	; 0xb5e <main+0xf8>
				 _delay_ms(200);
				 LCD_Move_Cursor(2,6+i);
				 LCD_SEND_char('A','*');
				 admin_login=0xFF;
			 }//set admin pass
			 EEPROM_WRITE(EEPROM_ADMIN_STATUS,0);
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	0e 94 96 03 	call	0x72c	; 0x72c <EEPROM_WRITE>
     bc8:	8f ef       	ldi	r24, 0xFF	; 255
     bca:	94 e3       	ldi	r25, 0x34	; 52
     bcc:	ac e0       	ldi	r26, 0x0C	; 12
     bce:	81 50       	subi	r24, 0x01	; 1
     bd0:	90 40       	sbci	r25, 0x00	; 0
     bd2:	a0 40       	sbci	r26, 0x00	; 0
     bd4:	e1 f7       	brne	.-8      	; 0xbce <main+0x168>
     bd6:	00 c0       	rjmp	.+0      	; 0xbd8 <main+0x172>
     bd8:	00 00       	nop
			 _delay_ms(500);
			 LCD_CLR_SCREEN();
     bda:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
			 /*Set Guest Pass*/
			 LCD_SEND_STRING("Set Guest");
     bde:	86 eb       	ldi	r24, 0xB6	; 182
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
			 LCD_Move_Cursor(2,1);
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	61 e0       	ldi	r22, 0x01	; 1
     bea:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
			 LCD_SEND_STRING("Pass:");
     bee:	80 eb       	ldi	r24, 0xB0	; 176
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
			 LCD_Move_Cursor(2,6);
     bf6:	82 e0       	ldi	r24, 0x02	; 2
     bf8:	66 e0       	ldi	r22, 0x06	; 6
     bfa:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
			 for(i=0;i<=3;i++)
     bfe:	10 92 3c 02 	sts	0x023C, r1
				 EEPROM_WRITE(EEPROM_LOCATION5+i,admin_login);
				 LCD_SEND_char('A',admin_login);
				 _delay_ms(200);
				 LCD_Move_Cursor(2,6+i);
				 LCD_SEND_char('A','*');
				 admin_login=0xFF;
     c02:	dd 24       	eor	r13, r13
     c04:	da 94       	dec	r13
			 LCD_Move_Cursor(2,6);
			 for(i=0;i<=3;i++)
			 {
				 do
				 {
					 admin_login=KEYPAD_CHECK_PRESS();
     c06:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <KEYPAD_CHECK_PRESS>
     c0a:	68 2f       	mov	r22, r24
     c0c:	80 93 30 02 	sts	0x0230, r24
				 } while (admin_login==0xFF);
     c10:	8f 3f       	cpi	r24, 0xFF	; 255
     c12:	c9 f3       	breq	.-14     	; 0xc06 <main+0x1a0>
				 EEPROM_WRITE(EEPROM_LOCATION5+i,admin_login);
     c14:	20 91 3c 02 	lds	r18, 0x023C
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	c9 01       	movw	r24, r18
     c1c:	8c 5f       	subi	r24, 0xFC	; 252
     c1e:	9e 4f       	sbci	r25, 0xFE	; 254
     c20:	0e 94 96 03 	call	0x72c	; 0x72c <EEPROM_WRITE>
				 LCD_SEND_char('A',admin_login);
     c24:	81 e4       	ldi	r24, 0x41	; 65
     c26:	60 91 30 02 	lds	r22, 0x0230
     c2a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_SEND_char>
     c2e:	2f ef       	ldi	r18, 0xFF	; 255
     c30:	31 ee       	ldi	r19, 0xE1	; 225
     c32:	44 e0       	ldi	r20, 0x04	; 4
     c34:	21 50       	subi	r18, 0x01	; 1
     c36:	30 40       	sbci	r19, 0x00	; 0
     c38:	40 40       	sbci	r20, 0x00	; 0
     c3a:	e1 f7       	brne	.-8      	; 0xc34 <main+0x1ce>
     c3c:	00 c0       	rjmp	.+0      	; 0xc3e <main+0x1d8>
     c3e:	00 00       	nop
				 _delay_ms(200);
				 LCD_Move_Cursor(2,6+i);
     c40:	60 91 3c 02 	lds	r22, 0x023C
     c44:	6a 5f       	subi	r22, 0xFA	; 250
     c46:	82 e0       	ldi	r24, 0x02	; 2
     c48:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
				 LCD_SEND_char('A','*');
     c4c:	81 e4       	ldi	r24, 0x41	; 65
     c4e:	6a e2       	ldi	r22, 0x2A	; 42
     c50:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_SEND_char>
				 admin_login=0xFF;
     c54:	d0 92 30 02 	sts	0x0230, r13
			 /*Set Guest Pass*/
			 LCD_SEND_STRING("Set Guest");
			 LCD_Move_Cursor(2,1);
			 LCD_SEND_STRING("Pass:");
			 LCD_Move_Cursor(2,6);
			 for(i=0;i<=3;i++)
     c58:	80 91 3c 02 	lds	r24, 0x023C
     c5c:	8f 5f       	subi	r24, 0xFF	; 255
     c5e:	80 93 3c 02 	sts	0x023C, r24
     c62:	84 30       	cpi	r24, 0x04	; 4
     c64:	80 f2       	brcs	.-96     	; 0xc06 <main+0x1a0>
				 _delay_ms(200);
				 LCD_Move_Cursor(2,6+i);
				 LCD_SEND_char('A','*');
				 admin_login=0xFF;
			 }//set guest pass
			 EEPROM_WRITE(EEPROM_GUEST_STATUS,0);
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	0e 94 96 03 	call	0x72c	; 0x72c <EEPROM_WRITE>
     c70:	8f ef       	ldi	r24, 0xFF	; 255
     c72:	94 e3       	ldi	r25, 0x34	; 52
     c74:	ac e0       	ldi	r26, 0x0C	; 12
     c76:	81 50       	subi	r24, 0x01	; 1
     c78:	90 40       	sbci	r25, 0x00	; 0
     c7a:	a0 40       	sbci	r26, 0x00	; 0
     c7c:	e1 f7       	brne	.-8      	; 0xc76 <main+0x210>
     c7e:	00 c0       	rjmp	.+0      	; 0xc80 <main+0x21a>
     c80:	00 00       	nop
			 _delay_ms(500);
			 LCD_CLR_SCREEN();
     c82:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
		 }//end of if condition to set admin pass
		 /*******************************************************************Check pass**************************************************************/
	if((EEPROM_READ(EEPROM_ADMIN_STATUS)==0x00)&&(EEPROM_READ(EEPROM_GUEST_STATUS)==0x00)&&(flag==1))
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 9e 03 	call	0x73c	; 0x73c <EEPROM_READ>
     c8e:	88 23       	and	r24, r24
     c90:	09 f0       	breq	.+2      	; 0xc94 <main+0x22e>
     c92:	2b cf       	rjmp	.-426    	; 0xaea <main+0x84>
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 9e 03 	call	0x73c	; 0x73c <EEPROM_READ>
     c9c:	88 23       	and	r24, r24
     c9e:	09 f0       	breq	.+2      	; 0xca2 <main+0x23c>
     ca0:	24 cf       	rjmp	.-440    	; 0xaea <main+0x84>
     ca2:	80 91 29 02 	lds	r24, 0x0229
     ca6:	81 30       	cpi	r24, 0x01	; 1
     ca8:	09 f0       	breq	.+2      	; 0xcac <main+0x246>
     caa:	1f cf       	rjmp	.-450    	; 0xaea <main+0x84>
	{
		LCD_SEND_STRING("Admin Mode:0");
     cac:	80 ec       	ldi	r24, 0xC0	; 192
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
		LCD_Move_Cursor(2,1);
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	61 e0       	ldi	r22, 0x01	; 1
     cb8:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
		LCD_SEND_STRING("Guest Mode:1");
     cbc:	8d ec       	ldi	r24, 0xCD	; 205
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
		do 
		{
			check_mode=KEYPAD_CHECK_PRESS();
     cc4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <KEYPAD_CHECK_PRESS>
     cc8:	80 93 2e 02 	sts	0x022E, r24
     ccc:	2f ef       	ldi	r18, 0xFF	; 255
     cce:	30 e7       	ldi	r19, 0x70	; 112
     cd0:	42 e0       	ldi	r20, 0x02	; 2
     cd2:	21 50       	subi	r18, 0x01	; 1
     cd4:	30 40       	sbci	r19, 0x00	; 0
     cd6:	40 40       	sbci	r20, 0x00	; 0
     cd8:	e1 f7       	brne	.-8      	; 0xcd2 <main+0x26c>
     cda:	00 c0       	rjmp	.+0      	; 0xcdc <main+0x276>
     cdc:	00 00       	nop
			_delay_ms(100);
		} while (check_mode==0xff);
     cde:	8f 3f       	cpi	r24, 0xFF	; 255
     ce0:	89 f3       	breq	.-30     	; 0xcc4 <main+0x25e>
		SPI_MasterTransmitchar(check_mode);
     ce2:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
		if(check_mode=='0')
     ce6:	80 91 2e 02 	lds	r24, 0x022E
     cea:	80 33       	cpi	r24, 0x30	; 48
     cec:	09 f0       	breq	.+2      	; 0xcf0 <main+0x28a>
     cee:	f4 c4       	rjmp	.+2536   	; 0x16d8 <main+0xc72>
     cf0:	e3 c4       	rjmp	.+2502   	; 0x16b8 <main+0xc52>
		{
			while(tries>0)
			{
				W:
						LCD_CLR_SCREEN();
     cf2:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
						LCD_SEND_STRING("Check Admin");
     cf6:	c5 01       	movw	r24, r10
     cf8:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
						LCD_Move_Cursor(2,1);
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
						LCD_SEND_STRING("Password:");
     d04:	86 ee       	ldi	r24, 0xE6	; 230
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
						LCD_Move_Cursor(2,10);
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	6a e0       	ldi	r22, 0x0A	; 10
     d10:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
						for(i=0;i<=3;i++)
     d14:	10 92 3c 02 	sts	0x023C, r1
						{
							do
							{
								admin_pass[i]=KEYPAD_CHECK_PRESS();
     d18:	c0 90 3c 02 	lds	r12, 0x023C
     d1c:	dd 24       	eor	r13, r13
     d1e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <KEYPAD_CHECK_PRESS>
     d22:	f6 01       	movw	r30, r12
     d24:	eb 5c       	subi	r30, 0xCB	; 203
     d26:	fd 4f       	sbci	r31, 0xFD	; 253
     d28:	80 83       	st	Z, r24
     d2a:	8f ef       	ldi	r24, 0xFF	; 255
     d2c:	90 e7       	ldi	r25, 0x70	; 112
     d2e:	a2 e0       	ldi	r26, 0x02	; 2
     d30:	81 50       	subi	r24, 0x01	; 1
     d32:	90 40       	sbci	r25, 0x00	; 0
     d34:	a0 40       	sbci	r26, 0x00	; 0
     d36:	e1 f7       	brne	.-8      	; 0xd30 <main+0x2ca>
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <main+0x2d4>
     d3a:	00 00       	nop
								_delay_ms(100);
							} while (admin_pass[i]==0xff);
     d3c:	e0 91 3c 02 	lds	r30, 0x023C
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	eb 5c       	subi	r30, 0xCB	; 203
     d44:	fd 4f       	sbci	r31, 0xFD	; 253
     d46:	60 81       	ld	r22, Z
     d48:	6f 3f       	cpi	r22, 0xFF	; 255
     d4a:	31 f3       	breq	.-52     	; 0xd18 <main+0x2b2>
							LCD_SEND_char('A',admin_pass[i]);
     d4c:	81 e4       	ldi	r24, 0x41	; 65
     d4e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_SEND_char>
							LCD_Move_Cursor(2,10+i);
     d52:	60 91 3c 02 	lds	r22, 0x023C
     d56:	66 5f       	subi	r22, 0xF6	; 246
     d58:	82 e0       	ldi	r24, 0x02	; 2
     d5a:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
     d5e:	2f e7       	ldi	r18, 0x7F	; 127
     d60:	39 ea       	ldi	r19, 0xA9	; 169
     d62:	43 e0       	ldi	r20, 0x03	; 3
     d64:	21 50       	subi	r18, 0x01	; 1
     d66:	30 40       	sbci	r19, 0x00	; 0
     d68:	40 40       	sbci	r20, 0x00	; 0
     d6a:	e1 f7       	brne	.-8      	; 0xd64 <main+0x2fe>
     d6c:	00 c0       	rjmp	.+0      	; 0xd6e <main+0x308>
     d6e:	00 00       	nop
							_delay_ms(150);
							LCD_SEND_char('A','*');
     d70:	81 e4       	ldi	r24, 0x41	; 65
     d72:	6a e2       	ldi	r22, 0x2A	; 42
     d74:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_SEND_char>
     d78:	8f ef       	ldi	r24, 0xFF	; 255
     d7a:	90 e7       	ldi	r25, 0x70	; 112
     d7c:	a2 e0       	ldi	r26, 0x02	; 2
     d7e:	81 50       	subi	r24, 0x01	; 1
     d80:	90 40       	sbci	r25, 0x00	; 0
     d82:	a0 40       	sbci	r26, 0x00	; 0
     d84:	e1 f7       	brne	.-8      	; 0xd7e <main+0x318>
     d86:	00 c0       	rjmp	.+0      	; 0xd88 <main+0x322>
     d88:	00 00       	nop
						LCD_CLR_SCREEN();
						LCD_SEND_STRING("Check Admin");
						LCD_Move_Cursor(2,1);
						LCD_SEND_STRING("Password:");
						LCD_Move_Cursor(2,10);
						for(i=0;i<=3;i++)
     d8a:	80 91 3c 02 	lds	r24, 0x023C
     d8e:	8f 5f       	subi	r24, 0xFF	; 255
     d90:	80 93 3c 02 	sts	0x023C, r24
     d94:	84 30       	cpi	r24, 0x04	; 4
     d96:	08 f4       	brcc	.+2      	; 0xd9a <main+0x334>
     d98:	bf cf       	rjmp	.-130    	; 0xd18 <main+0x2b2>
							LCD_Move_Cursor(2,10+i);
							_delay_ms(150);
							LCD_SEND_char('A','*');
							_delay_ms(100);
						}
						if(EEPROM_READ(EEPROM_LOCATION1)==admin_pass[0]&&EEPROM_READ(EEPROM_LOCATION2)==admin_pass[1]&&EEPROM_READ(EEPROM_LOCATION3)==admin_pass[2]&&EEPROM_READ(EEPROM_LOCATION4)==admin_pass[3])
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	91 e0       	ldi	r25, 0x01	; 1
     d9e:	0e 94 9e 03 	call	0x73c	; 0x73c <EEPROM_READ>
     da2:	90 91 35 02 	lds	r25, 0x0235
     da6:	89 17       	cp	r24, r25
     da8:	09 f0       	breq	.+2      	; 0xdac <main+0x346>
     daa:	f6 c3       	rjmp	.+2028   	; 0x1598 <main+0xb32>
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	0e 94 9e 03 	call	0x73c	; 0x73c <EEPROM_READ>
     db4:	90 91 36 02 	lds	r25, 0x0236
     db8:	89 17       	cp	r24, r25
     dba:	09 f0       	breq	.+2      	; 0xdbe <main+0x358>
     dbc:	ed c3       	rjmp	.+2010   	; 0x1598 <main+0xb32>
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	0e 94 9e 03 	call	0x73c	; 0x73c <EEPROM_READ>
     dc6:	90 91 37 02 	lds	r25, 0x0237
     dca:	89 17       	cp	r24, r25
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <main+0x36a>
     dce:	e4 c3       	rjmp	.+1992   	; 0x1598 <main+0xb32>
     dd0:	83 e0       	ldi	r24, 0x03	; 3
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	0e 94 9e 03 	call	0x73c	; 0x73c <EEPROM_READ>
     dd8:	90 91 38 02 	lds	r25, 0x0238
     ddc:	89 17       	cp	r24, r25
     dde:	09 f0       	breq	.+2      	; 0xde2 <main+0x37c>
     de0:	db c3       	rjmp	.+1974   	; 0x1598 <main+0xb32>
						{
							flag=0;
     de2:	10 92 29 02 	sts	0x0229, r1
							LCD_CLR_SCREEN();
     de6:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
							LCD_SEND_STRING("Right Password!");
     dea:	80 ef       	ldi	r24, 0xF0	; 240
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
							TIMER0_CTC_MODE_Init();
     df2:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <TIMER0_CTC_MODE_Init>
							LED_ON('A',1);
     df6:	81 e4       	ldi	r24, 0x41	; 65
     df8:	61 e0       	ldi	r22, 0x01	; 1
     dfa:	0e 94 25 05 	call	0xa4a	; 0xa4a <LED_ON>
     dfe:	2f ef       	ldi	r18, 0xFF	; 255
     e00:	39 e6       	ldi	r19, 0x69	; 105
     e02:	48 e1       	ldi	r20, 0x18	; 24
     e04:	21 50       	subi	r18, 0x01	; 1
     e06:	30 40       	sbci	r19, 0x00	; 0
     e08:	40 40       	sbci	r20, 0x00	; 0
     e0a:	e1 f7       	brne	.-8      	; 0xe04 <main+0x39e>
     e0c:	00 c0       	rjmp	.+0      	; 0xe0e <main+0x3a8>
     e0e:	00 00       	nop
									SPI_SlaveReceivechar(2);
									LCD_CLR_SCREEN();
									K:
									LCD_SEND_STRING("Air Cond S:");
									LCD_Move_Cursor(2,1);
									LCD_SEND_STRING("1-ON 2-OFF 0-RET");
     e10:	40 e3       	ldi	r20, 0x30	; 48
     e12:	51 e0       	ldi	r21, 0x01	; 1
     e14:	49 83       	std	Y+1, r20	; 0x01
     e16:	5a 83       	std	Y+2, r21	; 0x02
							LCD_SEND_STRING("Right Password!");
							TIMER0_CTC_MODE_Init();
							LED_ON('A',1);
							_delay_ms(1000);
							B:
							LCD_CLR_SCREEN();
     e18:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
							LCD_SEND_STRING("1-ROOM1 2-ROOM2");
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
							LCD_Move_Cursor(2,1);
     e24:	82 e0       	ldi	r24, 0x02	; 2
     e26:	61 e0       	ldi	r22, 0x01	; 1
     e28:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
							LCD_SEND_STRING("3-ROOM3 4-MORE");
     e2c:	80 e1       	ldi	r24, 0x10	; 16
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
							room_check=0xff;
     e34:	8f ef       	ldi	r24, 0xFF	; 255
     e36:	80 93 2d 02 	sts	0x022D, r24
							do
							{
								room_check=KEYPAD_CHECK_PRESS();
     e3a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <KEYPAD_CHECK_PRESS>
     e3e:	80 93 2d 02 	sts	0x022D, r24
							} while (room_check==0xff);
     e42:	8f 3f       	cpi	r24, 0xFF	; 255
     e44:	d1 f3       	breq	.-12     	; 0xe3a <main+0x3d4>
							switch(room_check)
     e46:	82 33       	cpi	r24, 0x32	; 50
     e48:	09 f4       	brne	.+2      	; 0xe4c <main+0x3e6>
     e4a:	86 c0       	rjmp	.+268    	; 0xf58 <main+0x4f2>
     e4c:	83 33       	cpi	r24, 0x33	; 51
     e4e:	20 f4       	brcc	.+8      	; 0xe58 <main+0x3f2>
     e50:	81 33       	cpi	r24, 0x31	; 49
     e52:	09 f0       	breq	.+2      	; 0xe56 <main+0x3f0>
     e54:	3b c4       	rjmp	.+2166   	; 0x16cc <main+0xc66>
     e56:	07 c0       	rjmp	.+14     	; 0xe66 <main+0x400>
     e58:	83 33       	cpi	r24, 0x33	; 51
     e5a:	09 f4       	brne	.+2      	; 0xe5e <main+0x3f8>
     e5c:	f6 c0       	rjmp	.+492    	; 0x104a <main+0x5e4>
     e5e:	84 33       	cpi	r24, 0x34	; 52
     e60:	09 f0       	breq	.+2      	; 0xe64 <main+0x3fe>
     e62:	34 c4       	rjmp	.+2152   	; 0x16cc <main+0xc66>
     e64:	6b c1       	rjmp	.+726    	; 0x113c <main+0x6d6>
							{
								case '1':
								SPI_MasterTransmitchar(1);
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
								LCD_CLR_SCREEN();
     e6c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
								LCD_SEND_STRING("ROOM1 S:");
     e70:	8f e1       	ldi	r24, 0x1F	; 31
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
								while(option_check!='0'||flag==0)
     e78:	64 c0       	rjmp	.+200    	; 0xf42 <main+0x4dc>
								{
									status_check=SPI_MasterTransmitchar(0xff);
     e7a:	8f ef       	ldi	r24, 0xFF	; 255
     e7c:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
     e80:	80 93 2c 02 	sts	0x022C, r24
									if(status_check==1)
     e84:	81 30       	cpi	r24, 0x01	; 1
     e86:	41 f4       	brne	.+16     	; 0xe98 <main+0x432>
									{
										LCD_Move_Cursor(1,9);
     e88:	69 e0       	ldi	r22, 0x09	; 9
     e8a:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
										LCD_SEND_STRING("ON ");
     e8e:	87 2d       	mov	r24, r7
     e90:	96 2d       	mov	r25, r6
     e92:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
     e96:	0a c0       	rjmp	.+20     	; 0xeac <main+0x446>
									}
									else if(status_check==0)
     e98:	88 23       	and	r24, r24
     e9a:	41 f4       	brne	.+16     	; 0xeac <main+0x446>
									{
										LCD_Move_Cursor(1,9);
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	69 e0       	ldi	r22, 0x09	; 9
     ea0:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
										LCD_SEND_STRING("OFF");
     ea4:	89 2d       	mov	r24, r9
     ea6:	98 2d       	mov	r25, r8
     ea8:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
									}
									LCD_Move_Cursor(2,1);
     eac:	82 e0       	ldi	r24, 0x02	; 2
     eae:	61 e0       	ldi	r22, 0x01	; 1
     eb0:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
									LCD_SEND_STRING("1-ON 2-OFF 0-RET");
     eb4:	80 e3       	ldi	r24, 0x30	; 48
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
									do
									{
										option_check=KEYPAD_CHECK_PRESS();
     ebc:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <KEYPAD_CHECK_PRESS>
     ec0:	80 93 2b 02 	sts	0x022B, r24
									} while (option_check==0xff);
     ec4:	8f 3f       	cpi	r24, 0xFF	; 255
     ec6:	d1 f3       	breq	.-12     	; 0xebc <main+0x456>
     ec8:	2f ef       	ldi	r18, 0xFF	; 255
     eca:	30 e7       	ldi	r19, 0x70	; 112
     ecc:	42 e0       	ldi	r20, 0x02	; 2
     ece:	21 50       	subi	r18, 0x01	; 1
     ed0:	30 40       	sbci	r19, 0x00	; 0
     ed2:	40 40       	sbci	r20, 0x00	; 0
     ed4:	e1 f7       	brne	.-8      	; 0xece <main+0x468>
     ed6:	00 c0       	rjmp	.+0      	; 0xed8 <main+0x472>
     ed8:	00 00       	nop
									_delay_ms(100);
									if(option_check=='1')
     eda:	81 33       	cpi	r24, 0x31	; 49
     edc:	61 f4       	brne	.+24     	; 0xef6 <main+0x490>
									{
										SPI_MasterTransmitchar(1);
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
										LCD_Move_Cursor(1,9);
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	69 e0       	ldi	r22, 0x09	; 9
     ee8:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
										LCD_SEND_STRING("ON ");
     eec:	87 2d       	mov	r24, r7
     eee:	96 2d       	mov	r25, r6
     ef0:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
     ef4:	26 c0       	rjmp	.+76     	; 0xf42 <main+0x4dc>
									}
									else if(option_check=='2')
     ef6:	82 33       	cpi	r24, 0x32	; 50
     ef8:	61 f4       	brne	.+24     	; 0xf12 <main+0x4ac>
									{
										SPI_MasterTransmitchar(0);
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
										LCD_Move_Cursor(1,9);
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	69 e0       	ldi	r22, 0x09	; 9
     f04:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
										LCD_SEND_STRING("OFF");
     f08:	89 2d       	mov	r24, r9
     f0a:	98 2d       	mov	r25, r8
     f0c:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
     f10:	18 c0       	rjmp	.+48     	; 0xf42 <main+0x4dc>
									}
									else if(option_check=='0')
     f12:	80 33       	cpi	r24, 0x30	; 48
     f14:	31 f4       	brne	.+12     	; 0xf22 <main+0x4bc>
									{
										SPI_MasterTransmitchar(3);
     f16:	83 e0       	ldi	r24, 0x03	; 3
     f18:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
										LCD_CLR_SCREEN();
     f1c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
										goto B;
     f20:	7b cf       	rjmp	.-266    	; 0xe18 <main+0x3b2>
									}
									else
									{
										LCD_CLR_SCREEN();
     f22:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
										LCD_SEND_STRING("Wrong Option");
     f26:	81 e4       	ldi	r24, 0x41	; 65
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	99 e6       	ldi	r25, 0x69	; 105
     f32:	a8 e1       	ldi	r26, 0x18	; 24
     f34:	81 50       	subi	r24, 0x01	; 1
     f36:	90 40       	sbci	r25, 0x00	; 0
     f38:	a0 40       	sbci	r26, 0x00	; 0
     f3a:	e1 f7       	brne	.-8      	; 0xf34 <main+0x4ce>
     f3c:	00 c0       	rjmp	.+0      	; 0xf3e <main+0x4d8>
     f3e:	00 00       	nop
     f40:	6b cf       	rjmp	.-298    	; 0xe18 <main+0x3b2>
							{
								case '1':
								SPI_MasterTransmitchar(1);
								LCD_CLR_SCREEN();
								LCD_SEND_STRING("ROOM1 S:");
								while(option_check!='0'||flag==0)
     f42:	80 91 2b 02 	lds	r24, 0x022B
     f46:	80 33       	cpi	r24, 0x30	; 48
     f48:	09 f0       	breq	.+2      	; 0xf4c <main+0x4e6>
     f4a:	97 cf       	rjmp	.-210    	; 0xe7a <main+0x414>
     f4c:	80 91 29 02 	lds	r24, 0x0229
     f50:	88 23       	and	r24, r24
     f52:	09 f4       	brne	.+2      	; 0xf56 <main+0x4f0>
     f54:	92 cf       	rjmp	.-220    	; 0xe7a <main+0x414>
     f56:	ba c3       	rjmp	.+1908   	; 0x16cc <main+0xc66>
										goto B;
									}
								}
								break;
								case '2':
								SPI_MasterTransmitchar(2);
     f58:	82 e0       	ldi	r24, 0x02	; 2
     f5a:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
								LCD_CLR_SCREEN();
     f5e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
								LCD_SEND_STRING("ROOM2 S:");
     f62:	8e e4       	ldi	r24, 0x4E	; 78
     f64:	91 e0       	ldi	r25, 0x01	; 1
     f66:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
								while(option_check!='0'||flag==0)
     f6a:	64 c0       	rjmp	.+200    	; 0x1034 <main+0x5ce>
								{
									status_check=SPI_MasterTransmitchar(0xff);
     f6c:	8f ef       	ldi	r24, 0xFF	; 255
     f6e:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
     f72:	80 93 2c 02 	sts	0x022C, r24
									if(status_check==1)
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	41 f4       	brne	.+16     	; 0xf8a <main+0x524>
									{
										LCD_Move_Cursor(1,9);
     f7a:	69 e0       	ldi	r22, 0x09	; 9
     f7c:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
										LCD_SEND_STRING("ON ");
     f80:	87 2d       	mov	r24, r7
     f82:	96 2d       	mov	r25, r6
     f84:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
     f88:	0a c0       	rjmp	.+20     	; 0xf9e <main+0x538>
									}
									else if(status_check==0)
     f8a:	88 23       	and	r24, r24
     f8c:	41 f4       	brne	.+16     	; 0xf9e <main+0x538>
									{
										LCD_Move_Cursor(1,9);
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	69 e0       	ldi	r22, 0x09	; 9
     f92:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
										LCD_SEND_STRING("OFF");
     f96:	89 2d       	mov	r24, r9
     f98:	98 2d       	mov	r25, r8
     f9a:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
									}
									LCD_Move_Cursor(2,1);
     f9e:	82 e0       	ldi	r24, 0x02	; 2
     fa0:	61 e0       	ldi	r22, 0x01	; 1
     fa2:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
									LCD_SEND_STRING("1-ON 2-OFF 0-RET");
     fa6:	80 e3       	ldi	r24, 0x30	; 48
     fa8:	91 e0       	ldi	r25, 0x01	; 1
     faa:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
									do
									{
										option_check=KEYPAD_CHECK_PRESS();
     fae:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <KEYPAD_CHECK_PRESS>
     fb2:	80 93 2b 02 	sts	0x022B, r24
									} while (option_check==0xff);
     fb6:	8f 3f       	cpi	r24, 0xFF	; 255
     fb8:	d1 f3       	breq	.-12     	; 0xfae <main+0x548>
     fba:	2f ef       	ldi	r18, 0xFF	; 255
     fbc:	30 e7       	ldi	r19, 0x70	; 112
     fbe:	42 e0       	ldi	r20, 0x02	; 2
     fc0:	21 50       	subi	r18, 0x01	; 1
     fc2:	30 40       	sbci	r19, 0x00	; 0
     fc4:	40 40       	sbci	r20, 0x00	; 0
     fc6:	e1 f7       	brne	.-8      	; 0xfc0 <main+0x55a>
     fc8:	00 c0       	rjmp	.+0      	; 0xfca <main+0x564>
     fca:	00 00       	nop
									_delay_ms(100);
									if(option_check=='1')
     fcc:	81 33       	cpi	r24, 0x31	; 49
     fce:	61 f4       	brne	.+24     	; 0xfe8 <main+0x582>
									{
										SPI_MasterTransmitchar(1);
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
										LCD_Move_Cursor(1,9);
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	69 e0       	ldi	r22, 0x09	; 9
     fda:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
										LCD_SEND_STRING("ON ");
     fde:	87 2d       	mov	r24, r7
     fe0:	96 2d       	mov	r25, r6
     fe2:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
     fe6:	26 c0       	rjmp	.+76     	; 0x1034 <main+0x5ce>
									}
									else if(option_check=='2')
     fe8:	82 33       	cpi	r24, 0x32	; 50
     fea:	61 f4       	brne	.+24     	; 0x1004 <main+0x59e>
									{
										SPI_MasterTransmitchar(0);
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
										LCD_Move_Cursor(1,9);
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	69 e0       	ldi	r22, 0x09	; 9
     ff6:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
										LCD_SEND_STRING("OFF");
     ffa:	89 2d       	mov	r24, r9
     ffc:	98 2d       	mov	r25, r8
     ffe:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    1002:	18 c0       	rjmp	.+48     	; 0x1034 <main+0x5ce>
									}
									else if(option_check=='0')
    1004:	80 33       	cpi	r24, 0x30	; 48
    1006:	31 f4       	brne	.+12     	; 0x1014 <main+0x5ae>
									{
										SPI_MasterTransmitchar(3);
    1008:	83 e0       	ldi	r24, 0x03	; 3
    100a:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
										LCD_CLR_SCREEN();
    100e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
										goto B;
    1012:	02 cf       	rjmp	.-508    	; 0xe18 <main+0x3b2>
									}
									else
									{
										LCD_CLR_SCREEN();
    1014:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
										LCD_SEND_STRING("Wrong Option");
    1018:	81 e4       	ldi	r24, 0x41	; 65
    101a:	91 e0       	ldi	r25, 0x01	; 1
    101c:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    1020:	8f ef       	ldi	r24, 0xFF	; 255
    1022:	99 e6       	ldi	r25, 0x69	; 105
    1024:	a8 e1       	ldi	r26, 0x18	; 24
    1026:	81 50       	subi	r24, 0x01	; 1
    1028:	90 40       	sbci	r25, 0x00	; 0
    102a:	a0 40       	sbci	r26, 0x00	; 0
    102c:	e1 f7       	brne	.-8      	; 0x1026 <main+0x5c0>
    102e:	00 c0       	rjmp	.+0      	; 0x1030 <main+0x5ca>
    1030:	00 00       	nop
    1032:	f2 ce       	rjmp	.-540    	; 0xe18 <main+0x3b2>
								break;
								case '2':
								SPI_MasterTransmitchar(2);
								LCD_CLR_SCREEN();
								LCD_SEND_STRING("ROOM2 S:");
								while(option_check!='0'||flag==0)
    1034:	80 91 2b 02 	lds	r24, 0x022B
    1038:	80 33       	cpi	r24, 0x30	; 48
    103a:	09 f0       	breq	.+2      	; 0x103e <main+0x5d8>
    103c:	97 cf       	rjmp	.-210    	; 0xf6c <main+0x506>
    103e:	80 91 29 02 	lds	r24, 0x0229
    1042:	88 23       	and	r24, r24
    1044:	09 f4       	brne	.+2      	; 0x1048 <main+0x5e2>
    1046:	92 cf       	rjmp	.-220    	; 0xf6c <main+0x506>
    1048:	41 c3       	rjmp	.+1666   	; 0x16cc <main+0xc66>
										goto B;
									}
								}
								break;
								case '3':
								SPI_MasterTransmitchar(3);
    104a:	83 e0       	ldi	r24, 0x03	; 3
    104c:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
								LCD_CLR_SCREEN();
    1050:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
								LCD_SEND_STRING("ROOM3 S:");
    1054:	87 e5       	ldi	r24, 0x57	; 87
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
								while(option_check!='0'||flag==0)
    105c:	64 c0       	rjmp	.+200    	; 0x1126 <main+0x6c0>
								{
									status_check=SPI_MasterTransmitchar(0xff);
    105e:	8f ef       	ldi	r24, 0xFF	; 255
    1060:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
    1064:	80 93 2c 02 	sts	0x022C, r24
									if(status_check==1)
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	41 f4       	brne	.+16     	; 0x107c <main+0x616>
									{
										LCD_Move_Cursor(1,9);
    106c:	69 e0       	ldi	r22, 0x09	; 9
    106e:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
										LCD_SEND_STRING("ON ");
    1072:	87 2d       	mov	r24, r7
    1074:	96 2d       	mov	r25, r6
    1076:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    107a:	0a c0       	rjmp	.+20     	; 0x1090 <main+0x62a>
									}
									else if(status_check==0)
    107c:	88 23       	and	r24, r24
    107e:	41 f4       	brne	.+16     	; 0x1090 <main+0x62a>
									{
										LCD_Move_Cursor(1,9);
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	69 e0       	ldi	r22, 0x09	; 9
    1084:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
										LCD_SEND_STRING("OFF");
    1088:	89 2d       	mov	r24, r9
    108a:	98 2d       	mov	r25, r8
    108c:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
									}
									LCD_Move_Cursor(2,1);
    1090:	82 e0       	ldi	r24, 0x02	; 2
    1092:	61 e0       	ldi	r22, 0x01	; 1
    1094:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
									LCD_SEND_STRING("1-ON 2-OFF 0-RET");
    1098:	80 e3       	ldi	r24, 0x30	; 48
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
									do
									{
										option_check=KEYPAD_CHECK_PRESS();
    10a0:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <KEYPAD_CHECK_PRESS>
    10a4:	80 93 2b 02 	sts	0x022B, r24
									} while (option_check==0xff);
    10a8:	8f 3f       	cpi	r24, 0xFF	; 255
    10aa:	d1 f3       	breq	.-12     	; 0x10a0 <main+0x63a>
    10ac:	2f ef       	ldi	r18, 0xFF	; 255
    10ae:	30 e7       	ldi	r19, 0x70	; 112
    10b0:	42 e0       	ldi	r20, 0x02	; 2
    10b2:	21 50       	subi	r18, 0x01	; 1
    10b4:	30 40       	sbci	r19, 0x00	; 0
    10b6:	40 40       	sbci	r20, 0x00	; 0
    10b8:	e1 f7       	brne	.-8      	; 0x10b2 <main+0x64c>
    10ba:	00 c0       	rjmp	.+0      	; 0x10bc <main+0x656>
    10bc:	00 00       	nop
									_delay_ms(100);
									if(option_check=='1')
    10be:	81 33       	cpi	r24, 0x31	; 49
    10c0:	61 f4       	brne	.+24     	; 0x10da <main+0x674>
									{
										SPI_MasterTransmitchar(1);
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
										LCD_Move_Cursor(1,9);
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	69 e0       	ldi	r22, 0x09	; 9
    10cc:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
										LCD_SEND_STRING("ON ");
    10d0:	87 2d       	mov	r24, r7
    10d2:	96 2d       	mov	r25, r6
    10d4:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    10d8:	26 c0       	rjmp	.+76     	; 0x1126 <main+0x6c0>
									}
									else if(option_check=='2')
    10da:	82 33       	cpi	r24, 0x32	; 50
    10dc:	61 f4       	brne	.+24     	; 0x10f6 <main+0x690>
									{
										SPI_MasterTransmitchar(0);
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
										LCD_Move_Cursor(1,9);
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	69 e0       	ldi	r22, 0x09	; 9
    10e8:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
										LCD_SEND_STRING("OFF");
    10ec:	89 2d       	mov	r24, r9
    10ee:	98 2d       	mov	r25, r8
    10f0:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    10f4:	18 c0       	rjmp	.+48     	; 0x1126 <main+0x6c0>
									}
									else if(option_check=='0')
    10f6:	80 33       	cpi	r24, 0x30	; 48
    10f8:	31 f4       	brne	.+12     	; 0x1106 <main+0x6a0>
									{
										SPI_MasterTransmitchar(3);
    10fa:	83 e0       	ldi	r24, 0x03	; 3
    10fc:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
										LCD_CLR_SCREEN();
    1100:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
										goto B;
    1104:	89 ce       	rjmp	.-750    	; 0xe18 <main+0x3b2>
									}
									else
									{
										LCD_CLR_SCREEN();
    1106:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
										LCD_SEND_STRING("Wrong Option");
    110a:	81 e4       	ldi	r24, 0x41	; 65
    110c:	91 e0       	ldi	r25, 0x01	; 1
    110e:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    1112:	8f ef       	ldi	r24, 0xFF	; 255
    1114:	99 e6       	ldi	r25, 0x69	; 105
    1116:	a8 e1       	ldi	r26, 0x18	; 24
    1118:	81 50       	subi	r24, 0x01	; 1
    111a:	90 40       	sbci	r25, 0x00	; 0
    111c:	a0 40       	sbci	r26, 0x00	; 0
    111e:	e1 f7       	brne	.-8      	; 0x1118 <main+0x6b2>
    1120:	00 c0       	rjmp	.+0      	; 0x1122 <main+0x6bc>
    1122:	00 00       	nop
    1124:	79 ce       	rjmp	.-782    	; 0xe18 <main+0x3b2>
								break;
								case '3':
								SPI_MasterTransmitchar(3);
								LCD_CLR_SCREEN();
								LCD_SEND_STRING("ROOM3 S:");
								while(option_check!='0'||flag==0)
    1126:	80 91 2b 02 	lds	r24, 0x022B
    112a:	80 33       	cpi	r24, 0x30	; 48
    112c:	09 f0       	breq	.+2      	; 0x1130 <main+0x6ca>
    112e:	97 cf       	rjmp	.-210    	; 0x105e <main+0x5f8>
    1130:	80 91 29 02 	lds	r24, 0x0229
    1134:	88 23       	and	r24, r24
    1136:	09 f4       	brne	.+2      	; 0x113a <main+0x6d4>
    1138:	92 cf       	rjmp	.-220    	; 0x105e <main+0x5f8>
    113a:	c8 c2       	rjmp	.+1424   	; 0x16cc <main+0xc66>
										goto B;
									}
								}
								break;
							case '4':
							SPI_MasterTransmitchar(4);
    113c:	84 e0       	ldi	r24, 0x04	; 4
    113e:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
							LCD_CLR_SCREEN();
    1142:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
										goto C;
									}
									else
									{
										LCD_CLR_SCREEN();
										LCD_SEND_STRING("Wrong Option");
    1146:	0f 2e       	mov	r0, r31
    1148:	f1 e4       	ldi	r31, 0x41	; 65
    114a:	cf 2e       	mov	r12, r31
    114c:	f1 e0       	ldi	r31, 0x01	; 1
    114e:	df 2e       	mov	r13, r31
    1150:	f0 2d       	mov	r31, r0
								break;
							case '4':
							SPI_MasterTransmitchar(4);
							LCD_CLR_SCREEN();
							C:
							LCD_SEND_STRING("1-ROOM4  2-TV");
    1152:	80 e6       	ldi	r24, 0x60	; 96
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
							LCD_Move_Cursor(2,1);
    115a:	82 e0       	ldi	r24, 0x02	; 2
    115c:	61 e0       	ldi	r22, 0x01	; 1
    115e:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
							LCD_SEND_STRING("3-Air Cond 0-RET");
    1162:	8e e6       	ldi	r24, 0x6E	; 110
    1164:	91 e0       	ldi	r25, 0x01	; 1
    1166:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
							option_check=0xff;
    116a:	9f ef       	ldi	r25, 0xFF	; 255
    116c:	90 93 2b 02 	sts	0x022B, r25
							do 
							{
								option_check=KEYPAD_CHECK_PRESS();
    1170:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <KEYPAD_CHECK_PRESS>
    1174:	80 93 2b 02 	sts	0x022B, r24
							} while (option_check==0xff);
    1178:	8f 3f       	cpi	r24, 0xFF	; 255
    117a:	d1 f3       	breq	.-12     	; 0x1170 <main+0x70a>
							switch(option_check)
    117c:	81 33       	cpi	r24, 0x31	; 49
    117e:	69 f0       	breq	.+26     	; 0x119a <main+0x734>
    1180:	82 33       	cpi	r24, 0x32	; 50
    1182:	20 f4       	brcc	.+8      	; 0x118c <main+0x726>
    1184:	80 33       	cpi	r24, 0x30	; 48
    1186:	09 f0       	breq	.+2      	; 0x118a <main+0x724>
    1188:	f7 c1       	rjmp	.+1006   	; 0x1578 <main+0xb12>
    118a:	f0 c1       	rjmp	.+992    	; 0x156c <main+0xb06>
    118c:	82 33       	cpi	r24, 0x32	; 50
    118e:	09 f4       	brne	.+2      	; 0x1192 <main+0x72c>
    1190:	7b c0       	rjmp	.+246    	; 0x1288 <main+0x822>
    1192:	83 33       	cpi	r24, 0x33	; 51
    1194:	09 f0       	breq	.+2      	; 0x1198 <main+0x732>
    1196:	f0 c1       	rjmp	.+992    	; 0x1578 <main+0xb12>
    1198:	ee c0       	rjmp	.+476    	; 0x1376 <main+0x910>
							{
								case '1':
								SPI_MasterTransmitchar(1);
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
								LCD_CLR_SCREEN();
    11a0:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
								LCD_SEND_STRING("ROOM4 S:");
    11a4:	8f e7       	ldi	r24, 0x7F	; 127
    11a6:	91 e0       	ldi	r25, 0x01	; 1
    11a8:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
								while(option_check!=0||flag==0)
    11ac:	80 91 2b 02 	lds	r24, 0x022B
    11b0:	88 23       	and	r24, r24
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <main+0x750>
    11b4:	63 c0       	rjmp	.+198    	; 0x127c <main+0x816>
								{
									status_check=SPI_MasterTransmitchar(0xff);
    11b6:	8f ef       	ldi	r24, 0xFF	; 255
    11b8:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
    11bc:	80 93 2c 02 	sts	0x022C, r24
									if(status_check==1)
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	41 f4       	brne	.+16     	; 0x11d4 <main+0x76e>
									{
										LCD_Move_Cursor(1,9);
    11c4:	69 e0       	ldi	r22, 0x09	; 9
    11c6:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
										LCD_SEND_STRING("ON ");
    11ca:	83 2d       	mov	r24, r3
    11cc:	92 2d       	mov	r25, r2
    11ce:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    11d2:	0a c0       	rjmp	.+20     	; 0x11e8 <main+0x782>
									}
									else if(status_check==0)
    11d4:	88 23       	and	r24, r24
    11d6:	41 f4       	brne	.+16     	; 0x11e8 <main+0x782>
									{
										LCD_Move_Cursor(1,9);
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	69 e0       	ldi	r22, 0x09	; 9
    11dc:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
										LCD_SEND_STRING("OFF");
    11e0:	85 2d       	mov	r24, r5
    11e2:	94 2d       	mov	r25, r4
    11e4:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
									}
									LCD_Move_Cursor(2,1);
    11e8:	82 e0       	ldi	r24, 0x02	; 2
    11ea:	61 e0       	ldi	r22, 0x01	; 1
    11ec:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
									LCD_SEND_STRING("1-ON 2-OFF 0-RET");
    11f0:	80 e3       	ldi	r24, 0x30	; 48
    11f2:	91 e0       	ldi	r25, 0x01	; 1
    11f4:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
									V:
									do
									{
										option_check=KEYPAD_CHECK_PRESS();
    11f8:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <KEYPAD_CHECK_PRESS>
    11fc:	80 93 2b 02 	sts	0x022B, r24
									} while (option_check==0xff);
    1200:	8f 3f       	cpi	r24, 0xFF	; 255
    1202:	d1 f3       	breq	.-12     	; 0x11f8 <main+0x792>
    1204:	2f ef       	ldi	r18, 0xFF	; 255
    1206:	30 e7       	ldi	r19, 0x70	; 112
    1208:	42 e0       	ldi	r20, 0x02	; 2
    120a:	21 50       	subi	r18, 0x01	; 1
    120c:	30 40       	sbci	r19, 0x00	; 0
    120e:	40 40       	sbci	r20, 0x00	; 0
    1210:	e1 f7       	brne	.-8      	; 0x120a <main+0x7a4>
    1212:	00 c0       	rjmp	.+0      	; 0x1214 <main+0x7ae>
    1214:	00 00       	nop
									_delay_ms(100);
									if(option_check=='1')
    1216:	81 33       	cpi	r24, 0x31	; 49
    1218:	61 f4       	brne	.+24     	; 0x1232 <main+0x7cc>
									{
										SPI_MasterTransmitchar(1);
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
										LCD_Move_Cursor(1,9);
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	69 e0       	ldi	r22, 0x09	; 9
    1224:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
										LCD_SEND_STRING("ON ");
    1228:	83 2d       	mov	r24, r3
    122a:	92 2d       	mov	r25, r2
    122c:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
										goto V;
    1230:	e3 cf       	rjmp	.-58     	; 0x11f8 <main+0x792>
									}
									 else if(option_check=='2')
    1232:	82 33       	cpi	r24, 0x32	; 50
    1234:	61 f4       	brne	.+24     	; 0x124e <main+0x7e8>
									{
										SPI_MasterTransmitchar(0);
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
										LCD_Move_Cursor(1,9);
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	69 e0       	ldi	r22, 0x09	; 9
    1240:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
										LCD_SEND_STRING("OFF");
    1244:	85 2d       	mov	r24, r5
    1246:	94 2d       	mov	r25, r4
    1248:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
										goto V;
    124c:	d5 cf       	rjmp	.-86     	; 0x11f8 <main+0x792>
									}
									else if(option_check=='0')
    124e:	80 33       	cpi	r24, 0x30	; 48
    1250:	31 f4       	brne	.+12     	; 0x125e <main+0x7f8>
									{
										SPI_MasterTransmitchar(3);
    1252:	83 e0       	ldi	r24, 0x03	; 3
    1254:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
										LCD_CLR_SCREEN();
    1258:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
										goto C;
    125c:	7a cf       	rjmp	.-268    	; 0x1152 <main+0x6ec>
									}
									else
									{
										LCD_CLR_SCREEN();
    125e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
										LCD_SEND_STRING("Wrong Option");
    1262:	c6 01       	movw	r24, r12
    1264:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    1268:	8f ef       	ldi	r24, 0xFF	; 255
    126a:	99 e6       	ldi	r25, 0x69	; 105
    126c:	a8 e1       	ldi	r26, 0x18	; 24
    126e:	81 50       	subi	r24, 0x01	; 1
    1270:	90 40       	sbci	r25, 0x00	; 0
    1272:	a0 40       	sbci	r26, 0x00	; 0
    1274:	e1 f7       	brne	.-8      	; 0x126e <main+0x808>
    1276:	00 c0       	rjmp	.+0      	; 0x1278 <main+0x812>
    1278:	00 00       	nop
    127a:	6b cf       	rjmp	.-298    	; 0x1152 <main+0x6ec>
							{
								case '1':
								SPI_MasterTransmitchar(1);
								LCD_CLR_SCREEN();
								LCD_SEND_STRING("ROOM4 S:");
								while(option_check!=0||flag==0)
    127c:	80 91 29 02 	lds	r24, 0x0229
    1280:	88 23       	and	r24, r24
    1282:	09 f4       	brne	.+2      	; 0x1286 <main+0x820>
    1284:	98 cf       	rjmp	.-208    	; 0x11b6 <main+0x750>
    1286:	22 c2       	rjmp	.+1092   	; 0x16cc <main+0xc66>
										goto C;
									}
								}
								break;
								case '2':
								SPI_MasterTransmitchar(2);
    1288:	82 e0       	ldi	r24, 0x02	; 2
    128a:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
								LCD_CLR_SCREEN();
    128e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
								LCD_SEND_STRING("TV  S:");
    1292:	88 e8       	ldi	r24, 0x88	; 136
    1294:	91 e0       	ldi	r25, 0x01	; 1
    1296:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
								while(option_check!=0||flag==0)
    129a:	80 91 2b 02 	lds	r24, 0x022B
    129e:	88 23       	and	r24, r24
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <main+0x83e>
    12a2:	63 c0       	rjmp	.+198    	; 0x136a <main+0x904>
								{
									status_check=SPI_MasterTransmitchar(0xff);
    12a4:	8f ef       	ldi	r24, 0xFF	; 255
    12a6:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
    12aa:	80 93 2c 02 	sts	0x022C, r24
									if(status_check==1)
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	41 f4       	brne	.+16     	; 0x12c2 <main+0x85c>
									{
										LCD_Move_Cursor(1,7);
    12b2:	67 e0       	ldi	r22, 0x07	; 7
    12b4:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
										LCD_SEND_STRING("ON ");
    12b8:	83 2d       	mov	r24, r3
    12ba:	92 2d       	mov	r25, r2
    12bc:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    12c0:	0a c0       	rjmp	.+20     	; 0x12d6 <main+0x870>
									}
									else if(status_check==0)
    12c2:	88 23       	and	r24, r24
    12c4:	41 f4       	brne	.+16     	; 0x12d6 <main+0x870>
									{
										LCD_Move_Cursor(1,7);
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	67 e0       	ldi	r22, 0x07	; 7
    12ca:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
										LCD_SEND_STRING("OFF");
    12ce:	85 2d       	mov	r24, r5
    12d0:	94 2d       	mov	r25, r4
    12d2:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
									}
									LCD_Move_Cursor(2,1);
    12d6:	82 e0       	ldi	r24, 0x02	; 2
    12d8:	61 e0       	ldi	r22, 0x01	; 1
    12da:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
									LCD_SEND_STRING("1-ON 2-OFF 0-RET");
    12de:	80 e3       	ldi	r24, 0x30	; 48
    12e0:	91 e0       	ldi	r25, 0x01	; 1
    12e2:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
									P:
									do
									{
										option_check=KEYPAD_CHECK_PRESS();
    12e6:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <KEYPAD_CHECK_PRESS>
    12ea:	80 93 2b 02 	sts	0x022B, r24
									} while (option_check==0xff);
    12ee:	8f 3f       	cpi	r24, 0xFF	; 255
    12f0:	d1 f3       	breq	.-12     	; 0x12e6 <main+0x880>
    12f2:	2f ef       	ldi	r18, 0xFF	; 255
    12f4:	30 e7       	ldi	r19, 0x70	; 112
    12f6:	42 e0       	ldi	r20, 0x02	; 2
    12f8:	21 50       	subi	r18, 0x01	; 1
    12fa:	30 40       	sbci	r19, 0x00	; 0
    12fc:	40 40       	sbci	r20, 0x00	; 0
    12fe:	e1 f7       	brne	.-8      	; 0x12f8 <main+0x892>
    1300:	00 c0       	rjmp	.+0      	; 0x1302 <main+0x89c>
    1302:	00 00       	nop
									_delay_ms(100);
									if(option_check=='1')
    1304:	81 33       	cpi	r24, 0x31	; 49
    1306:	61 f4       	brne	.+24     	; 0x1320 <main+0x8ba>
									{
										SPI_MasterTransmitchar(1);
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
										LCD_Move_Cursor(1,7);
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	67 e0       	ldi	r22, 0x07	; 7
    1312:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
										LCD_SEND_STRING("ON ");
    1316:	83 2d       	mov	r24, r3
    1318:	92 2d       	mov	r25, r2
    131a:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
										goto P;
    131e:	e3 cf       	rjmp	.-58     	; 0x12e6 <main+0x880>
									}
									else if(option_check=='2')
    1320:	82 33       	cpi	r24, 0x32	; 50
    1322:	61 f4       	brne	.+24     	; 0x133c <main+0x8d6>
									{
										SPI_MasterTransmitchar(0);
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
										LCD_Move_Cursor(1,7);
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	67 e0       	ldi	r22, 0x07	; 7
    132e:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
										LCD_SEND_STRING("OFF");
    1332:	85 2d       	mov	r24, r5
    1334:	94 2d       	mov	r25, r4
    1336:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
										goto P;
    133a:	d5 cf       	rjmp	.-86     	; 0x12e6 <main+0x880>
									}
									else if(option_check=='0')
    133c:	80 33       	cpi	r24, 0x30	; 48
    133e:	31 f4       	brne	.+12     	; 0x134c <main+0x8e6>
									{
										SPI_MasterTransmitchar(3);
    1340:	83 e0       	ldi	r24, 0x03	; 3
    1342:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
										LCD_CLR_SCREEN();
    1346:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
										goto C;
    134a:	03 cf       	rjmp	.-506    	; 0x1152 <main+0x6ec>
									}
									else
									{
										LCD_CLR_SCREEN();
    134c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
										LCD_SEND_STRING("Wrong Option");
    1350:	c6 01       	movw	r24, r12
    1352:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    1356:	8f ef       	ldi	r24, 0xFF	; 255
    1358:	99 e6       	ldi	r25, 0x69	; 105
    135a:	a8 e1       	ldi	r26, 0x18	; 24
    135c:	81 50       	subi	r24, 0x01	; 1
    135e:	90 40       	sbci	r25, 0x00	; 0
    1360:	a0 40       	sbci	r26, 0x00	; 0
    1362:	e1 f7       	brne	.-8      	; 0x135c <main+0x8f6>
    1364:	00 c0       	rjmp	.+0      	; 0x1366 <main+0x900>
    1366:	00 00       	nop
    1368:	f4 ce       	rjmp	.-536    	; 0x1152 <main+0x6ec>
								break;
								case '2':
								SPI_MasterTransmitchar(2);
								LCD_CLR_SCREEN();
								LCD_SEND_STRING("TV  S:");
								while(option_check!=0||flag==0)
    136a:	80 91 29 02 	lds	r24, 0x0229
    136e:	88 23       	and	r24, r24
    1370:	09 f4       	brne	.+2      	; 0x1374 <main+0x90e>
    1372:	98 cf       	rjmp	.-208    	; 0x12a4 <main+0x83e>
    1374:	ab c1       	rjmp	.+854    	; 0x16cc <main+0xc66>
										goto C;
									}
								}
								break;
								case '3':
								SPI_MasterTransmitchar(3);
    1376:	83 e0       	ldi	r24, 0x03	; 3
    1378:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
								LCD_CLR_SCREEN();
    137c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
								U:
								air_cond=0xff;
    1380:	dd 24       	eor	r13, r13
    1382:	da 94       	dec	r13
    1384:	d0 92 2a 02 	sts	0x022A, r13
								option_check=0xff;
    1388:	d0 92 2b 02 	sts	0x022B, r13
								LCD_SEND_STRING("1-Set Temp");
    138c:	8f e8       	ldi	r24, 0x8F	; 143
    138e:	91 e0       	ldi	r25, 0x01	; 1
    1390:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
								LCD_Move_Cursor(2,1);
    1394:	82 e0       	ldi	r24, 0x02	; 2
    1396:	61 e0       	ldi	r22, 0x01	; 1
    1398:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
								LCD_SEND_STRING("2-Control  0-RET");
    139c:	8a e9       	ldi	r24, 0x9A	; 154
    139e:	91 e0       	ldi	r25, 0x01	; 1
    13a0:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
								do 
								{
									air_cond=KEYPAD_CHECK_PRESS();
    13a4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <KEYPAD_CHECK_PRESS>
    13a8:	80 93 2a 02 	sts	0x022A, r24
								} while (air_cond==0xff);
    13ac:	8f 3f       	cpi	r24, 0xFF	; 255
    13ae:	d1 f3       	breq	.-12     	; 0x13a4 <main+0x93e>
    13b0:	2f ef       	ldi	r18, 0xFF	; 255
    13b2:	31 ee       	ldi	r19, 0xE1	; 225
    13b4:	44 e0       	ldi	r20, 0x04	; 4
    13b6:	21 50       	subi	r18, 0x01	; 1
    13b8:	30 40       	sbci	r19, 0x00	; 0
    13ba:	40 40       	sbci	r20, 0x00	; 0
    13bc:	e1 f7       	brne	.-8      	; 0x13b6 <main+0x950>
    13be:	00 c0       	rjmp	.+0      	; 0x13c0 <main+0x95a>
    13c0:	00 00       	nop
								_delay_ms(200);
								switch(air_cond)
    13c2:	81 33       	cpi	r24, 0x31	; 49
    13c4:	21 f0       	breq	.+8      	; 0x13ce <main+0x968>
    13c6:	82 33       	cpi	r24, 0x32	; 50
    13c8:	09 f0       	breq	.+2      	; 0x13cc <main+0x966>
    13ca:	80 c1       	rjmp	.+768    	; 0x16cc <main+0xc66>
    13cc:	58 c0       	rjmp	.+176    	; 0x147e <main+0xa18>
								{
									case '1':
									SPI_MasterTransmitchar(1);
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
									LCD_CLR_SCREEN();
    13d4:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
									LCD_SEND_STRING("Temp:--");
    13d8:	8b ea       	ldi	r24, 0xAB	; 171
    13da:	91 e0       	ldi	r25, 0x01	; 1
    13dc:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
									LCD_SEND_char('A',0xDF);
    13e0:	81 e4       	ldi	r24, 0x41	; 65
    13e2:	6f ed       	ldi	r22, 0xDF	; 223
    13e4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_SEND_char>
									LCD_SEND_char('A','C');
    13e8:	81 e4       	ldi	r24, 0x41	; 65
    13ea:	63 e4       	ldi	r22, 0x43	; 67
    13ec:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_SEND_char>
									do 
									{
										temp1=KEYPAD_CHECK_PRESS();
    13f0:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <KEYPAD_CHECK_PRESS>
    13f4:	80 93 28 02 	sts	0x0228, r24
									} while (temp1==0xff);
    13f8:	8f 3f       	cpi	r24, 0xFF	; 255
    13fa:	d1 f3       	breq	.-12     	; 0x13f0 <main+0x98a>
    13fc:	8f ef       	ldi	r24, 0xFF	; 255
    13fe:	91 ee       	ldi	r25, 0xE1	; 225
    1400:	a4 e0       	ldi	r26, 0x04	; 4
    1402:	81 50       	subi	r24, 0x01	; 1
    1404:	90 40       	sbci	r25, 0x00	; 0
    1406:	a0 40       	sbci	r26, 0x00	; 0
    1408:	e1 f7       	brne	.-8      	; 0x1402 <main+0x99c>
    140a:	00 c0       	rjmp	.+0      	; 0x140c <main+0x9a6>
    140c:	00 00       	nop
									_delay_ms(200);
									LCD_Move_Cursor(1,6);
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	66 e0       	ldi	r22, 0x06	; 6
    1412:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
									LCD_SEND_char('A',temp1);
    1416:	81 e4       	ldi	r24, 0x41	; 65
    1418:	60 91 28 02 	lds	r22, 0x0228
    141c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_SEND_char>
									do
									{
										temp2=KEYPAD_CHECK_PRESS();
    1420:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <KEYPAD_CHECK_PRESS>
    1424:	80 93 27 02 	sts	0x0227, r24
									} while (temp2==0xff);
    1428:	8f 3f       	cpi	r24, 0xFF	; 255
    142a:	d1 f3       	breq	.-12     	; 0x1420 <main+0x9ba>
    142c:	2f ef       	ldi	r18, 0xFF	; 255
    142e:	31 ee       	ldi	r19, 0xE1	; 225
    1430:	44 e0       	ldi	r20, 0x04	; 4
    1432:	21 50       	subi	r18, 0x01	; 1
    1434:	30 40       	sbci	r19, 0x00	; 0
    1436:	40 40       	sbci	r20, 0x00	; 0
    1438:	e1 f7       	brne	.-8      	; 0x1432 <main+0x9cc>
    143a:	00 c0       	rjmp	.+0      	; 0x143c <main+0x9d6>
    143c:	00 00       	nop
									_delay_ms(200);
									LCD_SEND_char('A',temp2);
    143e:	81 e4       	ldi	r24, 0x41	; 65
    1440:	60 91 27 02 	lds	r22, 0x0227
    1444:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_SEND_char>
									temp=((temp1-48)*10)+(temp2-48);
    1448:	80 91 27 02 	lds	r24, 0x0227
    144c:	80 51       	subi	r24, 0x10	; 16
    144e:	90 91 28 02 	lds	r25, 0x0228
    1452:	99 0f       	add	r25, r25
    1454:	29 2f       	mov	r18, r25
    1456:	22 0f       	add	r18, r18
    1458:	22 0f       	add	r18, r18
    145a:	92 0f       	add	r25, r18
    145c:	89 0f       	add	r24, r25
    145e:	80 93 26 02 	sts	0x0226, r24
									SPI_MasterTransmitchar(temp);
    1462:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
    1466:	8f ef       	ldi	r24, 0xFF	; 255
    1468:	94 e3       	ldi	r25, 0x34	; 52
    146a:	ac e0       	ldi	r26, 0x0C	; 12
    146c:	81 50       	subi	r24, 0x01	; 1
    146e:	90 40       	sbci	r25, 0x00	; 0
    1470:	a0 40       	sbci	r26, 0x00	; 0
    1472:	e1 f7       	brne	.-8      	; 0x146c <main+0xa06>
    1474:	00 c0       	rjmp	.+0      	; 0x1476 <main+0xa10>
    1476:	00 00       	nop
									_delay_ms(500);
									LCD_CLR_SCREEN();
    1478:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
									goto U;
    147c:	83 cf       	rjmp	.-250    	; 0x1384 <main+0x91e>
									break;
									case '2':
									flag=0;
    147e:	10 92 29 02 	sts	0x0229, r1
									SPI_SlaveReceivechar(2);
    1482:	82 e0       	ldi	r24, 0x02	; 2
    1484:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <SPI_SlaveReceivechar>
									LCD_CLR_SCREEN();
    1488:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
									K:
									LCD_SEND_STRING("Air Cond S:");
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	9c 81       	ldd	r25, Y+4	; 0x04
    1490:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
									LCD_Move_Cursor(2,1);
    1494:	82 e0       	ldi	r24, 0x02	; 2
    1496:	61 e0       	ldi	r22, 0x01	; 1
    1498:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
									LCD_SEND_STRING("1-ON 2-OFF 0-RET");
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	9a 81       	ldd	r25, Y+2	; 0x02
    14a0:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
									option_check=0xff;
    14a4:	d0 92 2b 02 	sts	0x022B, r13
									do
									{
										option_check=KEYPAD_CHECK_PRESS();
    14a8:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <KEYPAD_CHECK_PRESS>
    14ac:	80 93 2b 02 	sts	0x022B, r24
									} while (option_check==0xff);
    14b0:	8f 3f       	cpi	r24, 0xFF	; 255
    14b2:	d1 f3       	breq	.-12     	; 0x14a8 <main+0xa42>
    14b4:	2f ef       	ldi	r18, 0xFF	; 255
    14b6:	31 ee       	ldi	r19, 0xE1	; 225
    14b8:	44 e0       	ldi	r20, 0x04	; 4
    14ba:	21 50       	subi	r18, 0x01	; 1
    14bc:	30 40       	sbci	r19, 0x00	; 0
    14be:	40 40       	sbci	r20, 0x00	; 0
    14c0:	e1 f7       	brne	.-8      	; 0x14ba <main+0xa54>
    14c2:	00 c0       	rjmp	.+0      	; 0x14c4 <main+0xa5e>
    14c4:	00 00       	nop
									_delay_ms(200);
									if(option_check=='1')
    14c6:	81 33       	cpi	r24, 0x31	; 49
    14c8:	d1 f4       	brne	.+52     	; 0x14fe <main+0xa98>
									{
										SPI_MasterTransmitchar(1);
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
										SPI_MasterTransmitchar(2);
    14d0:	82 e0       	ldi	r24, 0x02	; 2
    14d2:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
										LCD_Move_Cursor(1,12);
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	6c e0       	ldi	r22, 0x0C	; 12
    14da:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
										LCD_SEND_STRING("ON ");
    14de:	83 2d       	mov	r24, r3
    14e0:	92 2d       	mov	r25, r2
    14e2:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
										LCD_CLR_SCREEN();
    14e6:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
    14ea:	8f ef       	ldi	r24, 0xFF	; 255
    14ec:	94 e3       	ldi	r25, 0x34	; 52
    14ee:	ac e0       	ldi	r26, 0x0C	; 12
    14f0:	81 50       	subi	r24, 0x01	; 1
    14f2:	90 40       	sbci	r25, 0x00	; 0
    14f4:	a0 40       	sbci	r26, 0x00	; 0
    14f6:	e1 f7       	brne	.-8      	; 0x14f0 <main+0xa8a>
    14f8:	00 c0       	rjmp	.+0      	; 0x14fa <main+0xa94>
    14fa:	00 00       	nop
    14fc:	c7 cf       	rjmp	.-114    	; 0x148c <main+0xa26>
										_delay_ms(500);
										goto K;
									}
									else if(option_check=='2')
    14fe:	82 33       	cpi	r24, 0x32	; 50
    1500:	d1 f4       	brne	.+52     	; 0x1536 <main+0xad0>
									{
										SPI_MasterTransmitchar(0);
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
										SPI_MasterTransmitchar(0);
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
										LCD_Move_Cursor(1,12);
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	6c e0       	ldi	r22, 0x0C	; 12
    1512:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
										LCD_SEND_STRING("OFF");
    1516:	85 2d       	mov	r24, r5
    1518:	94 2d       	mov	r25, r4
    151a:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
										LCD_CLR_SCREEN();
    151e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
    1522:	2f ef       	ldi	r18, 0xFF	; 255
    1524:	34 e3       	ldi	r19, 0x34	; 52
    1526:	4c e0       	ldi	r20, 0x0C	; 12
    1528:	21 50       	subi	r18, 0x01	; 1
    152a:	30 40       	sbci	r19, 0x00	; 0
    152c:	40 40       	sbci	r20, 0x00	; 0
    152e:	e1 f7       	brne	.-8      	; 0x1528 <main+0xac2>
    1530:	00 c0       	rjmp	.+0      	; 0x1532 <main+0xacc>
    1532:	00 00       	nop
    1534:	ab cf       	rjmp	.-170    	; 0x148c <main+0xa26>
										_delay_ms(500);
										goto K;
									}
									else if(option_check=='0')
    1536:	80 33       	cpi	r24, 0x30	; 48
    1538:	49 f4       	brne	.+18     	; 0x154c <main+0xae6>
									{
										SPI_MasterTransmitchar(3);
    153a:	83 e0       	ldi	r24, 0x03	; 3
    153c:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
										SPI_MasterTransmitchar(3);
    1540:	83 e0       	ldi	r24, 0x03	; 3
    1542:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
										LCD_CLR_SCREEN();
    1546:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
										goto U;
    154a:	1c cf       	rjmp	.-456    	; 0x1384 <main+0x91e>
									}
									else
									{
										LCD_CLR_SCREEN();
    154c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
										LCD_SEND_STRING("Wrong Option");
    1550:	81 e4       	ldi	r24, 0x41	; 65
    1552:	91 e0       	ldi	r25, 0x01	; 1
    1554:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    1558:	8f ef       	ldi	r24, 0xFF	; 255
    155a:	99 e6       	ldi	r25, 0x69	; 105
    155c:	a8 e1       	ldi	r26, 0x18	; 24
    155e:	81 50       	subi	r24, 0x01	; 1
    1560:	90 40       	sbci	r25, 0x00	; 0
    1562:	a0 40       	sbci	r26, 0x00	; 0
    1564:	e1 f7       	brne	.-8      	; 0x155e <main+0xaf8>
    1566:	00 c0       	rjmp	.+0      	; 0x1568 <main+0xb02>
    1568:	00 00       	nop
    156a:	56 cc       	rjmp	.-1876   	; 0xe18 <main+0x3b2>
									case '0':
									break;
								}
								break;
								case '0':
								LCD_CLR_SCREEN();
    156c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
								SPI_MasterTransmitchar(0);
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
								goto B;
    1576:	50 cc       	rjmp	.-1888   	; 0xe18 <main+0x3b2>
								break;
								default:
								LCD_CLR_SCREEN();
    1578:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
								LCD_SEND_STRING("Wrong Option");
    157c:	81 e4       	ldi	r24, 0x41	; 65
    157e:	91 e0       	ldi	r25, 0x01	; 1
    1580:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    1584:	2f ef       	ldi	r18, 0xFF	; 255
    1586:	39 e6       	ldi	r19, 0x69	; 105
    1588:	48 e1       	ldi	r20, 0x18	; 24
    158a:	21 50       	subi	r18, 0x01	; 1
    158c:	30 40       	sbci	r19, 0x00	; 0
    158e:	40 40       	sbci	r20, 0x00	; 0
    1590:	e1 f7       	brne	.-8      	; 0x158a <main+0xb24>
    1592:	00 c0       	rjmp	.+0      	; 0x1594 <main+0xb2e>
    1594:	00 00       	nop
    1596:	36 c1       	rjmp	.+620    	; 0x1804 <main+0xd9e>
						} 							
							/*I will continue this code later*/
						}//for right password
						else
						{
							LCD_CLR_SCREEN();
    1598:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
							LCD_SEND_STRING("Wrong Password!!!");
    159c:	8f eb       	ldi	r24, 0xBF	; 191
    159e:	91 e0       	ldi	r25, 0x01	; 1
    15a0:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    15a4:	8f ef       	ldi	r24, 0xFF	; 255
    15a6:	94 e3       	ldi	r25, 0x34	; 52
    15a8:	ac e0       	ldi	r26, 0x0C	; 12
    15aa:	81 50       	subi	r24, 0x01	; 1
    15ac:	90 40       	sbci	r25, 0x00	; 0
    15ae:	a0 40       	sbci	r26, 0x00	; 0
    15b0:	e1 f7       	brne	.-8      	; 0x15aa <main+0xb44>
    15b2:	00 c0       	rjmp	.+0      	; 0x15b4 <main+0xb4e>
    15b4:	00 00       	nop
							_delay_ms(500);
							if(tries>0)
    15b6:	80 91 3d 02 	lds	r24, 0x023D
    15ba:	88 23       	and	r24, r24
    15bc:	09 f1       	breq	.+66     	; 0x1600 <main+0xb9a>
							{
								tries--;
    15be:	81 50       	subi	r24, 0x01	; 1
    15c0:	80 93 3d 02 	sts	0x023D, r24
								LCD_CLR_SCREEN();
    15c4:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
								LCD_SEND_STRING("Tries Left:");
    15c8:	81 ed       	ldi	r24, 0xD1	; 209
    15ca:	91 e0       	ldi	r25, 0x01	; 1
    15cc:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
								LCD_Move_Cursor(1,12);
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	6c e0       	ldi	r22, 0x0C	; 12
    15d4:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
								LCD_SEND_char('A',tries+48);
    15d8:	60 91 3d 02 	lds	r22, 0x023D
    15dc:	60 5d       	subi	r22, 0xD0	; 208
    15de:	81 e4       	ldi	r24, 0x41	; 65
    15e0:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_SEND_char>
    15e4:	2f ef       	ldi	r18, 0xFF	; 255
    15e6:	39 e6       	ldi	r19, 0x69	; 105
    15e8:	48 e1       	ldi	r20, 0x18	; 24
    15ea:	21 50       	subi	r18, 0x01	; 1
    15ec:	30 40       	sbci	r19, 0x00	; 0
    15ee:	40 40       	sbci	r20, 0x00	; 0
    15f0:	e1 f7       	brne	.-8      	; 0x15ea <main+0xb84>
    15f2:	00 c0       	rjmp	.+0      	; 0x15f4 <main+0xb8e>
    15f4:	00 00       	nop
								_delay_ms(1000);
							}
							if(tries<=0)
    15f6:	80 91 3d 02 	lds	r24, 0x023D
    15fa:	88 23       	and	r24, r24
    15fc:	09 f0       	breq	.+2      	; 0x1600 <main+0xb9a>
    15fe:	66 c0       	rjmp	.+204    	; 0x16cc <main+0xc66>
							{
								LCD_CLR_SCREEN();
    1600:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
								LCD_SEND_STRING("YOU ARE BLOCKED");
    1604:	8d ed       	ldi	r24, 0xDD	; 221
    1606:	91 e0       	ldi	r25, 0x01	; 1
    1608:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
								EEPROM_WRITE(EEPROM_BLOCK,0x01);
    160c:	88 e0       	ldi	r24, 0x08	; 8
    160e:	91 e0       	ldi	r25, 0x01	; 1
    1610:	61 e0       	ldi	r22, 0x01	; 1
    1612:	0e 94 96 03 	call	0x72c	; 0x72c <EEPROM_WRITE>
    1616:	8f ef       	ldi	r24, 0xFF	; 255
    1618:	9e e9       	ldi	r25, 0x9E	; 158
    161a:	a4 e2       	ldi	r26, 0x24	; 36
    161c:	81 50       	subi	r24, 0x01	; 1
    161e:	90 40       	sbci	r25, 0x00	; 0
    1620:	a0 40       	sbci	r26, 0x00	; 0
    1622:	e1 f7       	brne	.-8      	; 0x161c <main+0xbb6>
    1624:	00 c0       	rjmp	.+0      	; 0x1626 <main+0xbc0>
    1626:	00 00       	nop
								_delay_ms(1500); 
								if(EEPROM_READ(EEPROM_BLOCK)==0x01)
    1628:	88 e0       	ldi	r24, 0x08	; 8
    162a:	91 e0       	ldi	r25, 0x01	; 1
    162c:	0e 94 9e 03 	call	0x73c	; 0x73c <EEPROM_READ>
    1630:	81 30       	cpi	r24, 0x01	; 1
    1632:	21 f4       	brne	.+8      	; 0x163c <main+0xbd6>
								{
									LED_ON('A',3);
    1634:	81 e4       	ldi	r24, 0x41	; 65
    1636:	63 e0       	ldi	r22, 0x03	; 3
    1638:	0e 94 25 05 	call	0xa4a	; 0xa4a <LED_ON>
								}
								LCD_CLR_SCREEN();
    163c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
								unsigned char block_time=10;
								LCD_SEND_STRING("Wait    Sec");
    1640:	8d ee       	ldi	r24, 0xED	; 237
    1642:	91 e0       	ldi	r25, 0x01	; 1
    1644:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
								if(EEPROM_READ(EEPROM_BLOCK)==0x01)
								{
									LED_ON('A',3);
								}
								LCD_CLR_SCREEN();
								unsigned char block_time=10;
    1648:	0f 2e       	mov	r0, r31
    164a:	fa e0       	ldi	r31, 0x0A	; 10
    164c:	cf 2e       	mov	r12, r31
    164e:	f0 2d       	mov	r31, r0
								LCD_SEND_STRING("Wait    Sec");
								while(block_time>0)
								{
									LCD_Move_Cursor(1,6);
									LCD_SEND_char('A',(block_time/10)+48);
    1650:	0f 2e       	mov	r0, r31
    1652:	fa e0       	ldi	r31, 0x0A	; 10
    1654:	df 2e       	mov	r13, r31
    1656:	f0 2d       	mov	r31, r0
								LCD_CLR_SCREEN();
								unsigned char block_time=10;
								LCD_SEND_STRING("Wait    Sec");
								while(block_time>0)
								{
									LCD_Move_Cursor(1,6);
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	66 e0       	ldi	r22, 0x06	; 6
    165c:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
									LCD_SEND_char('A',(block_time/10)+48);
    1660:	8c 2d       	mov	r24, r12
    1662:	6d 2d       	mov	r22, r13
    1664:	0e 94 40 12 	call	0x2480	; 0x2480 <__udivmodqi4>
    1668:	99 83       	std	Y+1, r25	; 0x01
    166a:	68 2f       	mov	r22, r24
    166c:	60 5d       	subi	r22, 0xD0	; 208
    166e:	81 e4       	ldi	r24, 0x41	; 65
    1670:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_SEND_char>
									LCD_SEND_char('A',(block_time%10)+48);
    1674:	69 81       	ldd	r22, Y+1	; 0x01
    1676:	60 5d       	subi	r22, 0xD0	; 208
    1678:	81 e4       	ldi	r24, 0x41	; 65
    167a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_SEND_char>
    167e:	2f ef       	ldi	r18, 0xFF	; 255
    1680:	39 e6       	ldi	r19, 0x69	; 105
    1682:	48 e1       	ldi	r20, 0x18	; 24
    1684:	21 50       	subi	r18, 0x01	; 1
    1686:	30 40       	sbci	r19, 0x00	; 0
    1688:	40 40       	sbci	r20, 0x00	; 0
    168a:	e1 f7       	brne	.-8      	; 0x1684 <main+0xc1e>
    168c:	00 c0       	rjmp	.+0      	; 0x168e <main+0xc28>
    168e:	00 00       	nop
									_delay_ms(1000);
									block_time--;
    1690:	ca 94       	dec	r12
									LED_ON('A',3);
								}
								LCD_CLR_SCREEN();
								unsigned char block_time=10;
								LCD_SEND_STRING("Wait    Sec");
								while(block_time>0)
    1692:	11 f7       	brne	.-60     	; 0x1658 <main+0xbf2>
									LCD_SEND_char('A',(block_time/10)+48);
									LCD_SEND_char('A',(block_time%10)+48);
									_delay_ms(1000);
									block_time--;
								}
								EEPROM_WRITE(EEPROM_BLOCK,0xFF);
    1694:	88 e0       	ldi	r24, 0x08	; 8
    1696:	91 e0       	ldi	r25, 0x01	; 1
    1698:	6f ef       	ldi	r22, 0xFF	; 255
    169a:	0e 94 96 03 	call	0x72c	; 0x72c <EEPROM_WRITE>
								if(EEPROM_READ(EEPROM_BLOCK)==0xFF)
    169e:	88 e0       	ldi	r24, 0x08	; 8
    16a0:	91 e0       	ldi	r25, 0x01	; 1
    16a2:	0e 94 9e 03 	call	0x73c	; 0x73c <EEPROM_READ>
    16a6:	8f 3f       	cpi	r24, 0xFF	; 255
    16a8:	21 f4       	brne	.+8      	; 0x16b2 <main+0xc4c>
								{
									LED_OFF('A',3);
    16aa:	81 e4       	ldi	r24, 0x41	; 65
    16ac:	63 e0       	ldi	r22, 0x03	; 3
    16ae:	0e 94 29 05 	call	0xa52	; 0xa52 <LED_OFF>
								}
								LCD_CLR_SCREEN();
    16b2:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
    16b6:	0a c0       	rjmp	.+20     	; 0x16cc <main+0xc66>
		{
			while(tries>0)
			{
				W:
						LCD_CLR_SCREEN();
						LCD_SEND_STRING("Check Admin");
    16b8:	0f 2e       	mov	r0, r31
    16ba:	fa ed       	ldi	r31, 0xDA	; 218
    16bc:	af 2e       	mov	r10, r31
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	bf 2e       	mov	r11, r31
    16c2:	f0 2d       	mov	r31, r0
									case '2':
									flag=0;
									SPI_SlaveReceivechar(2);
									LCD_CLR_SCREEN();
									K:
									LCD_SEND_STRING("Air Cond S:");
    16c4:	43 eb       	ldi	r20, 0xB3	; 179
    16c6:	51 e0       	ldi	r21, 0x01	; 1
    16c8:	4b 83       	std	Y+3, r20	; 0x03
    16ca:	5c 83       	std	Y+4, r21	; 0x04
			_delay_ms(100);
		} while (check_mode==0xff);
		SPI_MasterTransmitchar(check_mode);
		if(check_mode=='0')
		{
			while(tries>0)
    16cc:	80 91 3d 02 	lds	r24, 0x023D
    16d0:	88 23       	and	r24, r24
    16d2:	09 f0       	breq	.+2      	; 0x16d6 <main+0xc70>
    16d4:	0e cb       	rjmp	.-2532   	; 0xcf2 <main+0x28c>
    16d6:	09 ca       	rjmp	.-3054   	; 0xaea <main+0x84>
								LCD_CLR_SCREEN();
							}
						}
					}//end of if(check_mode==Admin)
				}//end of if(check pass)
				else if(check_mode=='1')
    16d8:	81 33       	cpi	r24, 0x31	; 49
    16da:	09 f0       	breq	.+2      	; 0x16de <main+0xc78>
    16dc:	06 ca       	rjmp	.-3060   	; 0xaea <main+0x84>
                {
                    tries=MAXTRIES;
    16de:	83 e0       	ldi	r24, 0x03	; 3
    16e0:	80 93 3d 02 	sts	0x023D, r24
                    if(tries>0)
			{
						LCD_CLR_SCREEN();
    16e4:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
						LCD_SEND_STRING("Check Guest");
    16e8:	89 ef       	ldi	r24, 0xF9	; 249
    16ea:	91 e0       	ldi	r25, 0x01	; 1
    16ec:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
						LCD_Move_Cursor(2,1);
    16f0:	82 e0       	ldi	r24, 0x02	; 2
    16f2:	61 e0       	ldi	r22, 0x01	; 1
    16f4:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
						LCD_SEND_STRING("Password:");
    16f8:	86 ee       	ldi	r24, 0xE6	; 230
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
						LCD_Move_Cursor(2,10);
    1700:	82 e0       	ldi	r24, 0x02	; 2
    1702:	6a e0       	ldi	r22, 0x0A	; 10
    1704:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
						for(i=0;i<=3;i++)
    1708:	10 92 3c 02 	sts	0x023C, r1
						{
							do
							{
								guest_pass[i]=KEYPAD_CHECK_PRESS();
    170c:	c0 90 3c 02 	lds	r12, 0x023C
    1710:	dd 24       	eor	r13, r13
    1712:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <KEYPAD_CHECK_PRESS>
    1716:	f6 01       	movw	r30, r12
    1718:	ef 5c       	subi	r30, 0xCF	; 207
    171a:	fd 4f       	sbci	r31, 0xFD	; 253
    171c:	80 83       	st	Z, r24
    171e:	2f ef       	ldi	r18, 0xFF	; 255
    1720:	30 e7       	ldi	r19, 0x70	; 112
    1722:	42 e0       	ldi	r20, 0x02	; 2
    1724:	21 50       	subi	r18, 0x01	; 1
    1726:	30 40       	sbci	r19, 0x00	; 0
    1728:	40 40       	sbci	r20, 0x00	; 0
    172a:	e1 f7       	brne	.-8      	; 0x1724 <main+0xcbe>
    172c:	00 c0       	rjmp	.+0      	; 0x172e <main+0xcc8>
    172e:	00 00       	nop
								_delay_ms(100);
							} while (guest_pass[i]==0xff);
    1730:	e0 91 3c 02 	lds	r30, 0x023C
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	ef 5c       	subi	r30, 0xCF	; 207
    1738:	fd 4f       	sbci	r31, 0xFD	; 253
    173a:	60 81       	ld	r22, Z
    173c:	6f 3f       	cpi	r22, 0xFF	; 255
    173e:	31 f3       	breq	.-52     	; 0x170c <main+0xca6>
							LCD_SEND_char('A',guest_pass[i]);
    1740:	81 e4       	ldi	r24, 0x41	; 65
    1742:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_SEND_char>
							LCD_Move_Cursor(2,10+i);
    1746:	60 91 3c 02 	lds	r22, 0x023C
    174a:	66 5f       	subi	r22, 0xF6	; 246
    174c:	82 e0       	ldi	r24, 0x02	; 2
    174e:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
    1752:	8f e7       	ldi	r24, 0x7F	; 127
    1754:	99 ea       	ldi	r25, 0xA9	; 169
    1756:	a3 e0       	ldi	r26, 0x03	; 3
    1758:	81 50       	subi	r24, 0x01	; 1
    175a:	90 40       	sbci	r25, 0x00	; 0
    175c:	a0 40       	sbci	r26, 0x00	; 0
    175e:	e1 f7       	brne	.-8      	; 0x1758 <main+0xcf2>
    1760:	00 c0       	rjmp	.+0      	; 0x1762 <main+0xcfc>
    1762:	00 00       	nop
							_delay_ms(150);
							LCD_SEND_char('A','*');
    1764:	81 e4       	ldi	r24, 0x41	; 65
    1766:	6a e2       	ldi	r22, 0x2A	; 42
    1768:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_SEND_char>
    176c:	2f ef       	ldi	r18, 0xFF	; 255
    176e:	30 e7       	ldi	r19, 0x70	; 112
    1770:	42 e0       	ldi	r20, 0x02	; 2
    1772:	21 50       	subi	r18, 0x01	; 1
    1774:	30 40       	sbci	r19, 0x00	; 0
    1776:	40 40       	sbci	r20, 0x00	; 0
    1778:	e1 f7       	brne	.-8      	; 0x1772 <main+0xd0c>
    177a:	00 c0       	rjmp	.+0      	; 0x177c <main+0xd16>
    177c:	00 00       	nop
						LCD_CLR_SCREEN();
						LCD_SEND_STRING("Check Guest");
						LCD_Move_Cursor(2,1);
						LCD_SEND_STRING("Password:");
						LCD_Move_Cursor(2,10);
						for(i=0;i<=3;i++)
    177e:	80 91 3c 02 	lds	r24, 0x023C
    1782:	8f 5f       	subi	r24, 0xFF	; 255
    1784:	80 93 3c 02 	sts	0x023C, r24
    1788:	84 30       	cpi	r24, 0x04	; 4
    178a:	08 f4       	brcc	.+2      	; 0x178e <main+0xd28>
    178c:	bf cf       	rjmp	.-130    	; 0x170c <main+0xca6>
							LCD_Move_Cursor(2,10+i);
							_delay_ms(150);
							LCD_SEND_char('A','*');
							_delay_ms(100);
						}
						if(EEPROM_READ(EEPROM_LOCATION5)==guest_pass[0]&&EEPROM_READ(EEPROM_LOCATION6)==guest_pass[1]&&EEPROM_READ(EEPROM_LOCATION7)==guest_pass[2]&&EEPROM_READ(EEPROM_LOCATION8)==guest_pass[3])
    178e:	84 e0       	ldi	r24, 0x04	; 4
    1790:	91 e0       	ldi	r25, 0x01	; 1
    1792:	0e 94 9e 03 	call	0x73c	; 0x73c <EEPROM_READ>
    1796:	90 91 31 02 	lds	r25, 0x0231
    179a:	89 17       	cp	r24, r25
    179c:	09 f0       	breq	.+2      	; 0x17a0 <main+0xd3a>
    179e:	46 c2       	rjmp	.+1164   	; 0x1c2c <main+0x11c6>
    17a0:	85 e0       	ldi	r24, 0x05	; 5
    17a2:	91 e0       	ldi	r25, 0x01	; 1
    17a4:	0e 94 9e 03 	call	0x73c	; 0x73c <EEPROM_READ>
    17a8:	90 91 32 02 	lds	r25, 0x0232
    17ac:	89 17       	cp	r24, r25
    17ae:	09 f0       	breq	.+2      	; 0x17b2 <main+0xd4c>
    17b0:	3d c2       	rjmp	.+1146   	; 0x1c2c <main+0x11c6>
    17b2:	86 e0       	ldi	r24, 0x06	; 6
    17b4:	91 e0       	ldi	r25, 0x01	; 1
    17b6:	0e 94 9e 03 	call	0x73c	; 0x73c <EEPROM_READ>
    17ba:	90 91 33 02 	lds	r25, 0x0233
    17be:	89 17       	cp	r24, r25
    17c0:	09 f0       	breq	.+2      	; 0x17c4 <main+0xd5e>
    17c2:	34 c2       	rjmp	.+1128   	; 0x1c2c <main+0x11c6>
    17c4:	87 e0       	ldi	r24, 0x07	; 7
    17c6:	91 e0       	ldi	r25, 0x01	; 1
    17c8:	0e 94 9e 03 	call	0x73c	; 0x73c <EEPROM_READ>
    17cc:	90 91 34 02 	lds	r25, 0x0234
    17d0:	89 17       	cp	r24, r25
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <main+0xd70>
    17d4:	2b c2       	rjmp	.+1110   	; 0x1c2c <main+0x11c6>
						{
							flag=0;
    17d6:	10 92 29 02 	sts	0x0229, r1
							LCD_CLR_SCREEN();
    17da:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
							LCD_SEND_STRING("Right Password!");
    17de:	80 ef       	ldi	r24, 0xF0	; 240
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
		                	TIMER0_CTC_MODE_Init();	
    17e6:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <TIMER0_CTC_MODE_Init>
							LED_ON('A',2);						
    17ea:	81 e4       	ldi	r24, 0x41	; 65
    17ec:	62 e0       	ldi	r22, 0x02	; 2
    17ee:	0e 94 25 05 	call	0xa4a	; 0xa4a <LED_ON>
    17f2:	8f ef       	ldi	r24, 0xFF	; 255
    17f4:	99 e6       	ldi	r25, 0x69	; 105
    17f6:	a8 e1       	ldi	r26, 0x18	; 24
    17f8:	81 50       	subi	r24, 0x01	; 1
    17fa:	90 40       	sbci	r25, 0x00	; 0
    17fc:	a0 40       	sbci	r26, 0x00	; 0
    17fe:	e1 f7       	brne	.-8      	; 0x17f8 <main+0xd92>
    1800:	00 c0       	rjmp	.+0      	; 0x1802 <main+0xd9c>
    1802:	00 00       	nop
							_delay_ms(1000);
							A:
							LCD_CLR_SCREEN();
							LCD_SEND_STRING("1-ROOM1 2-ROOM2");
    1804:	0f 2e       	mov	r0, r31
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	af 2e       	mov	r10, r31
    180a:	f1 e0       	ldi	r31, 0x01	; 1
    180c:	bf 2e       	mov	r11, r31
    180e:	f0 2d       	mov	r31, r0
											{
												LCD_Move_Cursor(1,9);
												LCD_SEND_STRING("OFF");
											}
											LCD_Move_Cursor(2,1);
											LCD_SEND_STRING("1-ON 2-OFF 0-RET");
    1810:	0f 2e       	mov	r0, r31
    1812:	f0 e3       	ldi	r31, 0x30	; 48
    1814:	cf 2e       	mov	r12, r31
    1816:	f1 e0       	ldi	r31, 0x01	; 1
    1818:	df 2e       	mov	r13, r31
    181a:	f0 2d       	mov	r31, r0
							LCD_SEND_STRING("Right Password!");
		                	TIMER0_CTC_MODE_Init();	
							LED_ON('A',2);						
							_delay_ms(1000);
							A:
							LCD_CLR_SCREEN();
    181c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
							LCD_SEND_STRING("1-ROOM1 2-ROOM2");
    1820:	c5 01       	movw	r24, r10
    1822:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
							LCD_Move_Cursor(2,1);
    1826:	82 e0       	ldi	r24, 0x02	; 2
    1828:	61 e0       	ldi	r22, 0x01	; 1
    182a:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
							LCD_SEND_STRING("3-ROOM3 4-ROOM4");
    182e:	85 e0       	ldi	r24, 0x05	; 5
    1830:	92 e0       	ldi	r25, 0x02	; 2
    1832:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
							room_check=0xff;
    1836:	8f ef       	ldi	r24, 0xFF	; 255
    1838:	80 93 2d 02 	sts	0x022D, r24
								do 
								{
									room_check=KEYPAD_CHECK_PRESS();
    183c:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <KEYPAD_CHECK_PRESS>
    1840:	80 93 2d 02 	sts	0x022D, r24
								} while (room_check==0xff);
    1844:	8f 3f       	cpi	r24, 0xFF	; 255
    1846:	d1 f3       	breq	.-12     	; 0x183c <main+0xdd6>
								switch(room_check)
    1848:	82 33       	cpi	r24, 0x32	; 50
    184a:	09 f4       	brne	.+2      	; 0x184e <main+0xde8>
    184c:	81 c0       	rjmp	.+258    	; 0x1950 <main+0xeea>
    184e:	83 33       	cpi	r24, 0x33	; 51
    1850:	20 f4       	brcc	.+8      	; 0x185a <main+0xdf4>
    1852:	81 33       	cpi	r24, 0x31	; 49
    1854:	09 f0       	breq	.+2      	; 0x1858 <main+0xdf2>
    1856:	da c1       	rjmp	.+948    	; 0x1c0c <main+0x11a6>
    1858:	07 c0       	rjmp	.+14     	; 0x1868 <main+0xe02>
    185a:	83 33       	cpi	r24, 0x33	; 51
    185c:	09 f4       	brne	.+2      	; 0x1860 <main+0xdfa>
    185e:	ec c0       	rjmp	.+472    	; 0x1a38 <main+0xfd2>
    1860:	84 33       	cpi	r24, 0x34	; 52
    1862:	09 f0       	breq	.+2      	; 0x1866 <main+0xe00>
    1864:	d3 c1       	rjmp	.+934    	; 0x1c0c <main+0x11a6>
    1866:	5d c1       	rjmp	.+698    	; 0x1b22 <main+0x10bc>
								{
									case '1':
									SPI_MasterTransmitchar(1);
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
									LCD_CLR_SCREEN();
    186e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
									LCD_SEND_STRING("ROOM1 S:");
    1872:	8f e1       	ldi	r24, 0x1F	; 31
    1874:	91 e0       	ldi	r25, 0x01	; 1
    1876:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
									while(option_check!='0'||flag==0)
    187a:	5f c0       	rjmp	.+190    	; 0x193a <main+0xed4>
									{
										status_check=SPI_MasterTransmitchar(0xff);
    187c:	8f ef       	ldi	r24, 0xFF	; 255
    187e:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
    1882:	80 93 2c 02 	sts	0x022C, r24
										if(status_check==1)
    1886:	81 30       	cpi	r24, 0x01	; 1
    1888:	39 f4       	brne	.+14     	; 0x1898 <main+0xe32>
										{
											LCD_Move_Cursor(1,9);
    188a:	69 e0       	ldi	r22, 0x09	; 9
    188c:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
											LCD_SEND_STRING("ON ");
    1890:	c7 01       	movw	r24, r14
    1892:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    1896:	09 c0       	rjmp	.+18     	; 0x18aa <main+0xe44>
										}
										else if(status_check==0)
    1898:	88 23       	and	r24, r24
    189a:	39 f4       	brne	.+14     	; 0x18aa <main+0xe44>
										{
											LCD_Move_Cursor(1,9);
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	69 e0       	ldi	r22, 0x09	; 9
    18a0:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
											LCD_SEND_STRING("OFF");
    18a4:	c8 01       	movw	r24, r16
    18a6:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
										}
										LCD_Move_Cursor(2,1);
    18aa:	82 e0       	ldi	r24, 0x02	; 2
    18ac:	61 e0       	ldi	r22, 0x01	; 1
    18ae:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
										LCD_SEND_STRING("1-ON 2-OFF 0-RET");
    18b2:	c6 01       	movw	r24, r12
    18b4:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
										do
										{
											option_check=KEYPAD_CHECK_PRESS();
    18b8:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <KEYPAD_CHECK_PRESS>
    18bc:	80 93 2b 02 	sts	0x022B, r24
										} while (option_check==0xff);
    18c0:	8f 3f       	cpi	r24, 0xFF	; 255
    18c2:	d1 f3       	breq	.-12     	; 0x18b8 <main+0xe52>
    18c4:	2f ef       	ldi	r18, 0xFF	; 255
    18c6:	30 e7       	ldi	r19, 0x70	; 112
    18c8:	42 e0       	ldi	r20, 0x02	; 2
    18ca:	21 50       	subi	r18, 0x01	; 1
    18cc:	30 40       	sbci	r19, 0x00	; 0
    18ce:	40 40       	sbci	r20, 0x00	; 0
    18d0:	e1 f7       	brne	.-8      	; 0x18ca <main+0xe64>
    18d2:	00 c0       	rjmp	.+0      	; 0x18d4 <main+0xe6e>
    18d4:	00 00       	nop
										_delay_ms(100);
										if(option_check=='1')
    18d6:	81 33       	cpi	r24, 0x31	; 49
    18d8:	59 f4       	brne	.+22     	; 0x18f0 <main+0xe8a>
										{
											SPI_MasterTransmitchar(1);
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
												LCD_Move_Cursor(1,9);
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	69 e0       	ldi	r22, 0x09	; 9
    18e4:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
												LCD_SEND_STRING("ON ");
    18e8:	c7 01       	movw	r24, r14
    18ea:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    18ee:	25 c0       	rjmp	.+74     	; 0x193a <main+0xed4>
										}
										else if(option_check=='2')
    18f0:	82 33       	cpi	r24, 0x32	; 50
    18f2:	59 f4       	brne	.+22     	; 0x190a <main+0xea4>
										{
											SPI_MasterTransmitchar(0);
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
												LCD_Move_Cursor(1,9);
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	69 e0       	ldi	r22, 0x09	; 9
    18fe:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
												LCD_SEND_STRING("OFF");
    1902:	c8 01       	movw	r24, r16
    1904:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    1908:	18 c0       	rjmp	.+48     	; 0x193a <main+0xed4>
										}
										else if(option_check=='0')
    190a:	80 33       	cpi	r24, 0x30	; 48
    190c:	31 f4       	brne	.+12     	; 0x191a <main+0xeb4>
										{
											SPI_MasterTransmitchar(3);
    190e:	83 e0       	ldi	r24, 0x03	; 3
    1910:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
											LCD_CLR_SCREEN();
    1914:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
										    goto A;
    1918:	81 cf       	rjmp	.-254    	; 0x181c <main+0xdb6>
										}
										else
										{
											LCD_CLR_SCREEN();
    191a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
											LCD_SEND_STRING("Wrong Option");
    191e:	81 e4       	ldi	r24, 0x41	; 65
    1920:	91 e0       	ldi	r25, 0x01	; 1
    1922:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    1926:	8f ef       	ldi	r24, 0xFF	; 255
    1928:	99 e6       	ldi	r25, 0x69	; 105
    192a:	a8 e1       	ldi	r26, 0x18	; 24
    192c:	81 50       	subi	r24, 0x01	; 1
    192e:	90 40       	sbci	r25, 0x00	; 0
    1930:	a0 40       	sbci	r26, 0x00	; 0
    1932:	e1 f7       	brne	.-8      	; 0x192c <main+0xec6>
    1934:	00 c0       	rjmp	.+0      	; 0x1936 <main+0xed0>
    1936:	00 00       	nop
    1938:	71 cf       	rjmp	.-286    	; 0x181c <main+0xdb6>
								{
									case '1':
									SPI_MasterTransmitchar(1);
									LCD_CLR_SCREEN();
									LCD_SEND_STRING("ROOM1 S:");
									while(option_check!='0'||flag==0)
    193a:	80 91 2b 02 	lds	r24, 0x022B
    193e:	80 33       	cpi	r24, 0x30	; 48
    1940:	09 f0       	breq	.+2      	; 0x1944 <main+0xede>
    1942:	9c cf       	rjmp	.-200    	; 0x187c <main+0xe16>
    1944:	80 91 29 02 	lds	r24, 0x0229
    1948:	88 23       	and	r24, r24
    194a:	09 f4       	brne	.+2      	; 0x194e <main+0xee8>
    194c:	97 cf       	rjmp	.-210    	; 0x187c <main+0xe16>
    194e:	cd c8       	rjmp	.-3686   	; 0xaea <main+0x84>
											goto A;
										}
									}
									break;
									case '2':
										SPI_MasterTransmitchar(2);
    1950:	82 e0       	ldi	r24, 0x02	; 2
    1952:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
										LCD_CLR_SCREEN();
    1956:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
										LCD_SEND_STRING("ROOM2 S:");
    195a:	8e e4       	ldi	r24, 0x4E	; 78
    195c:	91 e0       	ldi	r25, 0x01	; 1
    195e:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
										while(option_check!=0||flag==0)
    1962:	5f c0       	rjmp	.+190    	; 0x1a22 <main+0xfbc>
										{
											status_check=SPI_MasterTransmitchar(0xff);
    1964:	8f ef       	ldi	r24, 0xFF	; 255
    1966:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
    196a:	80 93 2c 02 	sts	0x022C, r24
											if(status_check==1)
    196e:	81 30       	cpi	r24, 0x01	; 1
    1970:	39 f4       	brne	.+14     	; 0x1980 <main+0xf1a>
											{
												LCD_Move_Cursor(1,9);
    1972:	69 e0       	ldi	r22, 0x09	; 9
    1974:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
												LCD_SEND_STRING("ON ");
    1978:	c7 01       	movw	r24, r14
    197a:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    197e:	09 c0       	rjmp	.+18     	; 0x1992 <main+0xf2c>
											}
											else if(status_check==0)
    1980:	88 23       	and	r24, r24
    1982:	39 f4       	brne	.+14     	; 0x1992 <main+0xf2c>
											{
												LCD_Move_Cursor(1,9);
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	69 e0       	ldi	r22, 0x09	; 9
    1988:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
												LCD_SEND_STRING("OFF");
    198c:	c8 01       	movw	r24, r16
    198e:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
											}
											LCD_Move_Cursor(2,1);
    1992:	82 e0       	ldi	r24, 0x02	; 2
    1994:	61 e0       	ldi	r22, 0x01	; 1
    1996:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
											LCD_SEND_STRING("1-ON 2-OFF 0-RET");
    199a:	c6 01       	movw	r24, r12
    199c:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
											do
											{
												option_check=KEYPAD_CHECK_PRESS();
    19a0:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <KEYPAD_CHECK_PRESS>
    19a4:	80 93 2b 02 	sts	0x022B, r24
											} while (option_check==0xff);
    19a8:	8f 3f       	cpi	r24, 0xFF	; 255
    19aa:	d1 f3       	breq	.-12     	; 0x19a0 <main+0xf3a>
    19ac:	2f ef       	ldi	r18, 0xFF	; 255
    19ae:	30 e7       	ldi	r19, 0x70	; 112
    19b0:	42 e0       	ldi	r20, 0x02	; 2
    19b2:	21 50       	subi	r18, 0x01	; 1
    19b4:	30 40       	sbci	r19, 0x00	; 0
    19b6:	40 40       	sbci	r20, 0x00	; 0
    19b8:	e1 f7       	brne	.-8      	; 0x19b2 <main+0xf4c>
    19ba:	00 c0       	rjmp	.+0      	; 0x19bc <main+0xf56>
    19bc:	00 00       	nop
											_delay_ms(100);
											if(option_check=='1')
    19be:	81 33       	cpi	r24, 0x31	; 49
    19c0:	59 f4       	brne	.+22     	; 0x19d8 <main+0xf72>
											{
												SPI_MasterTransmitchar(1);
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
													LCD_Move_Cursor(1,9);
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	69 e0       	ldi	r22, 0x09	; 9
    19cc:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
													LCD_SEND_STRING("ON ");
    19d0:	c7 01       	movw	r24, r14
    19d2:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    19d6:	25 c0       	rjmp	.+74     	; 0x1a22 <main+0xfbc>
											}
											else if(option_check=='2')
    19d8:	82 33       	cpi	r24, 0x32	; 50
    19da:	59 f4       	brne	.+22     	; 0x19f2 <main+0xf8c>
											{
												SPI_MasterTransmitchar(0);
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
													LCD_Move_Cursor(1,9);
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	69 e0       	ldi	r22, 0x09	; 9
    19e6:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
													LCD_SEND_STRING("OFF");
    19ea:	c8 01       	movw	r24, r16
    19ec:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    19f0:	18 c0       	rjmp	.+48     	; 0x1a22 <main+0xfbc>
											}
											else if(option_check=='0')
    19f2:	80 33       	cpi	r24, 0x30	; 48
    19f4:	31 f4       	brne	.+12     	; 0x1a02 <main+0xf9c>
											{
												SPI_MasterTransmitchar(3);
    19f6:	83 e0       	ldi	r24, 0x03	; 3
    19f8:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
												LCD_CLR_SCREEN();
    19fc:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
												goto A;
    1a00:	0d cf       	rjmp	.-486    	; 0x181c <main+0xdb6>
											}
											else
											{
												LCD_CLR_SCREEN();
    1a02:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
												LCD_SEND_STRING("Wrong Option");
    1a06:	81 e4       	ldi	r24, 0x41	; 65
    1a08:	91 e0       	ldi	r25, 0x01	; 1
    1a0a:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    1a0e:	8f ef       	ldi	r24, 0xFF	; 255
    1a10:	99 e6       	ldi	r25, 0x69	; 105
    1a12:	a8 e1       	ldi	r26, 0x18	; 24
    1a14:	81 50       	subi	r24, 0x01	; 1
    1a16:	90 40       	sbci	r25, 0x00	; 0
    1a18:	a0 40       	sbci	r26, 0x00	; 0
    1a1a:	e1 f7       	brne	.-8      	; 0x1a14 <main+0xfae>
    1a1c:	00 c0       	rjmp	.+0      	; 0x1a1e <main+0xfb8>
    1a1e:	00 00       	nop
    1a20:	fd ce       	rjmp	.-518    	; 0x181c <main+0xdb6>
									break;
									case '2':
										SPI_MasterTransmitchar(2);
										LCD_CLR_SCREEN();
										LCD_SEND_STRING("ROOM2 S:");
										while(option_check!=0||flag==0)
    1a22:	80 91 2b 02 	lds	r24, 0x022B
    1a26:	88 23       	and	r24, r24
    1a28:	09 f0       	breq	.+2      	; 0x1a2c <main+0xfc6>
    1a2a:	9c cf       	rjmp	.-200    	; 0x1964 <main+0xefe>
    1a2c:	80 91 29 02 	lds	r24, 0x0229
    1a30:	88 23       	and	r24, r24
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <main+0xfd0>
    1a34:	97 cf       	rjmp	.-210    	; 0x1964 <main+0xefe>
    1a36:	59 c8       	rjmp	.-3918   	; 0xaea <main+0x84>
												goto A;
											}
										}
										break;
										case '3':
										SPI_MasterTransmitchar(3);
    1a38:	83 e0       	ldi	r24, 0x03	; 3
    1a3a:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
										LCD_CLR_SCREEN();
    1a3e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
										LCD_SEND_STRING("ROOM3 S:");
    1a42:	87 e5       	ldi	r24, 0x57	; 87
    1a44:	91 e0       	ldi	r25, 0x01	; 1
    1a46:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
										while(option_check!=0||flag==0)
    1a4a:	5f c0       	rjmp	.+190    	; 0x1b0a <main+0x10a4>
										{
											status_check=SPI_MasterTransmitchar(0xff);
    1a4c:	8f ef       	ldi	r24, 0xFF	; 255
    1a4e:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
    1a52:	80 93 2c 02 	sts	0x022C, r24
											if(status_check==1)
    1a56:	81 30       	cpi	r24, 0x01	; 1
    1a58:	39 f4       	brne	.+14     	; 0x1a68 <main+0x1002>
											{
												LCD_Move_Cursor(1,9);
    1a5a:	69 e0       	ldi	r22, 0x09	; 9
    1a5c:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
												LCD_SEND_STRING("ON ");
    1a60:	c7 01       	movw	r24, r14
    1a62:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    1a66:	09 c0       	rjmp	.+18     	; 0x1a7a <main+0x1014>
											}
											else if(status_check==0)
    1a68:	88 23       	and	r24, r24
    1a6a:	39 f4       	brne	.+14     	; 0x1a7a <main+0x1014>
											{
												LCD_Move_Cursor(1,9);
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	69 e0       	ldi	r22, 0x09	; 9
    1a70:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
												LCD_SEND_STRING("OFF");
    1a74:	c8 01       	movw	r24, r16
    1a76:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
											}
											LCD_Move_Cursor(2,1);
    1a7a:	82 e0       	ldi	r24, 0x02	; 2
    1a7c:	61 e0       	ldi	r22, 0x01	; 1
    1a7e:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
											LCD_SEND_STRING("1-ON 2-OFF 0-RET");
    1a82:	c6 01       	movw	r24, r12
    1a84:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
											do
											{
												option_check=KEYPAD_CHECK_PRESS();
    1a88:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <KEYPAD_CHECK_PRESS>
    1a8c:	80 93 2b 02 	sts	0x022B, r24
											} while (option_check==0xff);
    1a90:	8f 3f       	cpi	r24, 0xFF	; 255
    1a92:	d1 f3       	breq	.-12     	; 0x1a88 <main+0x1022>
    1a94:	2f ef       	ldi	r18, 0xFF	; 255
    1a96:	30 e7       	ldi	r19, 0x70	; 112
    1a98:	42 e0       	ldi	r20, 0x02	; 2
    1a9a:	21 50       	subi	r18, 0x01	; 1
    1a9c:	30 40       	sbci	r19, 0x00	; 0
    1a9e:	40 40       	sbci	r20, 0x00	; 0
    1aa0:	e1 f7       	brne	.-8      	; 0x1a9a <main+0x1034>
    1aa2:	00 c0       	rjmp	.+0      	; 0x1aa4 <main+0x103e>
    1aa4:	00 00       	nop
											_delay_ms(100);
											if(option_check=='1')
    1aa6:	81 33       	cpi	r24, 0x31	; 49
    1aa8:	59 f4       	brne	.+22     	; 0x1ac0 <main+0x105a>
											{
												SPI_MasterTransmitchar(1);
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
												LCD_Move_Cursor(1,9);
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	69 e0       	ldi	r22, 0x09	; 9
    1ab4:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
												LCD_SEND_STRING("ON ");
    1ab8:	c7 01       	movw	r24, r14
    1aba:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    1abe:	25 c0       	rjmp	.+74     	; 0x1b0a <main+0x10a4>
											}
											else if(option_check=='2')
    1ac0:	82 33       	cpi	r24, 0x32	; 50
    1ac2:	59 f4       	brne	.+22     	; 0x1ada <main+0x1074>
											{
												SPI_MasterTransmitchar(0);
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
												LCD_Move_Cursor(1,9);
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	69 e0       	ldi	r22, 0x09	; 9
    1ace:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
												LCD_SEND_STRING("OFF");
    1ad2:	c8 01       	movw	r24, r16
    1ad4:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    1ad8:	18 c0       	rjmp	.+48     	; 0x1b0a <main+0x10a4>
											}
											else if(option_check=='0')
    1ada:	80 33       	cpi	r24, 0x30	; 48
    1adc:	31 f4       	brne	.+12     	; 0x1aea <main+0x1084>
											{
												SPI_MasterTransmitchar(3);
    1ade:	83 e0       	ldi	r24, 0x03	; 3
    1ae0:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
												LCD_CLR_SCREEN();
    1ae4:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
												goto A;
    1ae8:	99 ce       	rjmp	.-718    	; 0x181c <main+0xdb6>
											}
											else
											{
												LCD_CLR_SCREEN();
    1aea:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
												LCD_SEND_STRING("Wrong Option");
    1aee:	81 e4       	ldi	r24, 0x41	; 65
    1af0:	91 e0       	ldi	r25, 0x01	; 1
    1af2:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    1af6:	8f ef       	ldi	r24, 0xFF	; 255
    1af8:	99 e6       	ldi	r25, 0x69	; 105
    1afa:	a8 e1       	ldi	r26, 0x18	; 24
    1afc:	81 50       	subi	r24, 0x01	; 1
    1afe:	90 40       	sbci	r25, 0x00	; 0
    1b00:	a0 40       	sbci	r26, 0x00	; 0
    1b02:	e1 f7       	brne	.-8      	; 0x1afc <main+0x1096>
    1b04:	00 c0       	rjmp	.+0      	; 0x1b06 <main+0x10a0>
    1b06:	00 00       	nop
    1b08:	89 ce       	rjmp	.-750    	; 0x181c <main+0xdb6>
										break;
										case '3':
										SPI_MasterTransmitchar(3);
										LCD_CLR_SCREEN();
										LCD_SEND_STRING("ROOM3 S:");
										while(option_check!=0||flag==0)
    1b0a:	80 91 2b 02 	lds	r24, 0x022B
    1b0e:	88 23       	and	r24, r24
    1b10:	09 f0       	breq	.+2      	; 0x1b14 <main+0x10ae>
    1b12:	9c cf       	rjmp	.-200    	; 0x1a4c <main+0xfe6>
    1b14:	80 91 29 02 	lds	r24, 0x0229
    1b18:	88 23       	and	r24, r24
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <main+0x10b8>
    1b1c:	97 cf       	rjmp	.-210    	; 0x1a4c <main+0xfe6>
    1b1e:	0c 94 75 05 	jmp	0xaea	; 0xaea <main+0x84>
												goto A;
											}
										}
										break;
										case '4':
										SPI_MasterTransmitchar(4);
    1b22:	84 e0       	ldi	r24, 0x04	; 4
    1b24:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
										LCD_CLR_SCREEN();
    1b28:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
										LCD_SEND_STRING("ROOM4 S:");
    1b2c:	8f e7       	ldi	r24, 0x7F	; 127
    1b2e:	91 e0       	ldi	r25, 0x01	; 1
    1b30:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
										while(option_check!=0||flag==0)
    1b34:	5f c0       	rjmp	.+190    	; 0x1bf4 <main+0x118e>
										{
											status_check=SPI_MasterTransmitchar(0xff);
    1b36:	8f ef       	ldi	r24, 0xFF	; 255
    1b38:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
    1b3c:	80 93 2c 02 	sts	0x022C, r24
											if(status_check==1)
    1b40:	81 30       	cpi	r24, 0x01	; 1
    1b42:	39 f4       	brne	.+14     	; 0x1b52 <main+0x10ec>
											{
												LCD_Move_Cursor(1,9);
    1b44:	69 e0       	ldi	r22, 0x09	; 9
    1b46:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
												LCD_SEND_STRING("ON ");
    1b4a:	c7 01       	movw	r24, r14
    1b4c:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    1b50:	09 c0       	rjmp	.+18     	; 0x1b64 <main+0x10fe>
											}
											else if(status_check==0)
    1b52:	88 23       	and	r24, r24
    1b54:	39 f4       	brne	.+14     	; 0x1b64 <main+0x10fe>
											{
												LCD_Move_Cursor(1,9);
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	69 e0       	ldi	r22, 0x09	; 9
    1b5a:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
												LCD_SEND_STRING("OFF");
    1b5e:	c8 01       	movw	r24, r16
    1b60:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
											}
											LCD_Move_Cursor(2,1);
    1b64:	82 e0       	ldi	r24, 0x02	; 2
    1b66:	61 e0       	ldi	r22, 0x01	; 1
    1b68:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
											LCD_SEND_STRING("1-ON 2-OFF 0-RET");
    1b6c:	c6 01       	movw	r24, r12
    1b6e:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
											do
											{
												option_check=KEYPAD_CHECK_PRESS();
    1b72:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <KEYPAD_CHECK_PRESS>
    1b76:	80 93 2b 02 	sts	0x022B, r24
											} while (option_check==0xff);
    1b7a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b7c:	d1 f3       	breq	.-12     	; 0x1b72 <main+0x110c>
    1b7e:	2f ef       	ldi	r18, 0xFF	; 255
    1b80:	30 e7       	ldi	r19, 0x70	; 112
    1b82:	42 e0       	ldi	r20, 0x02	; 2
    1b84:	21 50       	subi	r18, 0x01	; 1
    1b86:	30 40       	sbci	r19, 0x00	; 0
    1b88:	40 40       	sbci	r20, 0x00	; 0
    1b8a:	e1 f7       	brne	.-8      	; 0x1b84 <main+0x111e>
    1b8c:	00 c0       	rjmp	.+0      	; 0x1b8e <main+0x1128>
    1b8e:	00 00       	nop
											_delay_ms(100);
											if(option_check=='1')
    1b90:	81 33       	cpi	r24, 0x31	; 49
    1b92:	59 f4       	brne	.+22     	; 0x1baa <main+0x1144>
											{
												SPI_MasterTransmitchar(1);
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
												LCD_Move_Cursor(1,9);
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	69 e0       	ldi	r22, 0x09	; 9
    1b9e:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
												LCD_SEND_STRING("ON ");
    1ba2:	c7 01       	movw	r24, r14
    1ba4:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    1ba8:	25 c0       	rjmp	.+74     	; 0x1bf4 <main+0x118e>
											}
											else if(option_check=='2')
    1baa:	82 33       	cpi	r24, 0x32	; 50
    1bac:	59 f4       	brne	.+22     	; 0x1bc4 <main+0x115e>
											{
												SPI_MasterTransmitchar(0);
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
												LCD_Move_Cursor(1,9);
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	69 e0       	ldi	r22, 0x09	; 9
    1bb8:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
												LCD_SEND_STRING("OFF");
    1bbc:	c8 01       	movw	r24, r16
    1bbe:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    1bc2:	18 c0       	rjmp	.+48     	; 0x1bf4 <main+0x118e>
											}
											else if(option_check=='0')
    1bc4:	80 33       	cpi	r24, 0x30	; 48
    1bc6:	31 f4       	brne	.+12     	; 0x1bd4 <main+0x116e>
											{
												SPI_MasterTransmitchar(3);
    1bc8:	83 e0       	ldi	r24, 0x03	; 3
    1bca:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
												LCD_CLR_SCREEN();
    1bce:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
												goto A;
    1bd2:	24 ce       	rjmp	.-952    	; 0x181c <main+0xdb6>
											}
											else 
											{
												LCD_CLR_SCREEN();
    1bd4:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
												LCD_SEND_STRING("Wrong Option");
    1bd8:	81 e4       	ldi	r24, 0x41	; 65
    1bda:	91 e0       	ldi	r25, 0x01	; 1
    1bdc:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    1be0:	8f ef       	ldi	r24, 0xFF	; 255
    1be2:	99 e6       	ldi	r25, 0x69	; 105
    1be4:	a8 e1       	ldi	r26, 0x18	; 24
    1be6:	81 50       	subi	r24, 0x01	; 1
    1be8:	90 40       	sbci	r25, 0x00	; 0
    1bea:	a0 40       	sbci	r26, 0x00	; 0
    1bec:	e1 f7       	brne	.-8      	; 0x1be6 <main+0x1180>
    1bee:	00 c0       	rjmp	.+0      	; 0x1bf0 <main+0x118a>
    1bf0:	00 00       	nop
    1bf2:	14 ce       	rjmp	.-984    	; 0x181c <main+0xdb6>
										break;
										case '4':
										SPI_MasterTransmitchar(4);
										LCD_CLR_SCREEN();
										LCD_SEND_STRING("ROOM4 S:");
										while(option_check!=0||flag==0)
    1bf4:	80 91 2b 02 	lds	r24, 0x022B
    1bf8:	88 23       	and	r24, r24
    1bfa:	09 f0       	breq	.+2      	; 0x1bfe <main+0x1198>
    1bfc:	9c cf       	rjmp	.-200    	; 0x1b36 <main+0x10d0>
    1bfe:	80 91 29 02 	lds	r24, 0x0229
    1c02:	88 23       	and	r24, r24
    1c04:	09 f4       	brne	.+2      	; 0x1c08 <main+0x11a2>
    1c06:	97 cf       	rjmp	.-210    	; 0x1b36 <main+0x10d0>
    1c08:	0c 94 75 05 	jmp	0xaea	; 0xaea <main+0x84>
												goto A;
											}
										}
										break;
										default:
										LCD_CLR_SCREEN();
    1c0c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
										LCD_SEND_STRING("Wrong Option");
    1c10:	81 e4       	ldi	r24, 0x41	; 65
    1c12:	91 e0       	ldi	r25, 0x01	; 1
    1c14:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    1c18:	2f ef       	ldi	r18, 0xFF	; 255
    1c1a:	39 e6       	ldi	r19, 0x69	; 105
    1c1c:	48 e1       	ldi	r20, 0x18	; 24
    1c1e:	21 50       	subi	r18, 0x01	; 1
    1c20:	30 40       	sbci	r19, 0x00	; 0
    1c22:	40 40       	sbci	r20, 0x00	; 0
    1c24:	e1 f7       	brne	.-8      	; 0x1c1e <main+0x11b8>
    1c26:	00 c0       	rjmp	.+0      	; 0x1c28 <main+0x11c2>
    1c28:	00 00       	nop
    1c2a:	f8 cd       	rjmp	.-1040   	; 0x181c <main+0xdb6>
								}
							/*I will continue this code later*/
						}//for right password
						else
						{
							LCD_CLR_SCREEN();
    1c2c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
							LCD_SEND_STRING("Wrong Password!!!");
    1c30:	8f eb       	ldi	r24, 0xBF	; 191
    1c32:	91 e0       	ldi	r25, 0x01	; 1
    1c34:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    1c38:	8f ef       	ldi	r24, 0xFF	; 255
    1c3a:	94 e3       	ldi	r25, 0x34	; 52
    1c3c:	ac e0       	ldi	r26, 0x0C	; 12
    1c3e:	81 50       	subi	r24, 0x01	; 1
    1c40:	90 40       	sbci	r25, 0x00	; 0
    1c42:	a0 40       	sbci	r26, 0x00	; 0
    1c44:	e1 f7       	brne	.-8      	; 0x1c3e <main+0x11d8>
    1c46:	00 c0       	rjmp	.+0      	; 0x1c48 <main+0x11e2>
    1c48:	00 00       	nop
							_delay_ms(500);
							if(tries>0)
    1c4a:	80 91 3d 02 	lds	r24, 0x023D
    1c4e:	88 23       	and	r24, r24
    1c50:	11 f1       	breq	.+68     	; 0x1c96 <main+0x1230>
							{
								tries--;
    1c52:	81 50       	subi	r24, 0x01	; 1
    1c54:	80 93 3d 02 	sts	0x023D, r24
								LCD_CLR_SCREEN();
    1c58:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
								LCD_SEND_STRING("Tries Left:");
    1c5c:	81 ed       	ldi	r24, 0xD1	; 209
    1c5e:	91 e0       	ldi	r25, 0x01	; 1
    1c60:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
								LCD_Move_Cursor(1,12);
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	6c e0       	ldi	r22, 0x0C	; 12
    1c68:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
								LCD_SEND_char('A',tries+48);
    1c6c:	60 91 3d 02 	lds	r22, 0x023D
    1c70:	60 5d       	subi	r22, 0xD0	; 208
    1c72:	81 e4       	ldi	r24, 0x41	; 65
    1c74:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_SEND_char>
    1c78:	2f ef       	ldi	r18, 0xFF	; 255
    1c7a:	39 e6       	ldi	r19, 0x69	; 105
    1c7c:	48 e1       	ldi	r20, 0x18	; 24
    1c7e:	21 50       	subi	r18, 0x01	; 1
    1c80:	30 40       	sbci	r19, 0x00	; 0
    1c82:	40 40       	sbci	r20, 0x00	; 0
    1c84:	e1 f7       	brne	.-8      	; 0x1c7e <main+0x1218>
    1c86:	00 c0       	rjmp	.+0      	; 0x1c88 <main+0x1222>
    1c88:	00 00       	nop
								_delay_ms(1000);
							}
							if(tries<=0)
    1c8a:	80 91 3d 02 	lds	r24, 0x023D
    1c8e:	88 23       	and	r24, r24
    1c90:	11 f0       	breq	.+4      	; 0x1c96 <main+0x1230>
    1c92:	0c 94 75 05 	jmp	0xaea	; 0xaea <main+0x84>
							{
								LCD_CLR_SCREEN();
    1c96:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
								LCD_SEND_STRING("YOU ARE BLOCKED");
    1c9a:	8d ed       	ldi	r24, 0xDD	; 221
    1c9c:	91 e0       	ldi	r25, 0x01	; 1
    1c9e:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
								EEPROM_WRITE(EEPROM_BLOCK,0x01);
    1ca2:	88 e0       	ldi	r24, 0x08	; 8
    1ca4:	91 e0       	ldi	r25, 0x01	; 1
    1ca6:	61 e0       	ldi	r22, 0x01	; 1
    1ca8:	0e 94 96 03 	call	0x72c	; 0x72c <EEPROM_WRITE>
    1cac:	8f ef       	ldi	r24, 0xFF	; 255
    1cae:	9e e9       	ldi	r25, 0x9E	; 158
    1cb0:	a4 e2       	ldi	r26, 0x24	; 36
    1cb2:	81 50       	subi	r24, 0x01	; 1
    1cb4:	90 40       	sbci	r25, 0x00	; 0
    1cb6:	a0 40       	sbci	r26, 0x00	; 0
    1cb8:	e1 f7       	brne	.-8      	; 0x1cb2 <main+0x124c>
    1cba:	00 c0       	rjmp	.+0      	; 0x1cbc <main+0x1256>
    1cbc:	00 00       	nop
								_delay_ms(1500);
								if(EEPROM_READ(EEPROM_BLOCK)==0x01)
    1cbe:	88 e0       	ldi	r24, 0x08	; 8
    1cc0:	91 e0       	ldi	r25, 0x01	; 1
    1cc2:	0e 94 9e 03 	call	0x73c	; 0x73c <EEPROM_READ>
    1cc6:	81 30       	cpi	r24, 0x01	; 1
    1cc8:	21 f4       	brne	.+8      	; 0x1cd2 <main+0x126c>
								{
									LED_ON('A',3);
    1cca:	81 e4       	ldi	r24, 0x41	; 65
    1ccc:	63 e0       	ldi	r22, 0x03	; 3
    1cce:	0e 94 25 05 	call	0xa4a	; 0xa4a <LED_ON>
								}
								LCD_CLR_SCREEN();
    1cd2:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
								unsigned char block_time=10;
								LCD_SEND_STRING("Wait    Sec");
    1cd6:	8d ee       	ldi	r24, 0xED	; 237
    1cd8:	91 e0       	ldi	r25, 0x01	; 1
    1cda:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
								if(EEPROM_READ(EEPROM_BLOCK)==0x01)
								{
									LED_ON('A',3);
								}
								LCD_CLR_SCREEN();
								unsigned char block_time=10;
    1cde:	0f 2e       	mov	r0, r31
    1ce0:	fa e0       	ldi	r31, 0x0A	; 10
    1ce2:	cf 2e       	mov	r12, r31
    1ce4:	f0 2d       	mov	r31, r0
								LCD_SEND_STRING("Wait    Sec");
								while(block_time>0)
								{
									LCD_Move_Cursor(1,6);
									LCD_SEND_char('A',(block_time/10)+48);
    1ce6:	0f 2e       	mov	r0, r31
    1ce8:	fa e0       	ldi	r31, 0x0A	; 10
    1cea:	df 2e       	mov	r13, r31
    1cec:	f0 2d       	mov	r31, r0
								LCD_CLR_SCREEN();
								unsigned char block_time=10;
								LCD_SEND_STRING("Wait    Sec");
								while(block_time>0)
								{
									LCD_Move_Cursor(1,6);
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	66 e0       	ldi	r22, 0x06	; 6
    1cf2:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
									LCD_SEND_char('A',(block_time/10)+48);
    1cf6:	8c 2d       	mov	r24, r12
    1cf8:	6d 2d       	mov	r22, r13
    1cfa:	0e 94 40 12 	call	0x2480	; 0x2480 <__udivmodqi4>
    1cfe:	a9 2e       	mov	r10, r25
    1d00:	68 2f       	mov	r22, r24
    1d02:	60 5d       	subi	r22, 0xD0	; 208
    1d04:	81 e4       	ldi	r24, 0x41	; 65
    1d06:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_SEND_char>
									LCD_SEND_char('A',(block_time%10)+48);
    1d0a:	6a 2d       	mov	r22, r10
    1d0c:	60 5d       	subi	r22, 0xD0	; 208
    1d0e:	81 e4       	ldi	r24, 0x41	; 65
    1d10:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_SEND_char>
    1d14:	2f ef       	ldi	r18, 0xFF	; 255
    1d16:	39 e6       	ldi	r19, 0x69	; 105
    1d18:	48 e1       	ldi	r20, 0x18	; 24
    1d1a:	21 50       	subi	r18, 0x01	; 1
    1d1c:	30 40       	sbci	r19, 0x00	; 0
    1d1e:	40 40       	sbci	r20, 0x00	; 0
    1d20:	e1 f7       	brne	.-8      	; 0x1d1a <main+0x12b4>
    1d22:	00 c0       	rjmp	.+0      	; 0x1d24 <main+0x12be>
    1d24:	00 00       	nop
									_delay_ms(1000);
									block_time--;
    1d26:	ca 94       	dec	r12
									LED_ON('A',3);
								}
								LCD_CLR_SCREEN();
								unsigned char block_time=10;
								LCD_SEND_STRING("Wait    Sec");
								while(block_time>0)
    1d28:	11 f7       	brne	.-60     	; 0x1cee <main+0x1288>
									LCD_SEND_char('A',(block_time/10)+48);
									LCD_SEND_char('A',(block_time%10)+48);
									_delay_ms(1000);
									block_time--;
								}
								EEPROM_WRITE(EEPROM_BLOCK,0xFF);
    1d2a:	88 e0       	ldi	r24, 0x08	; 8
    1d2c:	91 e0       	ldi	r25, 0x01	; 1
    1d2e:	6f ef       	ldi	r22, 0xFF	; 255
    1d30:	0e 94 96 03 	call	0x72c	; 0x72c <EEPROM_WRITE>
								if(EEPROM_READ(EEPROM_BLOCK)==0xFF)
    1d34:	88 e0       	ldi	r24, 0x08	; 8
    1d36:	91 e0       	ldi	r25, 0x01	; 1
    1d38:	0e 94 9e 03 	call	0x73c	; 0x73c <EEPROM_READ>
    1d3c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d3e:	21 f4       	brne	.+8      	; 0x1d48 <main+0x12e2>
								{
									LED_OFF('A',3);
    1d40:	81 e4       	ldi	r24, 0x41	; 65
    1d42:	63 e0       	ldi	r22, 0x03	; 3
    1d44:	0e 94 29 05 	call	0xa52	; 0xa52 <LED_OFF>
								}
								LCD_CLR_SCREEN();
    1d48:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
    1d4c:	0c 94 75 05 	jmp	0xaea	; 0xaea <main+0x84>
    while(1)
    { 
		 /*Set admin Pass*/
         if((EEPROM_READ(EEPROM_ADMIN_STATUS)==0xFF)||(EEPROM_READ(EEPROM_GUEST_STATUS)==0xFF))
		 {
			 LCD_SEND_STRING("Login For");
    1d50:	8f e8       	ldi	r24, 0x8F	; 143
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
			 LCD_Move_Cursor(2,1);
    1d58:	82 e0       	ldi	r24, 0x02	; 2
    1d5a:	61 e0       	ldi	r22, 0x01	; 1
    1d5c:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
			 LCD_SEND_STRING("First Time!!");
    1d60:	89 e9       	ldi	r24, 0x99	; 153
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
    1d68:	8f ef       	ldi	r24, 0xFF	; 255
    1d6a:	99 e6       	ldi	r25, 0x69	; 105
    1d6c:	a8 e1       	ldi	r26, 0x18	; 24
    1d6e:	81 50       	subi	r24, 0x01	; 1
    1d70:	90 40       	sbci	r25, 0x00	; 0
    1d72:	a0 40       	sbci	r26, 0x00	; 0
    1d74:	e1 f7       	brne	.-8      	; 0x1d6e <main+0x1308>
    1d76:	00 c0       	rjmp	.+0      	; 0x1d78 <main+0x1312>
    1d78:	00 00       	nop
			 _delay_ms(1000);
			 LCD_CLR_SCREEN();
    1d7a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
			 LCD_SEND_STRING("Set Admin");
    1d7e:	86 ea       	ldi	r24, 0xA6	; 166
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
			 LCD_Move_Cursor(2,1);
    1d86:	82 e0       	ldi	r24, 0x02	; 2
    1d88:	61 e0       	ldi	r22, 0x01	; 1
    1d8a:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
			 LCD_SEND_STRING("Pass:");
    1d8e:	80 eb       	ldi	r24, 0xB0	; 176
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
			 LCD_Move_Cursor(2,6);
    1d96:	82 e0       	ldi	r24, 0x02	; 2
    1d98:	66 e0       	ldi	r22, 0x06	; 6
    1d9a:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_Move_Cursor>
			 for(i=0;i<=3;i++)
    1d9e:	10 92 3c 02 	sts	0x023C, r1
    1da2:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <main+0xf4>

00001da6 <__vector_10>:
                }
			}
    }//End of While(1) 
}//End of main()
ISR(TIMER0_COMP_vect)
{
    1da6:	1f 92       	push	r1
    1da8:	0f 92       	push	r0
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	0f 92       	push	r0
    1dae:	11 24       	eor	r1, r1
    1db0:	2f 93       	push	r18
    1db2:	3f 93       	push	r19
    1db4:	4f 93       	push	r20
    1db6:	5f 93       	push	r21
    1db8:	6f 93       	push	r22
    1dba:	7f 93       	push	r23
    1dbc:	8f 93       	push	r24
    1dbe:	9f 93       	push	r25
    1dc0:	af 93       	push	r26
    1dc2:	bf 93       	push	r27
    1dc4:	ef 93       	push	r30
    1dc6:	ff 93       	push	r31
	counter_timer0++;
    1dc8:	80 91 3a 02 	lds	r24, 0x023A
    1dcc:	90 91 3b 02 	lds	r25, 0x023B
    1dd0:	01 96       	adiw	r24, 0x01	; 1
    1dd2:	90 93 3b 02 	sts	0x023B, r25
    1dd6:	80 93 3a 02 	sts	0x023A, r24
	if(counter_timer0==20000)
    1dda:	80 91 3a 02 	lds	r24, 0x023A
    1dde:	90 91 3b 02 	lds	r25, 0x023B
    1de2:	2e e4       	ldi	r18, 0x4E	; 78
    1de4:	80 32       	cpi	r24, 0x20	; 32
    1de6:	92 07       	cpc	r25, r18
    1de8:	89 f5       	brne	.+98     	; 0x1e4c <__vector_10+0xa6>
	{
		LCD_CLR_SCREEN();
    1dea:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCD_CLR_SCREEN>
		LCD_SEND_STRING("Session Time Out");
    1dee:	85 e1       	ldi	r24, 0x15	; 21
    1df0:	92 e0       	ldi	r25, 0x02	; 2
    1df2:	0e 94 11 05 	call	0xa22	; 0xa22 <LCD_SEND_STRING>
		LED_OFF('A',1);
    1df6:	81 e4       	ldi	r24, 0x41	; 65
    1df8:	61 e0       	ldi	r22, 0x01	; 1
    1dfa:	0e 94 29 05 	call	0xa52	; 0xa52 <LED_OFF>
		LED_OFF('A',2);
    1dfe:	81 e4       	ldi	r24, 0x41	; 65
    1e00:	62 e0       	ldi	r22, 0x02	; 2
    1e02:	0e 94 29 05 	call	0xa52	; 0xa52 <LED_OFF>
    1e06:	8f ef       	ldi	r24, 0xFF	; 255
    1e08:	99 e6       	ldi	r25, 0x69	; 105
    1e0a:	a8 e1       	ldi	r26, 0x18	; 24
    1e0c:	81 50       	subi	r24, 0x01	; 1
    1e0e:	90 40       	sbci	r25, 0x00	; 0
    1e10:	a0 40       	sbci	r26, 0x00	; 0
    1e12:	e1 f7       	brne	.-8      	; 0x1e0c <__vector_10+0x66>
    1e14:	00 c0       	rjmp	.+0      	; 0x1e16 <__vector_10+0x70>
    1e16:	00 00       	nop
		_delay_ms(1000);
		counter_timer0=0;
    1e18:	10 92 3b 02 	sts	0x023B, r1
    1e1c:	10 92 3a 02 	sts	0x023A, r1
		admin_login=0xff;
    1e20:	8f ef       	ldi	r24, 0xFF	; 255
    1e22:	80 93 30 02 	sts	0x0230, r24
		guest_login=0xff;
    1e26:	80 93 2f 02 	sts	0x022F, r24
		check_mode=0xff;
    1e2a:	80 93 2e 02 	sts	0x022E, r24
		tries;
		i=0;//pass counter
    1e2e:	10 92 3c 02 	sts	0x023C, r1
		room_check=0xff;
    1e32:	80 93 2d 02 	sts	0x022D, r24
		status_check=0xff;
    1e36:	80 93 2c 02 	sts	0x022C, r24
		option_check=0xff;
    1e3a:	80 93 2b 02 	sts	0x022B, r24
		TIMER0_STOP();
    1e3e:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <TIMER0_STOP>
		flag=1;
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	80 93 29 02 	sts	0x0229, r24
		main();
    1e48:	0e 94 33 05 	call	0xa66	; 0xa66 <main>
	}
    1e4c:	ff 91       	pop	r31
    1e4e:	ef 91       	pop	r30
    1e50:	bf 91       	pop	r27
    1e52:	af 91       	pop	r26
    1e54:	9f 91       	pop	r25
    1e56:	8f 91       	pop	r24
    1e58:	7f 91       	pop	r23
    1e5a:	6f 91       	pop	r22
    1e5c:	5f 91       	pop	r21
    1e5e:	4f 91       	pop	r20
    1e60:	3f 91       	pop	r19
    1e62:	2f 91       	pop	r18
    1e64:	0f 90       	pop	r0
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	0f 90       	pop	r0
    1e6a:	1f 90       	pop	r1
    1e6c:	18 95       	reti

00001e6e <SPI_vMasterInit>:
#include <avr/io.h>
#define F_CPU 8000000UL
#include <util/delay.h>
void SPI_vMasterInit(void)
{
	DIO_SET_PIN_DIR('B',4,1);//set SS,MOSI and SCK as output
    1e6e:	82 e4       	ldi	r24, 0x42	; 66
    1e70:	64 e0       	ldi	r22, 0x04	; 4
    1e72:	41 e0       	ldi	r20, 0x01	; 1
    1e74:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('B',5,1);
    1e78:	82 e4       	ldi	r24, 0x42	; 66
    1e7a:	65 e0       	ldi	r22, 0x05	; 5
    1e7c:	41 e0       	ldi	r20, 0x01	; 1
    1e7e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('B',7,1);
    1e82:	82 e4       	ldi	r24, 0x42	; 66
    1e84:	67 e0       	ldi	r22, 0x07	; 7
    1e86:	41 e0       	ldi	r20, 0x01	; 1
    1e88:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
	
	SET_BIT(SPCR,MSTR);//Enable Master mode
    1e8c:	6c 9a       	sbi	0x0d, 4	; 13
	
	SET_BIT(SPCR,SPR0);//Set clock fosc/16
    1e8e:	68 9a       	sbi	0x0d, 0	; 13
	
	SET_BIT(SPCR,SPE);//Enable SPI
    1e90:	6e 9a       	sbi	0x0d, 6	; 13
	
	DIO_WRITE_PIN('B',4,1);//make ss=1
    1e92:	82 e4       	ldi	r24, 0x42	; 66
    1e94:	64 e0       	ldi	r22, 0x04	; 4
    1e96:	41 e0       	ldi	r20, 0x01	; 1
    1e98:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
}
    1e9c:	08 95       	ret

00001e9e <SPI_vSlaveInit>:
void SPI_vSlaveInit(void)
{
	SET_BIT(SPCR,SPE);//Enable SPI
    1e9e:	6e 9a       	sbi	0x0d, 6	; 13
	
	DIO_SET_PIN_DIR('B',6,1);//Set MOSI as output
    1ea0:	82 e4       	ldi	r24, 0x42	; 66
    1ea2:	66 e0       	ldi	r22, 0x06	; 6
    1ea4:	41 e0       	ldi	r20, 0x01	; 1
    1ea6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SET_PIN_DIR>
}
    1eaa:	08 95       	ret

00001eac <SPI_MasterTransmitchar>:
unsigned char SPI_MasterTransmitchar(unsigned char data)
{
    1eac:	cf 93       	push	r28
    1eae:	c8 2f       	mov	r28, r24
	DIO_WRITE_PIN('B',4,0);//Clear SS to select specific SLAVE
    1eb0:	82 e4       	ldi	r24, 0x42	; 66
    1eb2:	64 e0       	ldi	r22, 0x04	; 4
    1eb4:	40 e0       	ldi	r20, 0x00	; 0
    1eb6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_WRITE_PIN>
	
	SPDR=data;
    1eba:	cf b9       	out	0x0f, r28	; 15
	while(READ_BIT(SPSR,SPIF)==0);
    1ebc:	77 9b       	sbis	0x0e, 7	; 14
    1ebe:	fe cf       	rjmp	.-4      	; 0x1ebc <SPI_MasterTransmitchar+0x10>
	return SPDR;
    1ec0:	8f b1       	in	r24, 0x0f	; 15
}
    1ec2:	cf 91       	pop	r28
    1ec4:	08 95       	ret

00001ec6 <SPI_SlaveReceivechar>:
unsigned char SPI_SlaveReceivechar(unsigned char data)
{
	SPDR=data;
    1ec6:	8f b9       	out	0x0f, r24	; 15
	while(READ_BIT(SPSR,SPIF)==0);
    1ec8:	77 9b       	sbis	0x0e, 7	; 14
    1eca:	fe cf       	rjmp	.-4      	; 0x1ec8 <SPI_SlaveReceivechar+0x2>
	return SPDR;
    1ecc:	8f b1       	in	r24, 0x0f	; 15
}
    1ece:	08 95       	ret

00001ed0 <SPI_MasterTransmitString>:
void SPI_MasterTransmitString(unsigned char* ptr)
{
    1ed0:	cf 93       	push	r28
    1ed2:	df 93       	push	r29
    1ed4:	ec 01       	movw	r28, r24
	while((*ptr)!=0)
    1ed6:	88 81       	ld	r24, Y
    1ed8:	88 23       	and	r24, r24
    1eda:	79 f0       	breq	.+30     	; 0x1efa <SPI_MasterTransmitString+0x2a>
{
	SPDR=data;
	while(READ_BIT(SPSR,SPIF)==0);
	return SPDR;
}
void SPI_MasterTransmitString(unsigned char* ptr)
    1edc:	21 96       	adiw	r28, 0x01	; 1
{
	while((*ptr)!=0)
	{
		SPI_MasterTransmitchar(*ptr);
    1ede:	0e 94 56 0f 	call	0x1eac	; 0x1eac <SPI_MasterTransmitchar>
    1ee2:	8f ef       	ldi	r24, 0xFF	; 255
    1ee4:	92 e5       	ldi	r25, 0x52	; 82
    1ee6:	a7 e0       	ldi	r26, 0x07	; 7
    1ee8:	81 50       	subi	r24, 0x01	; 1
    1eea:	90 40       	sbci	r25, 0x00	; 0
    1eec:	a0 40       	sbci	r26, 0x00	; 0
    1eee:	e1 f7       	brne	.-8      	; 0x1ee8 <SPI_MasterTransmitString+0x18>
    1ef0:	00 c0       	rjmp	.+0      	; 0x1ef2 <SPI_MasterTransmitString+0x22>
    1ef2:	00 00       	nop
	while(READ_BIT(SPSR,SPIF)==0);
	return SPDR;
}
void SPI_MasterTransmitString(unsigned char* ptr)
{
	while((*ptr)!=0)
    1ef4:	89 91       	ld	r24, Y+
    1ef6:	88 23       	and	r24, r24
    1ef8:	91 f7       	brne	.-28     	; 0x1ede <SPI_MasterTransmitString+0xe>
	{
		SPI_MasterTransmitchar(*ptr);
		_delay_ms(300);
		ptr++;
	}
    1efa:	df 91       	pop	r29
    1efc:	cf 91       	pop	r28
    1efe:	08 95       	ret

00001f00 <TIMER0_CTC_MODE_Init>:
#include "STD_MACROS.h"
#include <avr/io.h>
#include <avr/interrupt.h>
void TIMER0_CTC_MODE_Init(void)
{
	SET_BIT(TCCR0,WGM01);//Select CTC mode
    1f00:	83 b7       	in	r24, 0x33	; 51
    1f02:	88 60       	ori	r24, 0x08	; 8
    1f04:	83 bf       	out	0x33, r24	; 51
	
	SET_BIT(TCCR0,CS02);//Select clock/1024
    1f06:	83 b7       	in	r24, 0x33	; 51
    1f08:	84 60       	ori	r24, 0x04	; 4
    1f0a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS00);
    1f0c:	83 b7       	in	r24, 0x33	; 51
    1f0e:	81 60       	ori	r24, 0x01	; 1
    1f10:	83 bf       	out	0x33, r24	; 51
	
	OCR0=78;//Select tick time=10ms
    1f12:	8e e4       	ldi	r24, 0x4E	; 78
    1f14:	8c bf       	out	0x3c, r24	; 60
	
	sei();//Enable interrupt
    1f16:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
    1f18:	89 b7       	in	r24, 0x39	; 57
    1f1a:	82 60       	ori	r24, 0x02	; 2
    1f1c:	89 bf       	out	0x39, r24	; 57
}
    1f1e:	08 95       	ret

00001f20 <TIMER0_STOP>:
void TIMER0_STOP(void)
{
	CLR_BIT(TCCR0,CS02);
    1f20:	83 b7       	in	r24, 0x33	; 51
    1f22:	8b 7f       	andi	r24, 0xFB	; 251
    1f24:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS00);
    1f26:	83 b7       	in	r24, 0x33	; 51
    1f28:	8e 7f       	andi	r24, 0xFE	; 254
    1f2a:	83 bf       	out	0x33, r24	; 51
}
    1f2c:	08 95       	ret

00001f2e <TIMER0_WAVE_nonPWM>:
void TIMER0_WAVE_nonPWM(void)
{
	SET_BIT(DDRB,3);//Set OC0 as output
    1f2e:	bb 9a       	sbi	0x17, 3	; 23
	
	SET_BIT(TCCR0,WGM01);//Select CTC mode
    1f30:	83 b7       	in	r24, 0x33	; 51
    1f32:	88 60       	ori	r24, 0x08	; 8
    1f34:	83 bf       	out	0x33, r24	; 51
	
	OCR0=64;//Select tick time=10ms
    1f36:	80 e4       	ldi	r24, 0x40	; 64
    1f38:	8c bf       	out	0x3c, r24	; 60
	
	SET_BIT(TCCR0,CS02);//Select clock/1024
    1f3a:	83 b7       	in	r24, 0x33	; 51
    1f3c:	84 60       	ori	r24, 0x04	; 4
    1f3e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS00);
    1f40:	83 b7       	in	r24, 0x33	; 51
    1f42:	81 60       	ori	r24, 0x01	; 1
    1f44:	83 bf       	out	0x33, r24	; 51
	
	SET_BIT(TCCR0,COM00);//Toggle OC0 on compare match
    1f46:	83 b7       	in	r24, 0x33	; 51
    1f48:	80 61       	ori	r24, 0x10	; 16
    1f4a:	83 bf       	out	0x33, r24	; 51
}
    1f4c:	08 95       	ret

00001f4e <TIMER0_WAVE_fastPWM>:
void TIMER0_WAVE_fastPWM(void)
{
	SET_BIT(DDRB,3);//set OC0 as output pin
    1f4e:	bb 9a       	sbi	0x17, 3	; 23
	
	SET_BIT(TCCR0,WGM00);//Select Fast PWM mode
    1f50:	83 b7       	in	r24, 0x33	; 51
    1f52:	80 64       	ori	r24, 0x40	; 64
    1f54:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);
    1f56:	83 b7       	in	r24, 0x33	; 51
    1f58:	88 60       	ori	r24, 0x08	; 8
    1f5a:	83 bf       	out	0x33, r24	; 51
	
	OCR0=64;//load value in ORC0=64 (duty cycle=25%)
    1f5c:	80 e4       	ldi	r24, 0x40	; 64
    1f5e:	8c bf       	out	0x3c, r24	; 60
	
	SET_BIT(TCCR0,CS00);//Select timer clock/1024
    1f60:	83 b7       	in	r24, 0x33	; 51
    1f62:	81 60       	ori	r24, 0x01	; 1
    1f64:	83 bf       	out	0x33, r24	; 51
	//SET_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS02);
    1f66:	83 b7       	in	r24, 0x33	; 51
    1f68:	84 60       	ori	r24, 0x04	; 4
    1f6a:	83 bf       	out	0x33, r24	; 51
	
	CLR_BIT(TCCR0,COM00);//Set OC0 on compare match and clear OC0 at Bottom
    1f6c:	83 b7       	in	r24, 0x33	; 51
    1f6e:	8f 7e       	andi	r24, 0xEF	; 239
    1f70:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
    1f72:	83 b7       	in	r24, 0x33	; 51
    1f74:	80 62       	ori	r24, 0x20	; 32
    1f76:	83 bf       	out	0x33, r24	; 51
}
    1f78:	08 95       	ret

00001f7a <TIMER0_WAVE_phasecorrectPWM>:
void TIMER0_WAVE_phasecorrectPWM(void)
{
	SET_BIT(DDRB,3);//set OC0 as output pin
    1f7a:	bb 9a       	sbi	0x17, 3	; 23
	
	SET_BIT(TCCR0,WGM00);//Select Fast PWM mode
    1f7c:	83 b7       	in	r24, 0x33	; 51
    1f7e:	80 64       	ori	r24, 0x40	; 64
    1f80:	83 bf       	out	0x33, r24	; 51
	
	OCR0=64;//load value in ORC0=64 (duty cycle=25%)
    1f82:	80 e4       	ldi	r24, 0x40	; 64
    1f84:	8c bf       	out	0x3c, r24	; 60
	
	SET_BIT(TCCR0,CS00);//Select timer clock/1024
    1f86:	83 b7       	in	r24, 0x33	; 51
    1f88:	81 60       	ori	r24, 0x01	; 1
    1f8a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
    1f8c:	83 b7       	in	r24, 0x33	; 51
    1f8e:	84 60       	ori	r24, 0x04	; 4
    1f90:	83 bf       	out	0x33, r24	; 51
	
	CLR_BIT(TCCR0,COM00);//Set OC0 on compare match and clear OC0 at Bottom
    1f92:	83 b7       	in	r24, 0x33	; 51
    1f94:	8f 7e       	andi	r24, 0xEF	; 239
    1f96:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
    1f98:	83 b7       	in	r24, 0x33	; 51
    1f9a:	80 62       	ori	r24, 0x20	; 32
    1f9c:	83 bf       	out	0x33, r24	; 51
}
    1f9e:	08 95       	ret

00001fa0 <TIMER2_CTC_init_interrupt>:
void TIMER2_CTC_init_interrupt(void)
{
	SET_BIT(TCCR2,WGM21);//Select CTC mode
    1fa0:	85 b5       	in	r24, 0x25	; 37
    1fa2:	88 60       	ori	r24, 0x08	; 8
    1fa4:	85 bd       	out	0x25, r24	; 37
	
	SET_BIT(TCCR2,CS22);//Select clock/1024
    1fa6:	85 b5       	in	r24, 0x25	; 37
    1fa8:	84 60       	ori	r24, 0x04	; 4
    1faa:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS20);
    1fac:	85 b5       	in	r24, 0x25	; 37
    1fae:	81 60       	ori	r24, 0x01	; 1
    1fb0:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS21);
    1fb2:	85 b5       	in	r24, 0x25	; 37
    1fb4:	82 60       	ori	r24, 0x02	; 2
    1fb6:	85 bd       	out	0x25, r24	; 37
	OCR2=78;//Select tick time=10ms
    1fb8:	8e e4       	ldi	r24, 0x4E	; 78
    1fba:	83 bd       	out	0x23, r24	; 35
	
	sei();//Enable interrupt
    1fbc:	78 94       	sei
	SET_BIT(TIMSK,OCIE2);
    1fbe:	89 b7       	in	r24, 0x39	; 57
    1fc0:	80 68       	ori	r24, 0x80	; 128
    1fc2:	89 bf       	out	0x39, r24	; 57
}
    1fc4:	08 95       	ret

00001fc6 <TIMER1_wave_fastPWM>:
void TIMER1_wave_fastPWM(double x)
{
	SET_BIT(DDRD,5);
    1fc6:	8d 9a       	sbi	0x11, 5	; 17
	SET_BIT(TCCR1A,WGM11);//Select Fast PWM mode 14 
    1fc8:	2f b5       	in	r18, 0x2f	; 47
    1fca:	22 60       	ori	r18, 0x02	; 2
    1fcc:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
    1fce:	2e b5       	in	r18, 0x2e	; 46
    1fd0:	28 60       	ori	r18, 0x08	; 8
    1fd2:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
    1fd4:	2e b5       	in	r18, 0x2e	; 46
    1fd6:	20 61       	ori	r18, 0x10	; 16
    1fd8:	2e bd       	out	0x2e, r18	; 46
	
	ICR1=19999;
    1fda:	2f e1       	ldi	r18, 0x1F	; 31
    1fdc:	3e e4       	ldi	r19, 0x4E	; 78
    1fde:	37 bd       	out	0x27, r19	; 39
    1fe0:	26 bd       	out	0x26, r18	; 38
	OCR1A=x*1000;
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	4a e7       	ldi	r20, 0x7A	; 122
    1fe8:	54 e4       	ldi	r21, 0x44	; 68
    1fea:	0e 94 dd 11 	call	0x23ba	; 0x23ba <__mulsf3>
    1fee:	0e 94 38 11 	call	0x2270	; 0x2270 <__fixunssfsi>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	9b bd       	out	0x2b, r25	; 43
    1ff8:	8a bd       	out	0x2a, r24	; 42
	
	SET_BIT(TCCR1B,CS10);//No prescaler
    1ffa:	8e b5       	in	r24, 0x2e	; 46
    1ffc:	81 60       	ori	r24, 0x01	; 1
    1ffe:	8e bd       	out	0x2e, r24	; 46
	
	SET_BIT(TCCR1A,COM1A1);//Clear OCR1 on compare match , set in Bottom (non-inverting mode) 
    2000:	8f b5       	in	r24, 0x2f	; 47
    2002:	80 68       	ori	r24, 0x80	; 128
    2004:	8f bd       	out	0x2f, r24	; 47
}
    2006:	08 95       	ret

00002008 <TIMER1_wave_fastPWMservo>:
void TIMER1_wave_fastPWMservo(double angle)
{
    2008:	cf 92       	push	r12
    200a:	df 92       	push	r13
    200c:	ef 92       	push	r14
    200e:	ff 92       	push	r15
    2010:	6b 01       	movw	r12, r22
    2012:	7c 01       	movw	r14, r24
	SET_BIT(DDRD,5);
    2014:	8d 9a       	sbi	0x11, 5	; 17
	SET_BIT(TCCR1A,WGM11);//Select Fast PWM mode 14
    2016:	8f b5       	in	r24, 0x2f	; 47
    2018:	82 60       	ori	r24, 0x02	; 2
    201a:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,WGM12);
    201c:	8e b5       	in	r24, 0x2e	; 46
    201e:	88 60       	ori	r24, 0x08	; 8
    2020:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,WGM13);
    2022:	8e b5       	in	r24, 0x2e	; 46
    2024:	80 61       	ori	r24, 0x10	; 16
    2026:	8e bd       	out	0x2e, r24	; 46
	
	ICR1=19999;
    2028:	8f e1       	ldi	r24, 0x1F	; 31
    202a:	9e e4       	ldi	r25, 0x4E	; 78
    202c:	97 bd       	out	0x27, r25	; 39
    202e:	86 bd       	out	0x26, r24	; 38
	double x;
	if(angle>=0&&angle<=90)
    2030:	c7 01       	movw	r24, r14
    2032:	b6 01       	movw	r22, r12
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	a9 01       	movw	r20, r18
    203a:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <__gesf2>
    203e:	88 23       	and	r24, r24
    2040:	cc f0       	brlt	.+50     	; 0x2074 <TIMER1_wave_fastPWMservo+0x6c>
    2042:	c7 01       	movw	r24, r14
    2044:	b6 01       	movw	r22, r12
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	44 eb       	ldi	r20, 0xB4	; 180
    204c:	52 e4       	ldi	r21, 0x42	; 66
    204e:	0e 94 cc 10 	call	0x2198	; 0x2198 <__cmpsf2>
    2052:	18 16       	cp	r1, r24
    2054:	7c f0       	brlt	.+30     	; 0x2074 <TIMER1_wave_fastPWMservo+0x6c>
	{
		x=1.5+(angle/180.0);
    2056:	c7 01       	movw	r24, r14
    2058:	b6 01       	movw	r22, r12
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	44 e3       	ldi	r20, 0x34	; 52
    2060:	53 e4       	ldi	r21, 0x43	; 67
    2062:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__divsf3>
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	40 ec       	ldi	r20, 0xC0	; 192
    206c:	5f e3       	ldi	r21, 0x3F	; 63
    206e:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__addsf3>
    2072:	0e c0       	rjmp	.+28     	; 0x2090 <TIMER1_wave_fastPWMservo+0x88>
	}
	else
	{
		x=1.5-(-angle/180.0);
    2074:	c7 01       	movw	r24, r14
    2076:	b6 01       	movw	r22, r12
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	44 e3       	ldi	r20, 0x34	; 52
    207e:	53 e4       	ldi	r21, 0x43	; 67
    2080:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__divsf3>
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	40 ec       	ldi	r20, 0xC0	; 192
    208a:	5f e3       	ldi	r21, 0x3F	; 63
    208c:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__addsf3>
	}
	OCR1A=x*1000;
    2090:	38 2f       	mov	r19, r24
    2092:	29 2f       	mov	r18, r25
    2094:	86 2f       	mov	r24, r22
    2096:	97 2f       	mov	r25, r23
    2098:	a3 2f       	mov	r26, r19
    209a:	b2 2f       	mov	r27, r18
    209c:	bc 01       	movw	r22, r24
    209e:	cd 01       	movw	r24, r26
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	4a e7       	ldi	r20, 0x7A	; 122
    20a6:	54 e4       	ldi	r21, 0x44	; 68
    20a8:	0e 94 dd 11 	call	0x23ba	; 0x23ba <__mulsf3>
    20ac:	0e 94 38 11 	call	0x2270	; 0x2270 <__fixunssfsi>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	9b bd       	out	0x2b, r25	; 43
    20b6:	8a bd       	out	0x2a, r24	; 42
	SET_BIT(TCCR1B,CS10);//No prescaler
    20b8:	8e b5       	in	r24, 0x2e	; 46
    20ba:	81 60       	ori	r24, 0x01	; 1
    20bc:	8e bd       	out	0x2e, r24	; 46
	
	SET_BIT(TCCR1A,COM1A1);//Clear OCR1 on compare match , set in Bottom (non-inverting mode)
    20be:	8f b5       	in	r24, 0x2f	; 47
    20c0:	80 68       	ori	r24, 0x80	; 128
    20c2:	8f bd       	out	0x2f, r24	; 47
    20c4:	ff 90       	pop	r15
    20c6:	ef 90       	pop	r14
    20c8:	df 90       	pop	r13
    20ca:	cf 90       	pop	r12
    20cc:	08 95       	ret

000020ce <__subsf3>:
    20ce:	50 58       	subi	r21, 0x80	; 128

000020d0 <__addsf3>:
    20d0:	bb 27       	eor	r27, r27
    20d2:	aa 27       	eor	r26, r26
    20d4:	0e d0       	rcall	.+28     	; 0x20f2 <__addsf3x>
    20d6:	33 c1       	rjmp	.+614    	; 0x233e <__fp_round>
    20d8:	24 d1       	rcall	.+584    	; 0x2322 <__fp_pscA>
    20da:	30 f0       	brcs	.+12     	; 0x20e8 <__addsf3+0x18>
    20dc:	29 d1       	rcall	.+594    	; 0x2330 <__fp_pscB>
    20de:	20 f0       	brcs	.+8      	; 0x20e8 <__addsf3+0x18>
    20e0:	31 f4       	brne	.+12     	; 0x20ee <__addsf3+0x1e>
    20e2:	9f 3f       	cpi	r25, 0xFF	; 255
    20e4:	11 f4       	brne	.+4      	; 0x20ea <__addsf3+0x1a>
    20e6:	1e f4       	brtc	.+6      	; 0x20ee <__addsf3+0x1e>
    20e8:	19 c1       	rjmp	.+562    	; 0x231c <__fp_nan>
    20ea:	0e f4       	brtc	.+2      	; 0x20ee <__addsf3+0x1e>
    20ec:	e0 95       	com	r30
    20ee:	e7 fb       	bst	r30, 7
    20f0:	0f c1       	rjmp	.+542    	; 0x2310 <__fp_inf>

000020f2 <__addsf3x>:
    20f2:	e9 2f       	mov	r30, r25
    20f4:	35 d1       	rcall	.+618    	; 0x2360 <__fp_split3>
    20f6:	80 f3       	brcs	.-32     	; 0x20d8 <__addsf3+0x8>
    20f8:	ba 17       	cp	r27, r26
    20fa:	62 07       	cpc	r22, r18
    20fc:	73 07       	cpc	r23, r19
    20fe:	84 07       	cpc	r24, r20
    2100:	95 07       	cpc	r25, r21
    2102:	18 f0       	brcs	.+6      	; 0x210a <__addsf3x+0x18>
    2104:	71 f4       	brne	.+28     	; 0x2122 <__addsf3x+0x30>
    2106:	9e f5       	brtc	.+102    	; 0x216e <__addsf3x+0x7c>
    2108:	4d c1       	rjmp	.+666    	; 0x23a4 <__fp_zero>
    210a:	0e f4       	brtc	.+2      	; 0x210e <__addsf3x+0x1c>
    210c:	e0 95       	com	r30
    210e:	0b 2e       	mov	r0, r27
    2110:	ba 2f       	mov	r27, r26
    2112:	a0 2d       	mov	r26, r0
    2114:	0b 01       	movw	r0, r22
    2116:	b9 01       	movw	r22, r18
    2118:	90 01       	movw	r18, r0
    211a:	0c 01       	movw	r0, r24
    211c:	ca 01       	movw	r24, r20
    211e:	a0 01       	movw	r20, r0
    2120:	11 24       	eor	r1, r1
    2122:	ff 27       	eor	r31, r31
    2124:	59 1b       	sub	r21, r25
    2126:	99 f0       	breq	.+38     	; 0x214e <__addsf3x+0x5c>
    2128:	59 3f       	cpi	r21, 0xF9	; 249
    212a:	50 f4       	brcc	.+20     	; 0x2140 <__addsf3x+0x4e>
    212c:	50 3e       	cpi	r21, 0xE0	; 224
    212e:	68 f1       	brcs	.+90     	; 0x218a <__addsf3x+0x98>
    2130:	1a 16       	cp	r1, r26
    2132:	f0 40       	sbci	r31, 0x00	; 0
    2134:	a2 2f       	mov	r26, r18
    2136:	23 2f       	mov	r18, r19
    2138:	34 2f       	mov	r19, r20
    213a:	44 27       	eor	r20, r20
    213c:	58 5f       	subi	r21, 0xF8	; 248
    213e:	f3 cf       	rjmp	.-26     	; 0x2126 <__addsf3x+0x34>
    2140:	46 95       	lsr	r20
    2142:	37 95       	ror	r19
    2144:	27 95       	ror	r18
    2146:	a7 95       	ror	r26
    2148:	f0 40       	sbci	r31, 0x00	; 0
    214a:	53 95       	inc	r21
    214c:	c9 f7       	brne	.-14     	; 0x2140 <__addsf3x+0x4e>
    214e:	7e f4       	brtc	.+30     	; 0x216e <__addsf3x+0x7c>
    2150:	1f 16       	cp	r1, r31
    2152:	ba 0b       	sbc	r27, r26
    2154:	62 0b       	sbc	r22, r18
    2156:	73 0b       	sbc	r23, r19
    2158:	84 0b       	sbc	r24, r20
    215a:	ba f0       	brmi	.+46     	; 0x218a <__addsf3x+0x98>
    215c:	91 50       	subi	r25, 0x01	; 1
    215e:	a1 f0       	breq	.+40     	; 0x2188 <__addsf3x+0x96>
    2160:	ff 0f       	add	r31, r31
    2162:	bb 1f       	adc	r27, r27
    2164:	66 1f       	adc	r22, r22
    2166:	77 1f       	adc	r23, r23
    2168:	88 1f       	adc	r24, r24
    216a:	c2 f7       	brpl	.-16     	; 0x215c <__addsf3x+0x6a>
    216c:	0e c0       	rjmp	.+28     	; 0x218a <__addsf3x+0x98>
    216e:	ba 0f       	add	r27, r26
    2170:	62 1f       	adc	r22, r18
    2172:	73 1f       	adc	r23, r19
    2174:	84 1f       	adc	r24, r20
    2176:	48 f4       	brcc	.+18     	; 0x218a <__addsf3x+0x98>
    2178:	87 95       	ror	r24
    217a:	77 95       	ror	r23
    217c:	67 95       	ror	r22
    217e:	b7 95       	ror	r27
    2180:	f7 95       	ror	r31
    2182:	9e 3f       	cpi	r25, 0xFE	; 254
    2184:	08 f0       	brcs	.+2      	; 0x2188 <__addsf3x+0x96>
    2186:	b3 cf       	rjmp	.-154    	; 0x20ee <__addsf3+0x1e>
    2188:	93 95       	inc	r25
    218a:	88 0f       	add	r24, r24
    218c:	08 f0       	brcs	.+2      	; 0x2190 <__addsf3x+0x9e>
    218e:	99 27       	eor	r25, r25
    2190:	ee 0f       	add	r30, r30
    2192:	97 95       	ror	r25
    2194:	87 95       	ror	r24
    2196:	08 95       	ret

00002198 <__cmpsf2>:
    2198:	97 d0       	rcall	.+302    	; 0x22c8 <__fp_cmp>
    219a:	08 f4       	brcc	.+2      	; 0x219e <__cmpsf2+0x6>
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	08 95       	ret

000021a0 <__divsf3>:
    21a0:	0c d0       	rcall	.+24     	; 0x21ba <__divsf3x>
    21a2:	cd c0       	rjmp	.+410    	; 0x233e <__fp_round>
    21a4:	c5 d0       	rcall	.+394    	; 0x2330 <__fp_pscB>
    21a6:	40 f0       	brcs	.+16     	; 0x21b8 <__divsf3+0x18>
    21a8:	bc d0       	rcall	.+376    	; 0x2322 <__fp_pscA>
    21aa:	30 f0       	brcs	.+12     	; 0x21b8 <__divsf3+0x18>
    21ac:	21 f4       	brne	.+8      	; 0x21b6 <__divsf3+0x16>
    21ae:	5f 3f       	cpi	r21, 0xFF	; 255
    21b0:	19 f0       	breq	.+6      	; 0x21b8 <__divsf3+0x18>
    21b2:	ae c0       	rjmp	.+348    	; 0x2310 <__fp_inf>
    21b4:	51 11       	cpse	r21, r1
    21b6:	f7 c0       	rjmp	.+494    	; 0x23a6 <__fp_szero>
    21b8:	b1 c0       	rjmp	.+354    	; 0x231c <__fp_nan>

000021ba <__divsf3x>:
    21ba:	d2 d0       	rcall	.+420    	; 0x2360 <__fp_split3>
    21bc:	98 f3       	brcs	.-26     	; 0x21a4 <__divsf3+0x4>

000021be <__divsf3_pse>:
    21be:	99 23       	and	r25, r25
    21c0:	c9 f3       	breq	.-14     	; 0x21b4 <__divsf3+0x14>
    21c2:	55 23       	and	r21, r21
    21c4:	b1 f3       	breq	.-20     	; 0x21b2 <__divsf3+0x12>
    21c6:	95 1b       	sub	r25, r21
    21c8:	55 0b       	sbc	r21, r21
    21ca:	bb 27       	eor	r27, r27
    21cc:	aa 27       	eor	r26, r26
    21ce:	62 17       	cp	r22, r18
    21d0:	73 07       	cpc	r23, r19
    21d2:	84 07       	cpc	r24, r20
    21d4:	38 f0       	brcs	.+14     	; 0x21e4 <__divsf3_pse+0x26>
    21d6:	9f 5f       	subi	r25, 0xFF	; 255
    21d8:	5f 4f       	sbci	r21, 0xFF	; 255
    21da:	22 0f       	add	r18, r18
    21dc:	33 1f       	adc	r19, r19
    21de:	44 1f       	adc	r20, r20
    21e0:	aa 1f       	adc	r26, r26
    21e2:	a9 f3       	breq	.-22     	; 0x21ce <__divsf3_pse+0x10>
    21e4:	33 d0       	rcall	.+102    	; 0x224c <__divsf3_pse+0x8e>
    21e6:	0e 2e       	mov	r0, r30
    21e8:	3a f0       	brmi	.+14     	; 0x21f8 <__divsf3_pse+0x3a>
    21ea:	e0 e8       	ldi	r30, 0x80	; 128
    21ec:	30 d0       	rcall	.+96     	; 0x224e <__divsf3_pse+0x90>
    21ee:	91 50       	subi	r25, 0x01	; 1
    21f0:	50 40       	sbci	r21, 0x00	; 0
    21f2:	e6 95       	lsr	r30
    21f4:	00 1c       	adc	r0, r0
    21f6:	ca f7       	brpl	.-14     	; 0x21ea <__divsf3_pse+0x2c>
    21f8:	29 d0       	rcall	.+82     	; 0x224c <__divsf3_pse+0x8e>
    21fa:	fe 2f       	mov	r31, r30
    21fc:	27 d0       	rcall	.+78     	; 0x224c <__divsf3_pse+0x8e>
    21fe:	66 0f       	add	r22, r22
    2200:	77 1f       	adc	r23, r23
    2202:	88 1f       	adc	r24, r24
    2204:	bb 1f       	adc	r27, r27
    2206:	26 17       	cp	r18, r22
    2208:	37 07       	cpc	r19, r23
    220a:	48 07       	cpc	r20, r24
    220c:	ab 07       	cpc	r26, r27
    220e:	b0 e8       	ldi	r27, 0x80	; 128
    2210:	09 f0       	breq	.+2      	; 0x2214 <__divsf3_pse+0x56>
    2212:	bb 0b       	sbc	r27, r27
    2214:	80 2d       	mov	r24, r0
    2216:	bf 01       	movw	r22, r30
    2218:	ff 27       	eor	r31, r31
    221a:	93 58       	subi	r25, 0x83	; 131
    221c:	5f 4f       	sbci	r21, 0xFF	; 255
    221e:	2a f0       	brmi	.+10     	; 0x222a <__divsf3_pse+0x6c>
    2220:	9e 3f       	cpi	r25, 0xFE	; 254
    2222:	51 05       	cpc	r21, r1
    2224:	68 f0       	brcs	.+26     	; 0x2240 <__divsf3_pse+0x82>
    2226:	74 c0       	rjmp	.+232    	; 0x2310 <__fp_inf>
    2228:	be c0       	rjmp	.+380    	; 0x23a6 <__fp_szero>
    222a:	5f 3f       	cpi	r21, 0xFF	; 255
    222c:	ec f3       	brlt	.-6      	; 0x2228 <__divsf3_pse+0x6a>
    222e:	98 3e       	cpi	r25, 0xE8	; 232
    2230:	dc f3       	brlt	.-10     	; 0x2228 <__divsf3_pse+0x6a>
    2232:	86 95       	lsr	r24
    2234:	77 95       	ror	r23
    2236:	67 95       	ror	r22
    2238:	b7 95       	ror	r27
    223a:	f7 95       	ror	r31
    223c:	9f 5f       	subi	r25, 0xFF	; 255
    223e:	c9 f7       	brne	.-14     	; 0x2232 <__divsf3_pse+0x74>
    2240:	88 0f       	add	r24, r24
    2242:	91 1d       	adc	r25, r1
    2244:	96 95       	lsr	r25
    2246:	87 95       	ror	r24
    2248:	97 f9       	bld	r25, 7
    224a:	08 95       	ret
    224c:	e1 e0       	ldi	r30, 0x01	; 1
    224e:	66 0f       	add	r22, r22
    2250:	77 1f       	adc	r23, r23
    2252:	88 1f       	adc	r24, r24
    2254:	bb 1f       	adc	r27, r27
    2256:	62 17       	cp	r22, r18
    2258:	73 07       	cpc	r23, r19
    225a:	84 07       	cpc	r24, r20
    225c:	ba 07       	cpc	r27, r26
    225e:	20 f0       	brcs	.+8      	; 0x2268 <__divsf3_pse+0xaa>
    2260:	62 1b       	sub	r22, r18
    2262:	73 0b       	sbc	r23, r19
    2264:	84 0b       	sbc	r24, r20
    2266:	ba 0b       	sbc	r27, r26
    2268:	ee 1f       	adc	r30, r30
    226a:	88 f7       	brcc	.-30     	; 0x224e <__divsf3_pse+0x90>
    226c:	e0 95       	com	r30
    226e:	08 95       	ret

00002270 <__fixunssfsi>:
    2270:	7f d0       	rcall	.+254    	; 0x2370 <__fp_splitA>
    2272:	88 f0       	brcs	.+34     	; 0x2296 <__fixunssfsi+0x26>
    2274:	9f 57       	subi	r25, 0x7F	; 127
    2276:	90 f0       	brcs	.+36     	; 0x229c <__fixunssfsi+0x2c>
    2278:	b9 2f       	mov	r27, r25
    227a:	99 27       	eor	r25, r25
    227c:	b7 51       	subi	r27, 0x17	; 23
    227e:	a0 f0       	brcs	.+40     	; 0x22a8 <__fixunssfsi+0x38>
    2280:	d1 f0       	breq	.+52     	; 0x22b6 <__fixunssfsi+0x46>
    2282:	66 0f       	add	r22, r22
    2284:	77 1f       	adc	r23, r23
    2286:	88 1f       	adc	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	1a f0       	brmi	.+6      	; 0x2292 <__fixunssfsi+0x22>
    228c:	ba 95       	dec	r27
    228e:	c9 f7       	brne	.-14     	; 0x2282 <__fixunssfsi+0x12>
    2290:	12 c0       	rjmp	.+36     	; 0x22b6 <__fixunssfsi+0x46>
    2292:	b1 30       	cpi	r27, 0x01	; 1
    2294:	81 f0       	breq	.+32     	; 0x22b6 <__fixunssfsi+0x46>
    2296:	86 d0       	rcall	.+268    	; 0x23a4 <__fp_zero>
    2298:	b1 e0       	ldi	r27, 0x01	; 1
    229a:	08 95       	ret
    229c:	83 c0       	rjmp	.+262    	; 0x23a4 <__fp_zero>
    229e:	67 2f       	mov	r22, r23
    22a0:	78 2f       	mov	r23, r24
    22a2:	88 27       	eor	r24, r24
    22a4:	b8 5f       	subi	r27, 0xF8	; 248
    22a6:	39 f0       	breq	.+14     	; 0x22b6 <__fixunssfsi+0x46>
    22a8:	b9 3f       	cpi	r27, 0xF9	; 249
    22aa:	cc f3       	brlt	.-14     	; 0x229e <__fixunssfsi+0x2e>
    22ac:	86 95       	lsr	r24
    22ae:	77 95       	ror	r23
    22b0:	67 95       	ror	r22
    22b2:	b3 95       	inc	r27
    22b4:	d9 f7       	brne	.-10     	; 0x22ac <__fixunssfsi+0x3c>
    22b6:	3e f4       	brtc	.+14     	; 0x22c6 <__fixunssfsi+0x56>
    22b8:	90 95       	com	r25
    22ba:	80 95       	com	r24
    22bc:	70 95       	com	r23
    22be:	61 95       	neg	r22
    22c0:	7f 4f       	sbci	r23, 0xFF	; 255
    22c2:	8f 4f       	sbci	r24, 0xFF	; 255
    22c4:	9f 4f       	sbci	r25, 0xFF	; 255
    22c6:	08 95       	ret

000022c8 <__fp_cmp>:
    22c8:	99 0f       	add	r25, r25
    22ca:	00 08       	sbc	r0, r0
    22cc:	55 0f       	add	r21, r21
    22ce:	aa 0b       	sbc	r26, r26
    22d0:	e0 e8       	ldi	r30, 0x80	; 128
    22d2:	fe ef       	ldi	r31, 0xFE	; 254
    22d4:	16 16       	cp	r1, r22
    22d6:	17 06       	cpc	r1, r23
    22d8:	e8 07       	cpc	r30, r24
    22da:	f9 07       	cpc	r31, r25
    22dc:	c0 f0       	brcs	.+48     	; 0x230e <__fp_cmp+0x46>
    22de:	12 16       	cp	r1, r18
    22e0:	13 06       	cpc	r1, r19
    22e2:	e4 07       	cpc	r30, r20
    22e4:	f5 07       	cpc	r31, r21
    22e6:	98 f0       	brcs	.+38     	; 0x230e <__fp_cmp+0x46>
    22e8:	62 1b       	sub	r22, r18
    22ea:	73 0b       	sbc	r23, r19
    22ec:	84 0b       	sbc	r24, r20
    22ee:	95 0b       	sbc	r25, r21
    22f0:	39 f4       	brne	.+14     	; 0x2300 <__fp_cmp+0x38>
    22f2:	0a 26       	eor	r0, r26
    22f4:	61 f0       	breq	.+24     	; 0x230e <__fp_cmp+0x46>
    22f6:	23 2b       	or	r18, r19
    22f8:	24 2b       	or	r18, r20
    22fa:	25 2b       	or	r18, r21
    22fc:	21 f4       	brne	.+8      	; 0x2306 <__fp_cmp+0x3e>
    22fe:	08 95       	ret
    2300:	0a 26       	eor	r0, r26
    2302:	09 f4       	brne	.+2      	; 0x2306 <__fp_cmp+0x3e>
    2304:	a1 40       	sbci	r26, 0x01	; 1
    2306:	a6 95       	lsr	r26
    2308:	8f ef       	ldi	r24, 0xFF	; 255
    230a:	81 1d       	adc	r24, r1
    230c:	81 1d       	adc	r24, r1
    230e:	08 95       	ret

00002310 <__fp_inf>:
    2310:	97 f9       	bld	r25, 7
    2312:	9f 67       	ori	r25, 0x7F	; 127
    2314:	80 e8       	ldi	r24, 0x80	; 128
    2316:	70 e0       	ldi	r23, 0x00	; 0
    2318:	60 e0       	ldi	r22, 0x00	; 0
    231a:	08 95       	ret

0000231c <__fp_nan>:
    231c:	9f ef       	ldi	r25, 0xFF	; 255
    231e:	80 ec       	ldi	r24, 0xC0	; 192
    2320:	08 95       	ret

00002322 <__fp_pscA>:
    2322:	00 24       	eor	r0, r0
    2324:	0a 94       	dec	r0
    2326:	16 16       	cp	r1, r22
    2328:	17 06       	cpc	r1, r23
    232a:	18 06       	cpc	r1, r24
    232c:	09 06       	cpc	r0, r25
    232e:	08 95       	ret

00002330 <__fp_pscB>:
    2330:	00 24       	eor	r0, r0
    2332:	0a 94       	dec	r0
    2334:	12 16       	cp	r1, r18
    2336:	13 06       	cpc	r1, r19
    2338:	14 06       	cpc	r1, r20
    233a:	05 06       	cpc	r0, r21
    233c:	08 95       	ret

0000233e <__fp_round>:
    233e:	09 2e       	mov	r0, r25
    2340:	03 94       	inc	r0
    2342:	00 0c       	add	r0, r0
    2344:	11 f4       	brne	.+4      	; 0x234a <__fp_round+0xc>
    2346:	88 23       	and	r24, r24
    2348:	52 f0       	brmi	.+20     	; 0x235e <__fp_round+0x20>
    234a:	bb 0f       	add	r27, r27
    234c:	40 f4       	brcc	.+16     	; 0x235e <__fp_round+0x20>
    234e:	bf 2b       	or	r27, r31
    2350:	11 f4       	brne	.+4      	; 0x2356 <__fp_round+0x18>
    2352:	60 ff       	sbrs	r22, 0
    2354:	04 c0       	rjmp	.+8      	; 0x235e <__fp_round+0x20>
    2356:	6f 5f       	subi	r22, 0xFF	; 255
    2358:	7f 4f       	sbci	r23, 0xFF	; 255
    235a:	8f 4f       	sbci	r24, 0xFF	; 255
    235c:	9f 4f       	sbci	r25, 0xFF	; 255
    235e:	08 95       	ret

00002360 <__fp_split3>:
    2360:	57 fd       	sbrc	r21, 7
    2362:	90 58       	subi	r25, 0x80	; 128
    2364:	44 0f       	add	r20, r20
    2366:	55 1f       	adc	r21, r21
    2368:	59 f0       	breq	.+22     	; 0x2380 <__fp_splitA+0x10>
    236a:	5f 3f       	cpi	r21, 0xFF	; 255
    236c:	71 f0       	breq	.+28     	; 0x238a <__fp_splitA+0x1a>
    236e:	47 95       	ror	r20

00002370 <__fp_splitA>:
    2370:	88 0f       	add	r24, r24
    2372:	97 fb       	bst	r25, 7
    2374:	99 1f       	adc	r25, r25
    2376:	61 f0       	breq	.+24     	; 0x2390 <__fp_splitA+0x20>
    2378:	9f 3f       	cpi	r25, 0xFF	; 255
    237a:	79 f0       	breq	.+30     	; 0x239a <__fp_splitA+0x2a>
    237c:	87 95       	ror	r24
    237e:	08 95       	ret
    2380:	12 16       	cp	r1, r18
    2382:	13 06       	cpc	r1, r19
    2384:	14 06       	cpc	r1, r20
    2386:	55 1f       	adc	r21, r21
    2388:	f2 cf       	rjmp	.-28     	; 0x236e <__fp_split3+0xe>
    238a:	46 95       	lsr	r20
    238c:	f1 df       	rcall	.-30     	; 0x2370 <__fp_splitA>
    238e:	08 c0       	rjmp	.+16     	; 0x23a0 <__fp_splitA+0x30>
    2390:	16 16       	cp	r1, r22
    2392:	17 06       	cpc	r1, r23
    2394:	18 06       	cpc	r1, r24
    2396:	99 1f       	adc	r25, r25
    2398:	f1 cf       	rjmp	.-30     	; 0x237c <__fp_splitA+0xc>
    239a:	86 95       	lsr	r24
    239c:	71 05       	cpc	r23, r1
    239e:	61 05       	cpc	r22, r1
    23a0:	08 94       	sec
    23a2:	08 95       	ret

000023a4 <__fp_zero>:
    23a4:	e8 94       	clt

000023a6 <__fp_szero>:
    23a6:	bb 27       	eor	r27, r27
    23a8:	66 27       	eor	r22, r22
    23aa:	77 27       	eor	r23, r23
    23ac:	cb 01       	movw	r24, r22
    23ae:	97 f9       	bld	r25, 7
    23b0:	08 95       	ret

000023b2 <__gesf2>:
    23b2:	8a df       	rcall	.-236    	; 0x22c8 <__fp_cmp>
    23b4:	08 f4       	brcc	.+2      	; 0x23b8 <__gesf2+0x6>
    23b6:	8f ef       	ldi	r24, 0xFF	; 255
    23b8:	08 95       	ret

000023ba <__mulsf3>:
    23ba:	0b d0       	rcall	.+22     	; 0x23d2 <__mulsf3x>
    23bc:	c0 cf       	rjmp	.-128    	; 0x233e <__fp_round>
    23be:	b1 df       	rcall	.-158    	; 0x2322 <__fp_pscA>
    23c0:	28 f0       	brcs	.+10     	; 0x23cc <__mulsf3+0x12>
    23c2:	b6 df       	rcall	.-148    	; 0x2330 <__fp_pscB>
    23c4:	18 f0       	brcs	.+6      	; 0x23cc <__mulsf3+0x12>
    23c6:	95 23       	and	r25, r21
    23c8:	09 f0       	breq	.+2      	; 0x23cc <__mulsf3+0x12>
    23ca:	a2 cf       	rjmp	.-188    	; 0x2310 <__fp_inf>
    23cc:	a7 cf       	rjmp	.-178    	; 0x231c <__fp_nan>
    23ce:	11 24       	eor	r1, r1
    23d0:	ea cf       	rjmp	.-44     	; 0x23a6 <__fp_szero>

000023d2 <__mulsf3x>:
    23d2:	c6 df       	rcall	.-116    	; 0x2360 <__fp_split3>
    23d4:	a0 f3       	brcs	.-24     	; 0x23be <__mulsf3+0x4>

000023d6 <__mulsf3_pse>:
    23d6:	95 9f       	mul	r25, r21
    23d8:	d1 f3       	breq	.-12     	; 0x23ce <__mulsf3+0x14>
    23da:	95 0f       	add	r25, r21
    23dc:	50 e0       	ldi	r21, 0x00	; 0
    23de:	55 1f       	adc	r21, r21
    23e0:	62 9f       	mul	r22, r18
    23e2:	f0 01       	movw	r30, r0
    23e4:	72 9f       	mul	r23, r18
    23e6:	bb 27       	eor	r27, r27
    23e8:	f0 0d       	add	r31, r0
    23ea:	b1 1d       	adc	r27, r1
    23ec:	63 9f       	mul	r22, r19
    23ee:	aa 27       	eor	r26, r26
    23f0:	f0 0d       	add	r31, r0
    23f2:	b1 1d       	adc	r27, r1
    23f4:	aa 1f       	adc	r26, r26
    23f6:	64 9f       	mul	r22, r20
    23f8:	66 27       	eor	r22, r22
    23fa:	b0 0d       	add	r27, r0
    23fc:	a1 1d       	adc	r26, r1
    23fe:	66 1f       	adc	r22, r22
    2400:	82 9f       	mul	r24, r18
    2402:	22 27       	eor	r18, r18
    2404:	b0 0d       	add	r27, r0
    2406:	a1 1d       	adc	r26, r1
    2408:	62 1f       	adc	r22, r18
    240a:	73 9f       	mul	r23, r19
    240c:	b0 0d       	add	r27, r0
    240e:	a1 1d       	adc	r26, r1
    2410:	62 1f       	adc	r22, r18
    2412:	83 9f       	mul	r24, r19
    2414:	a0 0d       	add	r26, r0
    2416:	61 1d       	adc	r22, r1
    2418:	22 1f       	adc	r18, r18
    241a:	74 9f       	mul	r23, r20
    241c:	33 27       	eor	r19, r19
    241e:	a0 0d       	add	r26, r0
    2420:	61 1d       	adc	r22, r1
    2422:	23 1f       	adc	r18, r19
    2424:	84 9f       	mul	r24, r20
    2426:	60 0d       	add	r22, r0
    2428:	21 1d       	adc	r18, r1
    242a:	82 2f       	mov	r24, r18
    242c:	76 2f       	mov	r23, r22
    242e:	6a 2f       	mov	r22, r26
    2430:	11 24       	eor	r1, r1
    2432:	9f 57       	subi	r25, 0x7F	; 127
    2434:	50 40       	sbci	r21, 0x00	; 0
    2436:	8a f0       	brmi	.+34     	; 0x245a <__mulsf3_pse+0x84>
    2438:	e1 f0       	breq	.+56     	; 0x2472 <__mulsf3_pse+0x9c>
    243a:	88 23       	and	r24, r24
    243c:	4a f0       	brmi	.+18     	; 0x2450 <__mulsf3_pse+0x7a>
    243e:	ee 0f       	add	r30, r30
    2440:	ff 1f       	adc	r31, r31
    2442:	bb 1f       	adc	r27, r27
    2444:	66 1f       	adc	r22, r22
    2446:	77 1f       	adc	r23, r23
    2448:	88 1f       	adc	r24, r24
    244a:	91 50       	subi	r25, 0x01	; 1
    244c:	50 40       	sbci	r21, 0x00	; 0
    244e:	a9 f7       	brne	.-22     	; 0x243a <__mulsf3_pse+0x64>
    2450:	9e 3f       	cpi	r25, 0xFE	; 254
    2452:	51 05       	cpc	r21, r1
    2454:	70 f0       	brcs	.+28     	; 0x2472 <__mulsf3_pse+0x9c>
    2456:	5c cf       	rjmp	.-328    	; 0x2310 <__fp_inf>
    2458:	a6 cf       	rjmp	.-180    	; 0x23a6 <__fp_szero>
    245a:	5f 3f       	cpi	r21, 0xFF	; 255
    245c:	ec f3       	brlt	.-6      	; 0x2458 <__mulsf3_pse+0x82>
    245e:	98 3e       	cpi	r25, 0xE8	; 232
    2460:	dc f3       	brlt	.-10     	; 0x2458 <__mulsf3_pse+0x82>
    2462:	86 95       	lsr	r24
    2464:	77 95       	ror	r23
    2466:	67 95       	ror	r22
    2468:	b7 95       	ror	r27
    246a:	f7 95       	ror	r31
    246c:	e7 95       	ror	r30
    246e:	9f 5f       	subi	r25, 0xFF	; 255
    2470:	c1 f7       	brne	.-16     	; 0x2462 <__mulsf3_pse+0x8c>
    2472:	fe 2b       	or	r31, r30
    2474:	88 0f       	add	r24, r24
    2476:	91 1d       	adc	r25, r1
    2478:	96 95       	lsr	r25
    247a:	87 95       	ror	r24
    247c:	97 f9       	bld	r25, 7
    247e:	08 95       	ret

00002480 <__udivmodqi4>:
    2480:	99 1b       	sub	r25, r25
    2482:	79 e0       	ldi	r23, 0x09	; 9
    2484:	04 c0       	rjmp	.+8      	; 0x248e <__udivmodqi4_ep>

00002486 <__udivmodqi4_loop>:
    2486:	99 1f       	adc	r25, r25
    2488:	96 17       	cp	r25, r22
    248a:	08 f0       	brcs	.+2      	; 0x248e <__udivmodqi4_ep>
    248c:	96 1b       	sub	r25, r22

0000248e <__udivmodqi4_ep>:
    248e:	88 1f       	adc	r24, r24
    2490:	7a 95       	dec	r23
    2492:	c9 f7       	brne	.-14     	; 0x2486 <__udivmodqi4_loop>
    2494:	80 95       	com	r24
    2496:	08 95       	ret

00002498 <_exit>:
    2498:	f8 94       	cli

0000249a <__stop_program>:
    249a:	ff cf       	rjmp	.-2      	; 0x249a <__stop_program>
