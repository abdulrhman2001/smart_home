
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000137a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000137a  0000140e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006e  0080006e  0000141c  2**0
                  ALLOC
  3 .stab         000023dc  00000000  00000000  0000141c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000768  00000000  00000000  000037f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00003f60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f0d  00000000  00000000  000040a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005bd  00000000  00000000  00004fad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009c4  00000000  00000000  0000556a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  00005f30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047e  00000000  00000000  000062e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aba  00000000  00000000  00006762  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 37       	cpi	r26, 0x72	; 114
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c7 03 	call	0x78e	; 0x78e <main>
      8a:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
#include "STD_MACROS.h"
#include <avr/io.h>
void ADC_Init(void)
{
	SET_BIT(ADMUX,REFS0); //Config VREF
      92:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADMUX,REFS1);
      94:	3f 9a       	sbi	0x07, 7	; 7
	SET_BIT(ADCSRA,ADEN);//enaple ADC
      96:	37 9a       	sbi	0x06, 7	; 6
	
	SET_BIT(ADCSRA,ADPS2);//adjust ADC clock /64
      98:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA,ADPS1);
      9a:	31 9a       	sbi	0x06, 1	; 6
	CLR_BIT(ADCSRA,ADPS0);
      9c:	30 98       	cbi	0x06, 0	; 6
}
      9e:	08 95       	ret

000000a0 <ADC_READ>:
unsigned short ADC_READ(void)
{
	unsigned short read_val;
	SET_BIT(ADCSRA,ADSC);
      a0:	36 9a       	sbi	0x06, 6	; 6
	while((READ_BIT(ADCSRA,ADSC))==1);
      a2:	36 99       	sbic	0x06, 6	; 6
      a4:	fe cf       	rjmp	.-4      	; 0xa2 <ADC_READ+0x2>
	read_val=ADCL;
      a6:	84 b1       	in	r24, 0x04	; 4
      a8:	90 e0       	ldi	r25, 0x00	; 0
	read_val|=(ADCH<<8);
      aa:	45 b1       	in	r20, 0x05	; 5
      ac:	34 2f       	mov	r19, r20
      ae:	20 e0       	ldi	r18, 0x00	; 0
      b0:	82 2b       	or	r24, r18
      b2:	93 2b       	or	r25, r19
	return read_val;
      b4:	08 95       	ret

000000b6 <DIO_SET_PIN_DIR>:
#include "STD_MACROS.h"
#include <avr/io.h>
void DIO_SET_PIN_DIR(unsigned char port,unsigned char pin,unsigned char dir)
{
	switch(port)
      b6:	84 34       	cpi	r24, 0x44	; 68
      b8:	09 f4       	brne	.+2      	; 0xbc <DIO_SET_PIN_DIR+0x6>
      ba:	71 c0       	rjmp	.+226    	; 0x19e <DIO_SET_PIN_DIR+0xe8>
      bc:	85 34       	cpi	r24, 0x45	; 69
      be:	48 f4       	brcc	.+18     	; 0xd2 <DIO_SET_PIN_DIR+0x1c>
      c0:	82 34       	cpi	r24, 0x42	; 66
      c2:	99 f1       	breq	.+102    	; 0x12a <DIO_SET_PIN_DIR+0x74>
      c4:	83 34       	cpi	r24, 0x43	; 67
      c6:	08 f0       	brcs	.+2      	; 0xca <DIO_SET_PIN_DIR+0x14>
      c8:	4d c0       	rjmp	.+154    	; 0x164 <DIO_SET_PIN_DIR+0xae>
      ca:	81 34       	cpi	r24, 0x41	; 65
      cc:	09 f0       	breq	.+2      	; 0xd0 <DIO_SET_PIN_DIR+0x1a>
      ce:	83 c0       	rjmp	.+262    	; 0x1d6 <DIO_SET_PIN_DIR+0x120>
      d0:	0f c0       	rjmp	.+30     	; 0xf0 <DIO_SET_PIN_DIR+0x3a>
      d2:	82 36       	cpi	r24, 0x62	; 98
      d4:	51 f1       	breq	.+84     	; 0x12a <DIO_SET_PIN_DIR+0x74>
      d6:	83 36       	cpi	r24, 0x63	; 99
      d8:	20 f4       	brcc	.+8      	; 0xe2 <DIO_SET_PIN_DIR+0x2c>
      da:	81 36       	cpi	r24, 0x61	; 97
      dc:	09 f0       	breq	.+2      	; 0xe0 <DIO_SET_PIN_DIR+0x2a>
      de:	7b c0       	rjmp	.+246    	; 0x1d6 <DIO_SET_PIN_DIR+0x120>
      e0:	07 c0       	rjmp	.+14     	; 0xf0 <DIO_SET_PIN_DIR+0x3a>
      e2:	83 36       	cpi	r24, 0x63	; 99
      e4:	09 f4       	brne	.+2      	; 0xe8 <DIO_SET_PIN_DIR+0x32>
      e6:	3e c0       	rjmp	.+124    	; 0x164 <DIO_SET_PIN_DIR+0xae>
      e8:	84 36       	cpi	r24, 0x64	; 100
      ea:	09 f0       	breq	.+2      	; 0xee <DIO_SET_PIN_DIR+0x38>
      ec:	74 c0       	rjmp	.+232    	; 0x1d6 <DIO_SET_PIN_DIR+0x120>
      ee:	57 c0       	rjmp	.+174    	; 0x19e <DIO_SET_PIN_DIR+0xe8>
	{
		case 'A':
		case 'a':
			if(dir==1)
      f0:	41 30       	cpi	r20, 0x01	; 1
      f2:	69 f4       	brne	.+26     	; 0x10e <DIO_SET_PIN_DIR+0x58>
			{
				SET_BIT(DDRA,pin);
      f4:	2a b3       	in	r18, 0x1a	; 26
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	ac 01       	movw	r20, r24
      fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_SET_PIN_DIR+0x4c>
      fe:	44 0f       	add	r20, r20
     100:	55 1f       	adc	r21, r21
     102:	6a 95       	dec	r22
     104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_SET_PIN_DIR+0x48>
     106:	ba 01       	movw	r22, r20
     108:	62 2b       	or	r22, r18
     10a:	6a bb       	out	0x1a, r22	; 26
     10c:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRA,pin);
     10e:	2a b3       	in	r18, 0x1a	; 26
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	ac 01       	movw	r20, r24
     116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_SET_PIN_DIR+0x66>
     118:	44 0f       	add	r20, r20
     11a:	55 1f       	adc	r21, r21
     11c:	6a 95       	dec	r22
     11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_SET_PIN_DIR+0x62>
     120:	ba 01       	movw	r22, r20
     122:	60 95       	com	r22
     124:	62 23       	and	r22, r18
     126:	6a bb       	out	0x1a, r22	; 26
     128:	08 95       	ret
			}
			break;
		case 'B':
		case 'b':
			if(dir==1)
     12a:	41 30       	cpi	r20, 0x01	; 1
     12c:	69 f4       	brne	.+26     	; 0x148 <DIO_SET_PIN_DIR+0x92>
			{
				SET_BIT(DDRB,pin);
     12e:	27 b3       	in	r18, 0x17	; 23
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	ac 01       	movw	r20, r24
     136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_SET_PIN_DIR+0x86>
     138:	44 0f       	add	r20, r20
     13a:	55 1f       	adc	r21, r21
     13c:	6a 95       	dec	r22
     13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_SET_PIN_DIR+0x82>
     140:	ba 01       	movw	r22, r20
     142:	62 2b       	or	r22, r18
     144:	67 bb       	out	0x17, r22	; 23
     146:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRB,pin);
     148:	27 b3       	in	r18, 0x17	; 23
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	ac 01       	movw	r20, r24
     150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_SET_PIN_DIR+0xa0>
     152:	44 0f       	add	r20, r20
     154:	55 1f       	adc	r21, r21
     156:	6a 95       	dec	r22
     158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_SET_PIN_DIR+0x9c>
     15a:	ba 01       	movw	r22, r20
     15c:	60 95       	com	r22
     15e:	62 23       	and	r22, r18
     160:	67 bb       	out	0x17, r22	; 23
     162:	08 95       	ret
			}
			break;
		case 'C':
		case 'c':
			if(dir==1)
     164:	41 30       	cpi	r20, 0x01	; 1
     166:	69 f4       	brne	.+26     	; 0x182 <DIO_SET_PIN_DIR+0xcc>
			{
				SET_BIT(DDRC,pin);
     168:	24 b3       	in	r18, 0x14	; 20
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	ac 01       	movw	r20, r24
     170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_SET_PIN_DIR+0xc0>
     172:	44 0f       	add	r20, r20
     174:	55 1f       	adc	r21, r21
     176:	6a 95       	dec	r22
     178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_SET_PIN_DIR+0xbc>
     17a:	ba 01       	movw	r22, r20
     17c:	62 2b       	or	r22, r18
     17e:	64 bb       	out	0x14, r22	; 20
     180:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRC,pin);
     182:	24 b3       	in	r18, 0x14	; 20
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	ac 01       	movw	r20, r24
     18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_SET_PIN_DIR+0xda>
     18c:	44 0f       	add	r20, r20
     18e:	55 1f       	adc	r21, r21
     190:	6a 95       	dec	r22
     192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_SET_PIN_DIR+0xd6>
     194:	ba 01       	movw	r22, r20
     196:	60 95       	com	r22
     198:	62 23       	and	r22, r18
     19a:	64 bb       	out	0x14, r22	; 20
     19c:	08 95       	ret
			}
			break;
		case 'D':
		case 'd':
			if(dir==1)
     19e:	41 30       	cpi	r20, 0x01	; 1
     1a0:	69 f4       	brne	.+26     	; 0x1bc <DIO_SET_PIN_DIR+0x106>
			{
				SET_BIT(DDRD,pin);
     1a2:	21 b3       	in	r18, 0x11	; 17
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	ac 01       	movw	r20, r24
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_SET_PIN_DIR+0xfa>
     1ac:	44 0f       	add	r20, r20
     1ae:	55 1f       	adc	r21, r21
     1b0:	6a 95       	dec	r22
     1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_SET_PIN_DIR+0xf6>
     1b4:	ba 01       	movw	r22, r20
     1b6:	62 2b       	or	r22, r18
     1b8:	61 bb       	out	0x11, r22	; 17
     1ba:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRD,pin);
     1bc:	21 b3       	in	r18, 0x11	; 17
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	ac 01       	movw	r20, r24
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_SET_PIN_DIR+0x114>
     1c6:	44 0f       	add	r20, r20
     1c8:	55 1f       	adc	r21, r21
     1ca:	6a 95       	dec	r22
     1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_SET_PIN_DIR+0x110>
     1ce:	ba 01       	movw	r22, r20
     1d0:	60 95       	com	r22
     1d2:	62 23       	and	r22, r18
     1d4:	61 bb       	out	0x11, r22	; 17
     1d6:	08 95       	ret

000001d8 <DIO_WRITE_PIN>:
		break;	
	}
}
void DIO_WRITE_PIN(unsigned char port,unsigned char pin,unsigned char val)
{
	switch(port)
     1d8:	84 34       	cpi	r24, 0x44	; 68
     1da:	09 f4       	brne	.+2      	; 0x1de <DIO_WRITE_PIN+0x6>
     1dc:	71 c0       	rjmp	.+226    	; 0x2c0 <DIO_WRITE_PIN+0xe8>
     1de:	85 34       	cpi	r24, 0x45	; 69
     1e0:	48 f4       	brcc	.+18     	; 0x1f4 <DIO_WRITE_PIN+0x1c>
     1e2:	82 34       	cpi	r24, 0x42	; 66
     1e4:	99 f1       	breq	.+102    	; 0x24c <DIO_WRITE_PIN+0x74>
     1e6:	83 34       	cpi	r24, 0x43	; 67
     1e8:	08 f0       	brcs	.+2      	; 0x1ec <DIO_WRITE_PIN+0x14>
     1ea:	4d c0       	rjmp	.+154    	; 0x286 <DIO_WRITE_PIN+0xae>
     1ec:	81 34       	cpi	r24, 0x41	; 65
     1ee:	09 f0       	breq	.+2      	; 0x1f2 <DIO_WRITE_PIN+0x1a>
     1f0:	83 c0       	rjmp	.+262    	; 0x2f8 <DIO_WRITE_PIN+0x120>
     1f2:	0f c0       	rjmp	.+30     	; 0x212 <DIO_WRITE_PIN+0x3a>
     1f4:	82 36       	cpi	r24, 0x62	; 98
     1f6:	51 f1       	breq	.+84     	; 0x24c <DIO_WRITE_PIN+0x74>
     1f8:	83 36       	cpi	r24, 0x63	; 99
     1fa:	20 f4       	brcc	.+8      	; 0x204 <DIO_WRITE_PIN+0x2c>
     1fc:	81 36       	cpi	r24, 0x61	; 97
     1fe:	09 f0       	breq	.+2      	; 0x202 <DIO_WRITE_PIN+0x2a>
     200:	7b c0       	rjmp	.+246    	; 0x2f8 <DIO_WRITE_PIN+0x120>
     202:	07 c0       	rjmp	.+14     	; 0x212 <DIO_WRITE_PIN+0x3a>
     204:	83 36       	cpi	r24, 0x63	; 99
     206:	09 f4       	brne	.+2      	; 0x20a <DIO_WRITE_PIN+0x32>
     208:	3e c0       	rjmp	.+124    	; 0x286 <DIO_WRITE_PIN+0xae>
     20a:	84 36       	cpi	r24, 0x64	; 100
     20c:	09 f0       	breq	.+2      	; 0x210 <DIO_WRITE_PIN+0x38>
     20e:	74 c0       	rjmp	.+232    	; 0x2f8 <DIO_WRITE_PIN+0x120>
     210:	57 c0       	rjmp	.+174    	; 0x2c0 <DIO_WRITE_PIN+0xe8>
	{
		case 'A':
		case 'a':
		if(val==1)
     212:	41 30       	cpi	r20, 0x01	; 1
     214:	69 f4       	brne	.+26     	; 0x230 <DIO_WRITE_PIN+0x58>
		{
			SET_BIT(PORTA,pin);
     216:	2b b3       	in	r18, 0x1b	; 27
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	ac 01       	movw	r20, r24
     21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_WRITE_PIN+0x4c>
     220:	44 0f       	add	r20, r20
     222:	55 1f       	adc	r21, r21
     224:	6a 95       	dec	r22
     226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_WRITE_PIN+0x48>
     228:	ba 01       	movw	r22, r20
     22a:	62 2b       	or	r22, r18
     22c:	6b bb       	out	0x1b, r22	; 27
     22e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin);
     230:	2b b3       	in	r18, 0x1b	; 27
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	ac 01       	movw	r20, r24
     238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_WRITE_PIN+0x66>
     23a:	44 0f       	add	r20, r20
     23c:	55 1f       	adc	r21, r21
     23e:	6a 95       	dec	r22
     240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_WRITE_PIN+0x62>
     242:	ba 01       	movw	r22, r20
     244:	60 95       	com	r22
     246:	62 23       	and	r22, r18
     248:	6b bb       	out	0x1b, r22	; 27
     24a:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if(val==1)
     24c:	41 30       	cpi	r20, 0x01	; 1
     24e:	69 f4       	brne	.+26     	; 0x26a <DIO_WRITE_PIN+0x92>
		{
			SET_BIT(PORTB,pin);
     250:	28 b3       	in	r18, 0x18	; 24
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	ac 01       	movw	r20, r24
     258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_WRITE_PIN+0x86>
     25a:	44 0f       	add	r20, r20
     25c:	55 1f       	adc	r21, r21
     25e:	6a 95       	dec	r22
     260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_WRITE_PIN+0x82>
     262:	ba 01       	movw	r22, r20
     264:	62 2b       	or	r22, r18
     266:	68 bb       	out	0x18, r22	; 24
     268:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin);
     26a:	28 b3       	in	r18, 0x18	; 24
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	ac 01       	movw	r20, r24
     272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_WRITE_PIN+0xa0>
     274:	44 0f       	add	r20, r20
     276:	55 1f       	adc	r21, r21
     278:	6a 95       	dec	r22
     27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_WRITE_PIN+0x9c>
     27c:	ba 01       	movw	r22, r20
     27e:	60 95       	com	r22
     280:	62 23       	and	r22, r18
     282:	68 bb       	out	0x18, r22	; 24
     284:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if(val==1)
     286:	41 30       	cpi	r20, 0x01	; 1
     288:	69 f4       	brne	.+26     	; 0x2a4 <DIO_WRITE_PIN+0xcc>
		{
			SET_BIT(PORTC,pin);
     28a:	25 b3       	in	r18, 0x15	; 21
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	ac 01       	movw	r20, r24
     292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_WRITE_PIN+0xc0>
     294:	44 0f       	add	r20, r20
     296:	55 1f       	adc	r21, r21
     298:	6a 95       	dec	r22
     29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_WRITE_PIN+0xbc>
     29c:	ba 01       	movw	r22, r20
     29e:	62 2b       	or	r22, r18
     2a0:	65 bb       	out	0x15, r22	; 21
     2a2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin);
     2a4:	25 b3       	in	r18, 0x15	; 21
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	ac 01       	movw	r20, r24
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_WRITE_PIN+0xda>
     2ae:	44 0f       	add	r20, r20
     2b0:	55 1f       	adc	r21, r21
     2b2:	6a 95       	dec	r22
     2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_WRITE_PIN+0xd6>
     2b6:	ba 01       	movw	r22, r20
     2b8:	60 95       	com	r22
     2ba:	62 23       	and	r22, r18
     2bc:	65 bb       	out	0x15, r22	; 21
     2be:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if(val==1)
     2c0:	41 30       	cpi	r20, 0x01	; 1
     2c2:	69 f4       	brne	.+26     	; 0x2de <DIO_WRITE_PIN+0x106>
		{
			SET_BIT(PORTD,pin);
     2c4:	22 b3       	in	r18, 0x12	; 18
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	ac 01       	movw	r20, r24
     2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_WRITE_PIN+0xfa>
     2ce:	44 0f       	add	r20, r20
     2d0:	55 1f       	adc	r21, r21
     2d2:	6a 95       	dec	r22
     2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_WRITE_PIN+0xf6>
     2d6:	ba 01       	movw	r22, r20
     2d8:	62 2b       	or	r22, r18
     2da:	62 bb       	out	0x12, r22	; 18
     2dc:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pin);
     2de:	22 b3       	in	r18, 0x12	; 18
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	ac 01       	movw	r20, r24
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_WRITE_PIN+0x114>
     2e8:	44 0f       	add	r20, r20
     2ea:	55 1f       	adc	r21, r21
     2ec:	6a 95       	dec	r22
     2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_WRITE_PIN+0x110>
     2f0:	ba 01       	movw	r22, r20
     2f2:	60 95       	com	r22
     2f4:	62 23       	and	r22, r18
     2f6:	62 bb       	out	0x12, r22	; 18
     2f8:	08 95       	ret

000002fa <DIO_TOGGLE_PIN>:
		break;
	}
}
void DIO_TOGGLE_PIN(unsigned char port,unsigned char pin)
{
	switch(port)
     2fa:	84 34       	cpi	r24, 0x44	; 68
     2fc:	09 f4       	brne	.+2      	; 0x300 <DIO_TOGGLE_PIN+0x6>
     2fe:	3d c0       	rjmp	.+122    	; 0x37a <DIO_TOGGLE_PIN+0x80>
     300:	85 34       	cpi	r24, 0x45	; 69
     302:	40 f4       	brcc	.+16     	; 0x314 <DIO_TOGGLE_PIN+0x1a>
     304:	82 34       	cpi	r24, 0x42	; 66
     306:	f9 f0       	breq	.+62     	; 0x346 <DIO_TOGGLE_PIN+0x4c>
     308:	83 34       	cpi	r24, 0x43	; 67
     30a:	50 f5       	brcc	.+84     	; 0x360 <DIO_TOGGLE_PIN+0x66>
     30c:	81 34       	cpi	r24, 0x41	; 65
     30e:	09 f0       	breq	.+2      	; 0x312 <DIO_TOGGLE_PIN+0x18>
     310:	40 c0       	rjmp	.+128    	; 0x392 <DIO_TOGGLE_PIN+0x98>
     312:	0c c0       	rjmp	.+24     	; 0x32c <DIO_TOGGLE_PIN+0x32>
     314:	82 36       	cpi	r24, 0x62	; 98
     316:	b9 f0       	breq	.+46     	; 0x346 <DIO_TOGGLE_PIN+0x4c>
     318:	83 36       	cpi	r24, 0x63	; 99
     31a:	18 f4       	brcc	.+6      	; 0x322 <DIO_TOGGLE_PIN+0x28>
     31c:	81 36       	cpi	r24, 0x61	; 97
     31e:	c9 f5       	brne	.+114    	; 0x392 <DIO_TOGGLE_PIN+0x98>
     320:	05 c0       	rjmp	.+10     	; 0x32c <DIO_TOGGLE_PIN+0x32>
     322:	83 36       	cpi	r24, 0x63	; 99
     324:	e9 f0       	breq	.+58     	; 0x360 <DIO_TOGGLE_PIN+0x66>
     326:	84 36       	cpi	r24, 0x64	; 100
     328:	a1 f5       	brne	.+104    	; 0x392 <DIO_TOGGLE_PIN+0x98>
     32a:	27 c0       	rjmp	.+78     	; 0x37a <DIO_TOGGLE_PIN+0x80>
	{
		case 'A':
		case 'a':
		TOG_BIT(PORTA,pin);
     32c:	2b b3       	in	r18, 0x1b	; 27
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	ac 01       	movw	r20, r24
     334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_TOGGLE_PIN+0x40>
     336:	44 0f       	add	r20, r20
     338:	55 1f       	adc	r21, r21
     33a:	6a 95       	dec	r22
     33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_TOGGLE_PIN+0x3c>
     33e:	ba 01       	movw	r22, r20
     340:	62 27       	eor	r22, r18
     342:	6b bb       	out	0x1b, r22	; 27
		break;
     344:	08 95       	ret
		case 'B':
		case 'b':
		TOG_BIT(PORTB,pin);
     346:	28 b3       	in	r18, 0x18	; 24
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	ac 01       	movw	r20, r24
     34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_TOGGLE_PIN+0x5a>
     350:	44 0f       	add	r20, r20
     352:	55 1f       	adc	r21, r21
     354:	6a 95       	dec	r22
     356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_TOGGLE_PIN+0x56>
     358:	ba 01       	movw	r22, r20
     35a:	62 27       	eor	r22, r18
     35c:	68 bb       	out	0x18, r22	; 24
		break;
     35e:	08 95       	ret
		case 'C':
		case 'c':
		TOG_BIT(PORTC,pin);
     360:	25 b3       	in	r18, 0x15	; 21
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	ac 01       	movw	r20, r24
     368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_TOGGLE_PIN+0x74>
     36a:	44 0f       	add	r20, r20
     36c:	55 1f       	adc	r21, r21
     36e:	6a 95       	dec	r22
     370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_TOGGLE_PIN+0x70>
     372:	ba 01       	movw	r22, r20
     374:	62 27       	eor	r22, r18
     376:	65 bb       	out	0x15, r22	; 21
		break;
     378:	08 95       	ret
		case 'D':
		case 'd':
		TOG_BIT(PORTD,pin);
     37a:	22 b3       	in	r18, 0x12	; 18
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	ac 01       	movw	r20, r24
     382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_TOGGLE_PIN+0x8e>
     384:	44 0f       	add	r20, r20
     386:	55 1f       	adc	r21, r21
     388:	6a 95       	dec	r22
     38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_TOGGLE_PIN+0x8a>
     38c:	ba 01       	movw	r22, r20
     38e:	62 27       	eor	r22, r18
     390:	62 bb       	out	0x12, r22	; 18
     392:	08 95       	ret

00000394 <DIO_u8_READ_PIN>:
	}
}
unsigned char DIO_u8_READ_PIN(unsigned char port,unsigned char pin)
{
	unsigned char val;
	switch(port)
     394:	84 34       	cpi	r24, 0x44	; 68
     396:	09 f4       	brne	.+2      	; 0x39a <DIO_u8_READ_PIN+0x6>
     398:	51 c0       	rjmp	.+162    	; 0x43c <DIO_u8_READ_PIN+0xa8>
     39a:	85 34       	cpi	r24, 0x45	; 69
     39c:	40 f4       	brcc	.+16     	; 0x3ae <DIO_u8_READ_PIN+0x1a>
     39e:	82 34       	cpi	r24, 0x42	; 66
     3a0:	39 f1       	breq	.+78     	; 0x3f0 <DIO_u8_READ_PIN+0x5c>
     3a2:	83 34       	cpi	r24, 0x43	; 67
     3a4:	c0 f5       	brcc	.+112    	; 0x416 <DIO_u8_READ_PIN+0x82>
     3a6:	81 34       	cpi	r24, 0x41	; 65
     3a8:	09 f0       	breq	.+2      	; 0x3ac <DIO_u8_READ_PIN+0x18>
     3aa:	5a c0       	rjmp	.+180    	; 0x460 <DIO_u8_READ_PIN+0xcc>
     3ac:	0e c0       	rjmp	.+28     	; 0x3ca <DIO_u8_READ_PIN+0x36>
     3ae:	82 36       	cpi	r24, 0x62	; 98
     3b0:	f9 f0       	breq	.+62     	; 0x3f0 <DIO_u8_READ_PIN+0x5c>
     3b2:	83 36       	cpi	r24, 0x63	; 99
     3b4:	20 f4       	brcc	.+8      	; 0x3be <DIO_u8_READ_PIN+0x2a>
     3b6:	81 36       	cpi	r24, 0x61	; 97
     3b8:	09 f0       	breq	.+2      	; 0x3bc <DIO_u8_READ_PIN+0x28>
     3ba:	52 c0       	rjmp	.+164    	; 0x460 <DIO_u8_READ_PIN+0xcc>
     3bc:	06 c0       	rjmp	.+12     	; 0x3ca <DIO_u8_READ_PIN+0x36>
     3be:	83 36       	cpi	r24, 0x63	; 99
     3c0:	51 f1       	breq	.+84     	; 0x416 <DIO_u8_READ_PIN+0x82>
     3c2:	84 36       	cpi	r24, 0x64	; 100
     3c4:	09 f0       	breq	.+2      	; 0x3c8 <DIO_u8_READ_PIN+0x34>
     3c6:	4c c0       	rjmp	.+152    	; 0x460 <DIO_u8_READ_PIN+0xcc>
     3c8:	39 c0       	rjmp	.+114    	; 0x43c <DIO_u8_READ_PIN+0xa8>
	{
		case 'A':
		case 'a':
		val=READ_BIT(PINA,pin);
     3ca:	29 b3       	in	r18, 0x19	; 25
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	06 2e       	mov	r0, r22
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_u8_READ_PIN+0x44>
     3d4:	88 0f       	add	r24, r24
     3d6:	99 1f       	adc	r25, r25
     3d8:	0a 94       	dec	r0
     3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_u8_READ_PIN+0x40>
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	82 23       	and	r24, r18
     3e0:	93 23       	and	r25, r19
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_u8_READ_PIN+0x54>
     3e4:	96 95       	lsr	r25
     3e6:	87 95       	ror	r24
     3e8:	6a 95       	dec	r22
     3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_u8_READ_PIN+0x50>
     3ec:	98 2f       	mov	r25, r24
		break;
     3ee:	38 c0       	rjmp	.+112    	; 0x460 <DIO_u8_READ_PIN+0xcc>
		case 'B':
		case 'b':
		val=READ_BIT(PINB,pin);
     3f0:	26 b3       	in	r18, 0x16	; 22
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	06 2e       	mov	r0, r22
     3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_u8_READ_PIN+0x6a>
     3fa:	88 0f       	add	r24, r24
     3fc:	99 1f       	adc	r25, r25
     3fe:	0a 94       	dec	r0
     400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_u8_READ_PIN+0x66>
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	82 23       	and	r24, r18
     406:	93 23       	and	r25, r19
     408:	02 c0       	rjmp	.+4      	; 0x40e <DIO_u8_READ_PIN+0x7a>
     40a:	96 95       	lsr	r25
     40c:	87 95       	ror	r24
     40e:	6a 95       	dec	r22
     410:	e2 f7       	brpl	.-8      	; 0x40a <DIO_u8_READ_PIN+0x76>
     412:	98 2f       	mov	r25, r24
		break;
     414:	25 c0       	rjmp	.+74     	; 0x460 <DIO_u8_READ_PIN+0xcc>
		case 'C':
		case 'c':
		val=READ_BIT(PINC,pin);
     416:	23 b3       	in	r18, 0x13	; 19
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	06 2e       	mov	r0, r22
     41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_u8_READ_PIN+0x90>
     420:	88 0f       	add	r24, r24
     422:	99 1f       	adc	r25, r25
     424:	0a 94       	dec	r0
     426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_u8_READ_PIN+0x8c>
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	82 23       	and	r24, r18
     42c:	93 23       	and	r25, r19
     42e:	02 c0       	rjmp	.+4      	; 0x434 <DIO_u8_READ_PIN+0xa0>
     430:	96 95       	lsr	r25
     432:	87 95       	ror	r24
     434:	6a 95       	dec	r22
     436:	e2 f7       	brpl	.-8      	; 0x430 <DIO_u8_READ_PIN+0x9c>
     438:	98 2f       	mov	r25, r24
		break;
     43a:	12 c0       	rjmp	.+36     	; 0x460 <DIO_u8_READ_PIN+0xcc>
		case 'D':
		case 'd':
		val=READ_BIT(PIND,pin);
     43c:	20 b3       	in	r18, 0x10	; 16
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	06 2e       	mov	r0, r22
     444:	02 c0       	rjmp	.+4      	; 0x44a <DIO_u8_READ_PIN+0xb6>
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	0a 94       	dec	r0
     44c:	e2 f7       	brpl	.-8      	; 0x446 <DIO_u8_READ_PIN+0xb2>
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	82 23       	and	r24, r18
     452:	93 23       	and	r25, r19
     454:	02 c0       	rjmp	.+4      	; 0x45a <DIO_u8_READ_PIN+0xc6>
     456:	96 95       	lsr	r25
     458:	87 95       	ror	r24
     45a:	6a 95       	dec	r22
     45c:	e2 f7       	brpl	.-8      	; 0x456 <DIO_u8_READ_PIN+0xc2>
     45e:	98 2f       	mov	r25, r24
		break;
	}
	return val;	
}
     460:	89 2f       	mov	r24, r25
     462:	08 95       	ret

00000464 <DIO_SET_PORT_DIR>:
void DIO_SET_PORT_DIR(unsigned char port,unsigned char dir)
{
	switch(port)
     464:	84 34       	cpi	r24, 0x44	; 68
     466:	d9 f0       	breq	.+54     	; 0x49e <DIO_SET_PORT_DIR+0x3a>
     468:	85 34       	cpi	r24, 0x45	; 69
     46a:	38 f4       	brcc	.+14     	; 0x47a <DIO_SET_PORT_DIR+0x16>
     46c:	82 34       	cpi	r24, 0x42	; 66
     46e:	99 f0       	breq	.+38     	; 0x496 <DIO_SET_PORT_DIR+0x32>
     470:	83 34       	cpi	r24, 0x43	; 67
     472:	98 f4       	brcc	.+38     	; 0x49a <DIO_SET_PORT_DIR+0x36>
     474:	81 34       	cpi	r24, 0x41	; 65
     476:	a1 f4       	brne	.+40     	; 0x4a0 <DIO_SET_PORT_DIR+0x3c>
     478:	0c c0       	rjmp	.+24     	; 0x492 <DIO_SET_PORT_DIR+0x2e>
     47a:	82 36       	cpi	r24, 0x62	; 98
     47c:	61 f0       	breq	.+24     	; 0x496 <DIO_SET_PORT_DIR+0x32>
     47e:	83 36       	cpi	r24, 0x63	; 99
     480:	18 f4       	brcc	.+6      	; 0x488 <DIO_SET_PORT_DIR+0x24>
     482:	81 36       	cpi	r24, 0x61	; 97
     484:	69 f4       	brne	.+26     	; 0x4a0 <DIO_SET_PORT_DIR+0x3c>
     486:	05 c0       	rjmp	.+10     	; 0x492 <DIO_SET_PORT_DIR+0x2e>
     488:	83 36       	cpi	r24, 0x63	; 99
     48a:	39 f0       	breq	.+14     	; 0x49a <DIO_SET_PORT_DIR+0x36>
     48c:	84 36       	cpi	r24, 0x64	; 100
     48e:	41 f4       	brne	.+16     	; 0x4a0 <DIO_SET_PORT_DIR+0x3c>
     490:	06 c0       	rjmp	.+12     	; 0x49e <DIO_SET_PORT_DIR+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=dir;
     492:	6a bb       	out	0x1a, r22	; 26
		break;
     494:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=dir;
     496:	67 bb       	out	0x17, r22	; 23
		break;
     498:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=dir;
     49a:	64 bb       	out	0x14, r22	; 20
		break;
     49c:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=dir;
     49e:	61 bb       	out	0x11, r22	; 17
     4a0:	08 95       	ret

000004a2 <DIO_WRITE_PORT>:
		break;
	}
}
void DIO_WRITE_PORT(unsigned char port,unsigned char val)
{
	switch(port)
     4a2:	84 34       	cpi	r24, 0x44	; 68
     4a4:	d9 f0       	breq	.+54     	; 0x4dc <DIO_WRITE_PORT+0x3a>
     4a6:	85 34       	cpi	r24, 0x45	; 69
     4a8:	38 f4       	brcc	.+14     	; 0x4b8 <DIO_WRITE_PORT+0x16>
     4aa:	82 34       	cpi	r24, 0x42	; 66
     4ac:	99 f0       	breq	.+38     	; 0x4d4 <DIO_WRITE_PORT+0x32>
     4ae:	83 34       	cpi	r24, 0x43	; 67
     4b0:	98 f4       	brcc	.+38     	; 0x4d8 <DIO_WRITE_PORT+0x36>
     4b2:	81 34       	cpi	r24, 0x41	; 65
     4b4:	a1 f4       	brne	.+40     	; 0x4de <DIO_WRITE_PORT+0x3c>
     4b6:	0c c0       	rjmp	.+24     	; 0x4d0 <DIO_WRITE_PORT+0x2e>
     4b8:	82 36       	cpi	r24, 0x62	; 98
     4ba:	61 f0       	breq	.+24     	; 0x4d4 <DIO_WRITE_PORT+0x32>
     4bc:	83 36       	cpi	r24, 0x63	; 99
     4be:	18 f4       	brcc	.+6      	; 0x4c6 <DIO_WRITE_PORT+0x24>
     4c0:	81 36       	cpi	r24, 0x61	; 97
     4c2:	69 f4       	brne	.+26     	; 0x4de <DIO_WRITE_PORT+0x3c>
     4c4:	05 c0       	rjmp	.+10     	; 0x4d0 <DIO_WRITE_PORT+0x2e>
     4c6:	83 36       	cpi	r24, 0x63	; 99
     4c8:	39 f0       	breq	.+14     	; 0x4d8 <DIO_WRITE_PORT+0x36>
     4ca:	84 36       	cpi	r24, 0x64	; 100
     4cc:	41 f4       	brne	.+16     	; 0x4de <DIO_WRITE_PORT+0x3c>
     4ce:	06 c0       	rjmp	.+12     	; 0x4dc <DIO_WRITE_PORT+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=val;
     4d0:	6b bb       	out	0x1b, r22	; 27
		break;
     4d2:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=val;
     4d4:	68 bb       	out	0x18, r22	; 24
		break;
     4d6:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=val;
     4d8:	65 bb       	out	0x15, r22	; 21
		break;
     4da:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=val;
     4dc:	62 bb       	out	0x12, r22	; 18
     4de:	08 95       	ret

000004e0 <DIO_u8_READ_PORT>:
	}
}
unsigned char DIO_u8_READ_PORT(unsigned char port)
{
	unsigned char val;
	switch(port)
     4e0:	84 34       	cpi	r24, 0x44	; 68
     4e2:	d9 f0       	breq	.+54     	; 0x51a <DIO_u8_READ_PORT+0x3a>
     4e4:	85 34       	cpi	r24, 0x45	; 69
     4e6:	38 f4       	brcc	.+14     	; 0x4f6 <DIO_u8_READ_PORT+0x16>
     4e8:	82 34       	cpi	r24, 0x42	; 66
     4ea:	99 f0       	breq	.+38     	; 0x512 <DIO_u8_READ_PORT+0x32>
     4ec:	83 34       	cpi	r24, 0x43	; 67
     4ee:	98 f4       	brcc	.+38     	; 0x516 <DIO_u8_READ_PORT+0x36>
     4f0:	81 34       	cpi	r24, 0x41	; 65
     4f2:	a1 f4       	brne	.+40     	; 0x51c <DIO_u8_READ_PORT+0x3c>
     4f4:	0c c0       	rjmp	.+24     	; 0x50e <DIO_u8_READ_PORT+0x2e>
     4f6:	82 36       	cpi	r24, 0x62	; 98
     4f8:	61 f0       	breq	.+24     	; 0x512 <DIO_u8_READ_PORT+0x32>
     4fa:	83 36       	cpi	r24, 0x63	; 99
     4fc:	18 f4       	brcc	.+6      	; 0x504 <DIO_u8_READ_PORT+0x24>
     4fe:	81 36       	cpi	r24, 0x61	; 97
     500:	69 f4       	brne	.+26     	; 0x51c <DIO_u8_READ_PORT+0x3c>
     502:	05 c0       	rjmp	.+10     	; 0x50e <DIO_u8_READ_PORT+0x2e>
     504:	83 36       	cpi	r24, 0x63	; 99
     506:	39 f0       	breq	.+14     	; 0x516 <DIO_u8_READ_PORT+0x36>
     508:	84 36       	cpi	r24, 0x64	; 100
     50a:	41 f4       	brne	.+16     	; 0x51c <DIO_u8_READ_PORT+0x3c>
     50c:	06 c0       	rjmp	.+12     	; 0x51a <DIO_u8_READ_PORT+0x3a>
	{
		case 'A':
		case 'a':
		val=PINA;
     50e:	99 b3       	in	r25, 0x19	; 25
		break;
     510:	05 c0       	rjmp	.+10     	; 0x51c <DIO_u8_READ_PORT+0x3c>
		case 'B':
		case 'b':
		val=PINB;
     512:	96 b3       	in	r25, 0x16	; 22
		break;
     514:	03 c0       	rjmp	.+6      	; 0x51c <DIO_u8_READ_PORT+0x3c>
		case 'C':
		case 'c':
		val=PINC;
     516:	93 b3       	in	r25, 0x13	; 19
		break;
     518:	01 c0       	rjmp	.+2      	; 0x51c <DIO_u8_READ_PORT+0x3c>
		case 'D':
		case 'd':
		val=PIND;
     51a:	90 b3       	in	r25, 0x10	; 16
		break;
	}
	return val;
}
     51c:	89 2f       	mov	r24, r25
     51e:	08 95       	ret

00000520 <DIO_TOGGLE_PORT>:
void DIO_TOGGLE_PORT (unsigned char port)
{
	switch(port)
     520:	84 34       	cpi	r24, 0x44	; 68
     522:	09 f1       	breq	.+66     	; 0x566 <DIO_TOGGLE_PORT+0x46>
     524:	85 34       	cpi	r24, 0x45	; 69
     526:	38 f4       	brcc	.+14     	; 0x536 <DIO_TOGGLE_PORT+0x16>
     528:	82 34       	cpi	r24, 0x42	; 66
     52a:	a9 f0       	breq	.+42     	; 0x556 <DIO_TOGGLE_PORT+0x36>
     52c:	83 34       	cpi	r24, 0x43	; 67
     52e:	b8 f4       	brcc	.+46     	; 0x55e <DIO_TOGGLE_PORT+0x3e>
     530:	81 34       	cpi	r24, 0x41	; 65
     532:	e1 f4       	brne	.+56     	; 0x56c <DIO_TOGGLE_PORT+0x4c>
     534:	0c c0       	rjmp	.+24     	; 0x54e <DIO_TOGGLE_PORT+0x2e>
     536:	82 36       	cpi	r24, 0x62	; 98
     538:	71 f0       	breq	.+28     	; 0x556 <DIO_TOGGLE_PORT+0x36>
     53a:	83 36       	cpi	r24, 0x63	; 99
     53c:	18 f4       	brcc	.+6      	; 0x544 <DIO_TOGGLE_PORT+0x24>
     53e:	81 36       	cpi	r24, 0x61	; 97
     540:	a9 f4       	brne	.+42     	; 0x56c <DIO_TOGGLE_PORT+0x4c>
     542:	05 c0       	rjmp	.+10     	; 0x54e <DIO_TOGGLE_PORT+0x2e>
     544:	83 36       	cpi	r24, 0x63	; 99
     546:	59 f0       	breq	.+22     	; 0x55e <DIO_TOGGLE_PORT+0x3e>
     548:	84 36       	cpi	r24, 0x64	; 100
     54a:	81 f4       	brne	.+32     	; 0x56c <DIO_TOGGLE_PORT+0x4c>
     54c:	0c c0       	rjmp	.+24     	; 0x566 <DIO_TOGGLE_PORT+0x46>
	{
		case 'A':
		case 'a':
		PORTA=~PORTA;
     54e:	8b b3       	in	r24, 0x1b	; 27
     550:	80 95       	com	r24
     552:	8b bb       	out	0x1b, r24	; 27
		break;
     554:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=~PORTB;
     556:	88 b3       	in	r24, 0x18	; 24
     558:	80 95       	com	r24
     55a:	88 bb       	out	0x18, r24	; 24
		break;
     55c:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=~PORTC;
     55e:	85 b3       	in	r24, 0x15	; 21
     560:	80 95       	com	r24
     562:	85 bb       	out	0x15, r24	; 21
		break;
     564:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=~PORTD;
     566:	82 b3       	in	r24, 0x12	; 18
     568:	80 95       	com	r24
     56a:	82 bb       	out	0x12, r24	; 18
     56c:	08 95       	ret

0000056e <DIO_ENABLE_PULL_UP>:
		break;
	}
}
void DIO_ENABLE_PULL_UP(unsigned char port,unsigned char pin,unsigned char enable)
{
	switch(port)
     56e:	84 34       	cpi	r24, 0x44	; 68
     570:	09 f4       	brne	.+2      	; 0x574 <DIO_ENABLE_PULL_UP+0x6>
     572:	71 c0       	rjmp	.+226    	; 0x656 <DIO_ENABLE_PULL_UP+0xe8>
     574:	85 34       	cpi	r24, 0x45	; 69
     576:	48 f4       	brcc	.+18     	; 0x58a <DIO_ENABLE_PULL_UP+0x1c>
     578:	82 34       	cpi	r24, 0x42	; 66
     57a:	99 f1       	breq	.+102    	; 0x5e2 <DIO_ENABLE_PULL_UP+0x74>
     57c:	83 34       	cpi	r24, 0x43	; 67
     57e:	08 f0       	brcs	.+2      	; 0x582 <DIO_ENABLE_PULL_UP+0x14>
     580:	4d c0       	rjmp	.+154    	; 0x61c <DIO_ENABLE_PULL_UP+0xae>
     582:	81 34       	cpi	r24, 0x41	; 65
     584:	09 f0       	breq	.+2      	; 0x588 <DIO_ENABLE_PULL_UP+0x1a>
     586:	83 c0       	rjmp	.+262    	; 0x68e <DIO_ENABLE_PULL_UP+0x120>
     588:	0f c0       	rjmp	.+30     	; 0x5a8 <DIO_ENABLE_PULL_UP+0x3a>
     58a:	82 36       	cpi	r24, 0x62	; 98
     58c:	51 f1       	breq	.+84     	; 0x5e2 <DIO_ENABLE_PULL_UP+0x74>
     58e:	83 36       	cpi	r24, 0x63	; 99
     590:	20 f4       	brcc	.+8      	; 0x59a <DIO_ENABLE_PULL_UP+0x2c>
     592:	81 36       	cpi	r24, 0x61	; 97
     594:	09 f0       	breq	.+2      	; 0x598 <DIO_ENABLE_PULL_UP+0x2a>
     596:	7b c0       	rjmp	.+246    	; 0x68e <DIO_ENABLE_PULL_UP+0x120>
     598:	07 c0       	rjmp	.+14     	; 0x5a8 <DIO_ENABLE_PULL_UP+0x3a>
     59a:	83 36       	cpi	r24, 0x63	; 99
     59c:	09 f4       	brne	.+2      	; 0x5a0 <DIO_ENABLE_PULL_UP+0x32>
     59e:	3e c0       	rjmp	.+124    	; 0x61c <DIO_ENABLE_PULL_UP+0xae>
     5a0:	84 36       	cpi	r24, 0x64	; 100
     5a2:	09 f0       	breq	.+2      	; 0x5a6 <DIO_ENABLE_PULL_UP+0x38>
     5a4:	74 c0       	rjmp	.+232    	; 0x68e <DIO_ENABLE_PULL_UP+0x120>
     5a6:	57 c0       	rjmp	.+174    	; 0x656 <DIO_ENABLE_PULL_UP+0xe8>
	{
		case 'A':
		case 'a':
		if(enable==1)
     5a8:	41 30       	cpi	r20, 0x01	; 1
     5aa:	69 f4       	brne	.+26     	; 0x5c6 <DIO_ENABLE_PULL_UP+0x58>
		{
			SET_BIT(PORTA,pin);
     5ac:	2b b3       	in	r18, 0x1b	; 27
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	ac 01       	movw	r20, r24
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <DIO_ENABLE_PULL_UP+0x4c>
     5b6:	44 0f       	add	r20, r20
     5b8:	55 1f       	adc	r21, r21
     5ba:	6a 95       	dec	r22
     5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <DIO_ENABLE_PULL_UP+0x48>
     5be:	ba 01       	movw	r22, r20
     5c0:	62 2b       	or	r22, r18
     5c2:	6b bb       	out	0x1b, r22	; 27
     5c4:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin);
     5c6:	2b b3       	in	r18, 0x1b	; 27
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	ac 01       	movw	r20, r24
     5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <DIO_ENABLE_PULL_UP+0x66>
     5d0:	44 0f       	add	r20, r20
     5d2:	55 1f       	adc	r21, r21
     5d4:	6a 95       	dec	r22
     5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <DIO_ENABLE_PULL_UP+0x62>
     5d8:	ba 01       	movw	r22, r20
     5da:	60 95       	com	r22
     5dc:	62 23       	and	r22, r18
     5de:	6b bb       	out	0x1b, r22	; 27
     5e0:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if(enable==1)
     5e2:	41 30       	cpi	r20, 0x01	; 1
     5e4:	69 f4       	brne	.+26     	; 0x600 <DIO_ENABLE_PULL_UP+0x92>
		{
			SET_BIT(PORTB,pin);
     5e6:	28 b3       	in	r18, 0x18	; 24
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	ac 01       	movw	r20, r24
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_ENABLE_PULL_UP+0x86>
     5f0:	44 0f       	add	r20, r20
     5f2:	55 1f       	adc	r21, r21
     5f4:	6a 95       	dec	r22
     5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_ENABLE_PULL_UP+0x82>
     5f8:	ba 01       	movw	r22, r20
     5fa:	62 2b       	or	r22, r18
     5fc:	68 bb       	out	0x18, r22	; 24
     5fe:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin);
     600:	28 b3       	in	r18, 0x18	; 24
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	ac 01       	movw	r20, r24
     608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_ENABLE_PULL_UP+0xa0>
     60a:	44 0f       	add	r20, r20
     60c:	55 1f       	adc	r21, r21
     60e:	6a 95       	dec	r22
     610:	e2 f7       	brpl	.-8      	; 0x60a <DIO_ENABLE_PULL_UP+0x9c>
     612:	ba 01       	movw	r22, r20
     614:	60 95       	com	r22
     616:	62 23       	and	r22, r18
     618:	68 bb       	out	0x18, r22	; 24
     61a:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if(enable==1)
     61c:	41 30       	cpi	r20, 0x01	; 1
     61e:	69 f4       	brne	.+26     	; 0x63a <DIO_ENABLE_PULL_UP+0xcc>
		{
			SET_BIT(PORTC,pin);
     620:	25 b3       	in	r18, 0x15	; 21
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	ac 01       	movw	r20, r24
     628:	02 c0       	rjmp	.+4      	; 0x62e <DIO_ENABLE_PULL_UP+0xc0>
     62a:	44 0f       	add	r20, r20
     62c:	55 1f       	adc	r21, r21
     62e:	6a 95       	dec	r22
     630:	e2 f7       	brpl	.-8      	; 0x62a <DIO_ENABLE_PULL_UP+0xbc>
     632:	ba 01       	movw	r22, r20
     634:	62 2b       	or	r22, r18
     636:	65 bb       	out	0x15, r22	; 21
     638:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin);
     63a:	25 b3       	in	r18, 0x15	; 21
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	ac 01       	movw	r20, r24
     642:	02 c0       	rjmp	.+4      	; 0x648 <DIO_ENABLE_PULL_UP+0xda>
     644:	44 0f       	add	r20, r20
     646:	55 1f       	adc	r21, r21
     648:	6a 95       	dec	r22
     64a:	e2 f7       	brpl	.-8      	; 0x644 <DIO_ENABLE_PULL_UP+0xd6>
     64c:	ba 01       	movw	r22, r20
     64e:	60 95       	com	r22
     650:	62 23       	and	r22, r18
     652:	65 bb       	out	0x15, r22	; 21
     654:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if(enable==1)
     656:	41 30       	cpi	r20, 0x01	; 1
     658:	69 f4       	brne	.+26     	; 0x674 <DIO_ENABLE_PULL_UP+0x106>
		{
			SET_BIT(PORTD,pin);
     65a:	22 b3       	in	r18, 0x12	; 18
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	ac 01       	movw	r20, r24
     662:	02 c0       	rjmp	.+4      	; 0x668 <DIO_ENABLE_PULL_UP+0xfa>
     664:	44 0f       	add	r20, r20
     666:	55 1f       	adc	r21, r21
     668:	6a 95       	dec	r22
     66a:	e2 f7       	brpl	.-8      	; 0x664 <DIO_ENABLE_PULL_UP+0xf6>
     66c:	ba 01       	movw	r22, r20
     66e:	62 2b       	or	r22, r18
     670:	62 bb       	out	0x12, r22	; 18
     672:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pin);
     674:	22 b3       	in	r18, 0x12	; 18
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	ac 01       	movw	r20, r24
     67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_ENABLE_PULL_UP+0x114>
     67e:	44 0f       	add	r20, r20
     680:	55 1f       	adc	r21, r21
     682:	6a 95       	dec	r22
     684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_ENABLE_PULL_UP+0x110>
     686:	ba 01       	movw	r22, r20
     688:	60 95       	com	r22
     68a:	62 23       	and	r22, r18
     68c:	62 bb       	out	0x12, r22	; 18
     68e:	08 95       	ret

00000690 <DIO_WRITE_Lownibble>:
		}
		break;
	}
}
void DIO_WRITE_Lownibble(unsigned char port,unsigned char val)
{
     690:	0f 93       	push	r16
     692:	1f 93       	push	r17
     694:	cf 93       	push	r28
     696:	c8 2f       	mov	r28, r24
     698:	06 2f       	mov	r16, r22
	DIO_WRITE_PIN(port,0,READ_BIT(val,0));
     69a:	46 2f       	mov	r20, r22
     69c:	41 70       	andi	r20, 0x01	; 1
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_WRITE_PIN>
	DIO_WRITE_PIN(port,1,READ_BIT(val,1));
     6a4:	10 e0       	ldi	r17, 0x00	; 0
     6a6:	a8 01       	movw	r20, r16
     6a8:	42 70       	andi	r20, 0x02	; 2
     6aa:	50 70       	andi	r21, 0x00	; 0
     6ac:	56 95       	lsr	r21
     6ae:	47 95       	ror	r20
     6b0:	8c 2f       	mov	r24, r28
     6b2:	61 e0       	ldi	r22, 0x01	; 1
     6b4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_WRITE_PIN>
	DIO_WRITE_PIN(port,2,READ_BIT(val,2));
     6b8:	a8 01       	movw	r20, r16
     6ba:	44 70       	andi	r20, 0x04	; 4
     6bc:	50 70       	andi	r21, 0x00	; 0
     6be:	56 95       	lsr	r21
     6c0:	47 95       	ror	r20
     6c2:	56 95       	lsr	r21
     6c4:	47 95       	ror	r20
     6c6:	8c 2f       	mov	r24, r28
     6c8:	62 e0       	ldi	r22, 0x02	; 2
     6ca:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_WRITE_PIN>
	DIO_WRITE_PIN(port,3,READ_BIT(val,3));
     6ce:	08 70       	andi	r16, 0x08	; 8
     6d0:	10 70       	andi	r17, 0x00	; 0
     6d2:	a8 01       	movw	r20, r16
     6d4:	56 95       	lsr	r21
     6d6:	47 95       	ror	r20
     6d8:	56 95       	lsr	r21
     6da:	47 95       	ror	r20
     6dc:	56 95       	lsr	r21
     6de:	47 95       	ror	r20
     6e0:	8c 2f       	mov	r24, r28
     6e2:	63 e0       	ldi	r22, 0x03	; 3
     6e4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_WRITE_PIN>
		case 'd':
		PORTD&=0xF0;
		PORTD|=val;
		break;
	}*/
}
     6e8:	cf 91       	pop	r28
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	08 95       	ret

000006f0 <DIO_WRITE_Highnibble>:
void DIO_WRITE_Highnibble(unsigned char port,unsigned char val)
{
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	cf 93       	push	r28
     6f6:	c8 2f       	mov	r28, r24
     6f8:	06 2f       	mov	r16, r22
	DIO_WRITE_PIN(port,4,READ_BIT(val,0));
     6fa:	46 2f       	mov	r20, r22
     6fc:	41 70       	andi	r20, 0x01	; 1
     6fe:	64 e0       	ldi	r22, 0x04	; 4
     700:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_WRITE_PIN>
	DIO_WRITE_PIN(port,5,READ_BIT(val,1));
     704:	10 e0       	ldi	r17, 0x00	; 0
     706:	a8 01       	movw	r20, r16
     708:	42 70       	andi	r20, 0x02	; 2
     70a:	50 70       	andi	r21, 0x00	; 0
     70c:	56 95       	lsr	r21
     70e:	47 95       	ror	r20
     710:	8c 2f       	mov	r24, r28
     712:	65 e0       	ldi	r22, 0x05	; 5
     714:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_WRITE_PIN>
	DIO_WRITE_PIN(port,6,READ_BIT(val,2));
     718:	a8 01       	movw	r20, r16
     71a:	44 70       	andi	r20, 0x04	; 4
     71c:	50 70       	andi	r21, 0x00	; 0
     71e:	56 95       	lsr	r21
     720:	47 95       	ror	r20
     722:	56 95       	lsr	r21
     724:	47 95       	ror	r20
     726:	8c 2f       	mov	r24, r28
     728:	66 e0       	ldi	r22, 0x06	; 6
     72a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_WRITE_PIN>
	DIO_WRITE_PIN(port,7,READ_BIT(val,3));
     72e:	08 70       	andi	r16, 0x08	; 8
     730:	10 70       	andi	r17, 0x00	; 0
     732:	a8 01       	movw	r20, r16
     734:	56 95       	lsr	r21
     736:	47 95       	ror	r20
     738:	56 95       	lsr	r21
     73a:	47 95       	ror	r20
     73c:	56 95       	lsr	r21
     73e:	47 95       	ror	r20
     740:	8c 2f       	mov	r24, r28
     742:	67 e0       	ldi	r22, 0x07	; 7
     744:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_WRITE_PIN>
		case 'd':
		PORTD&=0x0F;
		PORTD|=val;
		break;
	}*/
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	08 95       	ret

00000750 <EEPROM_WRITE>:
#include <avr/io.h>
#include "STD_MACROS.h"
void EEPROM_WRITE(unsigned short address,unsigned char data)
{
	EEAR=address;
     750:	9f bb       	out	0x1f, r25	; 31
     752:	8e bb       	out	0x1e, r24	; 30
	//*((volatile unsigned short*)(0x3E))=address;
	/*EEARL=(char)(address);
	EEARH=(char)(address>>8);*/
	EEDR=data;
     754:	6d bb       	out	0x1d, r22	; 29
	SET_BIT(EECR,EEMWE);
     756:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(EECR,EEWE);
     758:	e1 9a       	sbi	0x1c, 1	; 28
	while((READ_BIT(EECR,EEWE))==1);
     75a:	e1 99       	sbic	0x1c, 1	; 28
     75c:	fe cf       	rjmp	.-4      	; 0x75a <EEPROM_WRITE+0xa>
}
     75e:	08 95       	ret

00000760 <EEPROM_READ>:
unsigned char EEPROM_READ(unsigned short address)
{
	EEAR=address;
     760:	9f bb       	out	0x1f, r25	; 31
     762:	8e bb       	out	0x1e, r24	; 30
	SET_BIT(EECR,EERE);
     764:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
     766:	8d b3       	in	r24, 0x1d	; 29
     768:	08 95       	ret

0000076a <LED_vInit>:
#include "DIO.h"
void LED_vInit(unsigned char port,unsigned char pin)
{
	DIO_SET_PIN_DIR(port,pin,1);
     76a:	41 e0       	ldi	r20, 0x01	; 1
     76c:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SET_PIN_DIR>
}
     770:	08 95       	ret

00000772 <LED_ON>:
void LED_ON(unsigned char port,unsigned char pin)
{
	DIO_WRITE_PIN(port,pin,1);
     772:	41 e0       	ldi	r20, 0x01	; 1
     774:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_WRITE_PIN>
}
     778:	08 95       	ret

0000077a <LED_OFF>:
void LED_OFF(unsigned char port,unsigned char pin)
{
	DIO_WRITE_PIN(port,pin,0);
     77a:	40 e0       	ldi	r20, 0x00	; 0
     77c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_WRITE_PIN>
}
     780:	08 95       	ret

00000782 <LED_TOGGLE>:
void LED_TOGGLE(unsigned char port,unsigned char pin)
{
	DIO_TOGGLE_PIN(port,pin);
     782:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_TOGGLE_PIN>
}
     786:	08 95       	ret

00000788 <LED_READ_STATUS>:
unsigned char LED_READ_STATUS(unsigned char port,unsigned char pin)
{
	return DIO_u8_READ_PIN(port,pin);
     788:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_u8_READ_PIN>
     78c:	08 95       	ret

0000078e <main>:
unsigned char air_on=0xff;
volatile unsigned short counter_timer0=0;
volatile unsigned short counter_timer2=0;
int main(void)
{
	LED_vInit('A',1);
     78e:	81 e4       	ldi	r24, 0x41	; 65
     790:	61 e0       	ldi	r22, 0x01	; 1
     792:	0e 94 b5 03 	call	0x76a	; 0x76a <LED_vInit>
	LED_vInit('A',2);
     796:	81 e4       	ldi	r24, 0x41	; 65
     798:	62 e0       	ldi	r22, 0x02	; 2
     79a:	0e 94 b5 03 	call	0x76a	; 0x76a <LED_vInit>
	LED_vInit('A',3);
     79e:	81 e4       	ldi	r24, 0x41	; 65
     7a0:	63 e0       	ldi	r22, 0x03	; 3
     7a2:	0e 94 b5 03 	call	0x76a	; 0x76a <LED_vInit>
	LED_vInit('A',4);
     7a6:	81 e4       	ldi	r24, 0x41	; 65
     7a8:	64 e0       	ldi	r22, 0x04	; 4
     7aa:	0e 94 b5 03 	call	0x76a	; 0x76a <LED_vInit>
	LED_vInit('A',5);
     7ae:	81 e4       	ldi	r24, 0x41	; 65
     7b0:	65 e0       	ldi	r22, 0x05	; 5
     7b2:	0e 94 b5 03 	call	0x76a	; 0x76a <LED_vInit>
	LED_vInit('A',6);
     7b6:	81 e4       	ldi	r24, 0x41	; 65
     7b8:	66 e0       	ldi	r22, 0x06	; 6
     7ba:	0e 94 b5 03 	call	0x76a	; 0x76a <LED_vInit>
	SPI_vSlaveInit();
     7be:	0e 94 83 06 	call	0xd06	; 0xd06 <SPI_vSlaveInit>
	ADC_Init();
     7c2:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
	TIMER2_CTC_init_interrupt();
     7c6:	0e 94 04 07 	call	0xe08	; 0xe08 <TIMER2_CTC_init_interrupt>
	check_mode=SPI_SlaveReceivechar(0x30);
     7ca:	80 e3       	ldi	r24, 0x30	; 48
     7cc:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
     7d0:	80 93 65 00 	sts	0x0065, r24
	A:
	room_check=SPI_SlaveReceivechar(0x00);
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
     7da:	80 93 6c 00 	sts	0x006C, r24
    while(1)
    {
		switch(check_mode)
     7de:	80 91 65 00 	lds	r24, 0x0065
     7e2:	80 33       	cpi	r24, 0x30	; 48
     7e4:	19 f0       	breq	.+6      	; 0x7ec <main+0x5e>
     7e6:	81 33       	cpi	r24, 0x31	; 49
     7e8:	e1 f7       	brne	.-8      	; 0x7e2 <main+0x54>
     7ea:	05 c1       	rjmp	.+522    	; 0x9f6 <__stack+0x197>
		{
			case '0':
			TIMER0_CTC_MODE_Init();
     7ec:	0e 94 b4 06 	call	0xd68	; 0xd68 <TIMER0_CTC_MODE_Init>
			status_check_r1=DIO_u8_READ_PIN('A',1);
     7f0:	81 e4       	ldi	r24, 0x41	; 65
     7f2:	61 e0       	ldi	r22, 0x01	; 1
     7f4:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_u8_READ_PIN>
     7f8:	80 93 6b 00 	sts	0x006B, r24
			status_check_r2=DIO_u8_READ_PIN('A',2);
     7fc:	81 e4       	ldi	r24, 0x41	; 65
     7fe:	62 e0       	ldi	r22, 0x02	; 2
     800:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_u8_READ_PIN>
     804:	80 93 6a 00 	sts	0x006A, r24
			status_check_r3=DIO_u8_READ_PIN('A',3);
     808:	81 e4       	ldi	r24, 0x41	; 65
     80a:	63 e0       	ldi	r22, 0x03	; 3
     80c:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_u8_READ_PIN>
     810:	80 93 69 00 	sts	0x0069, r24
			status_check_r4=DIO_u8_READ_PIN('A',4);
     814:	81 e4       	ldi	r24, 0x41	; 65
     816:	64 e0       	ldi	r22, 0x04	; 4
     818:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_u8_READ_PIN>
     81c:	80 93 68 00 	sts	0x0068, r24
			switch(room_check)
     820:	80 91 6c 00 	lds	r24, 0x006C
     824:	82 30       	cpi	r24, 0x02	; 2
     826:	61 f1       	breq	.+88     	; 0x880 <__stack+0x21>
     828:	83 30       	cpi	r24, 0x03	; 3
     82a:	18 f4       	brcc	.+6      	; 0x832 <main+0xa4>
     82c:	81 30       	cpi	r24, 0x01	; 1
     82e:	b9 f6       	brne	.-82     	; 0x7de <main+0x50>
     830:	06 c0       	rjmp	.+12     	; 0x83e <main+0xb0>
     832:	83 30       	cpi	r24, 0x03	; 3
     834:	09 f4       	brne	.+2      	; 0x838 <main+0xaa>
     836:	47 c0       	rjmp	.+142    	; 0x8c6 <__stack+0x67>
     838:	84 30       	cpi	r24, 0x04	; 4
     83a:	89 f6       	brne	.-94     	; 0x7de <main+0x50>
     83c:	67 c0       	rjmp	.+206    	; 0x90c <__stack+0xad>
			{
				case 1:
				status_check_r1=DIO_u8_READ_PIN('A',1);
     83e:	81 e4       	ldi	r24, 0x41	; 65
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_u8_READ_PIN>
     846:	80 93 6b 00 	sts	0x006B, r24
				SPI_SlaveReceivechar(status_check_r1);
     84a:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
				option_check=SPI_SlaveReceivechar(0x30);
     84e:	80 e3       	ldi	r24, 0x30	; 48
     850:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
     854:	80 93 66 00 	sts	0x0066, r24
				if(option_check==1)
     858:	81 30       	cpi	r24, 0x01	; 1
     85a:	21 f4       	brne	.+8      	; 0x864 <__stack+0x5>
				{
					LED_ON('A',1);
     85c:	81 e4       	ldi	r24, 0x41	; 65
     85e:	61 e0       	ldi	r22, 0x01	; 1
     860:	0e 94 b9 03 	call	0x772	; 0x772 <LED_ON>
				}
				if(option_check==0)
     864:	80 91 66 00 	lds	r24, 0x0066
     868:	88 23       	and	r24, r24
     86a:	21 f4       	brne	.+8      	; 0x874 <__stack+0x15>
				{
					LED_OFF('A',1);
     86c:	81 e4       	ldi	r24, 0x41	; 65
     86e:	61 e0       	ldi	r22, 0x01	; 1
     870:	0e 94 bd 03 	call	0x77a	; 0x77a <LED_OFF>
				}
				if(option_check==3)
     874:	80 91 66 00 	lds	r24, 0x0066
     878:	83 30       	cpi	r24, 0x03	; 3
     87a:	09 f0       	breq	.+2      	; 0x87e <__stack+0x1f>
     87c:	b0 cf       	rjmp	.-160    	; 0x7de <main+0x50>
     87e:	aa cf       	rjmp	.-172    	; 0x7d4 <main+0x46>
				{
					goto A;
				}
				break;
				case 2:
				status_check_r1=DIO_u8_READ_PIN('A',2);
     880:	81 e4       	ldi	r24, 0x41	; 65
     882:	62 e0       	ldi	r22, 0x02	; 2
     884:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_u8_READ_PIN>
     888:	80 93 6b 00 	sts	0x006B, r24
				SPI_SlaveReceivechar(status_check_r2);
     88c:	80 91 6a 00 	lds	r24, 0x006A
     890:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
				option_check=SPI_SlaveReceivechar(0x30);
     894:	80 e3       	ldi	r24, 0x30	; 48
     896:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
     89a:	80 93 66 00 	sts	0x0066, r24
				if(option_check==1)
     89e:	81 30       	cpi	r24, 0x01	; 1
     8a0:	21 f4       	brne	.+8      	; 0x8aa <__stack+0x4b>
				{
					LED_ON('A',2);
     8a2:	81 e4       	ldi	r24, 0x41	; 65
     8a4:	62 e0       	ldi	r22, 0x02	; 2
     8a6:	0e 94 b9 03 	call	0x772	; 0x772 <LED_ON>
				}
				if(option_check==0)
     8aa:	80 91 66 00 	lds	r24, 0x0066
     8ae:	88 23       	and	r24, r24
     8b0:	21 f4       	brne	.+8      	; 0x8ba <__stack+0x5b>
				{
					LED_OFF('A',2);
     8b2:	81 e4       	ldi	r24, 0x41	; 65
     8b4:	62 e0       	ldi	r22, 0x02	; 2
     8b6:	0e 94 bd 03 	call	0x77a	; 0x77a <LED_OFF>
				}
				if(option_check==3)
     8ba:	80 91 66 00 	lds	r24, 0x0066
     8be:	83 30       	cpi	r24, 0x03	; 3
     8c0:	09 f0       	breq	.+2      	; 0x8c4 <__stack+0x65>
     8c2:	8d cf       	rjmp	.-230    	; 0x7de <main+0x50>
     8c4:	87 cf       	rjmp	.-242    	; 0x7d4 <main+0x46>
				{
					goto A;
				}
				break;
				case 3:
				status_check_r1=DIO_u8_READ_PIN('A',3);
     8c6:	81 e4       	ldi	r24, 0x41	; 65
     8c8:	63 e0       	ldi	r22, 0x03	; 3
     8ca:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_u8_READ_PIN>
     8ce:	80 93 6b 00 	sts	0x006B, r24
				SPI_SlaveReceivechar(status_check_r3);
     8d2:	80 91 69 00 	lds	r24, 0x0069
     8d6:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
				option_check=SPI_SlaveReceivechar(0x30);
     8da:	80 e3       	ldi	r24, 0x30	; 48
     8dc:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
     8e0:	80 93 66 00 	sts	0x0066, r24
				if(option_check==1)
     8e4:	81 30       	cpi	r24, 0x01	; 1
     8e6:	21 f4       	brne	.+8      	; 0x8f0 <__stack+0x91>
				{
					LED_ON('A',3);
     8e8:	81 e4       	ldi	r24, 0x41	; 65
     8ea:	63 e0       	ldi	r22, 0x03	; 3
     8ec:	0e 94 b9 03 	call	0x772	; 0x772 <LED_ON>
				}
				if(option_check==0)
     8f0:	80 91 66 00 	lds	r24, 0x0066
     8f4:	88 23       	and	r24, r24
     8f6:	21 f4       	brne	.+8      	; 0x900 <__stack+0xa1>
				{
					LED_OFF('A',3);
     8f8:	81 e4       	ldi	r24, 0x41	; 65
     8fa:	63 e0       	ldi	r22, 0x03	; 3
     8fc:	0e 94 bd 03 	call	0x77a	; 0x77a <LED_OFF>
				}
				if(option_check==3)
     900:	80 91 66 00 	lds	r24, 0x0066
     904:	83 30       	cpi	r24, 0x03	; 3
     906:	09 f0       	breq	.+2      	; 0x90a <__stack+0xab>
     908:	6a cf       	rjmp	.-300    	; 0x7de <main+0x50>
     90a:	64 cf       	rjmp	.-312    	; 0x7d4 <main+0x46>
					goto A;
				}
				break;
				case 4:
				L:
				option_check=SPI_SlaveReceivechar(0x00);
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
     912:	80 93 66 00 	sts	0x0066, r24
				switch(option_check)
     916:	82 30       	cpi	r24, 0x02	; 2
     918:	21 f1       	breq	.+72     	; 0x962 <__stack+0x103>
     91a:	83 30       	cpi	r24, 0x03	; 3
     91c:	09 f4       	brne	.+2      	; 0x920 <__stack+0xc1>
     91e:	40 c0       	rjmp	.+128    	; 0x9a0 <__stack+0x141>
     920:	81 30       	cpi	r24, 0x01	; 1
     922:	09 f0       	breq	.+2      	; 0x926 <__stack+0xc7>
     924:	5c cf       	rjmp	.-328    	; 0x7de <main+0x50>
				{
					case 1:
					status_check_r4=DIO_u8_READ_PIN('A',4);
     926:	81 e4       	ldi	r24, 0x41	; 65
     928:	64 e0       	ldi	r22, 0x04	; 4
     92a:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_u8_READ_PIN>
     92e:	80 93 68 00 	sts	0x0068, r24
					SPI_SlaveReceivechar(status_check_r4);
     932:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
					D:
					led_option=SPI_SlaveReceivechar(0x30);
     936:	80 e3       	ldi	r24, 0x30	; 48
     938:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
     93c:	80 93 64 00 	sts	0x0064, r24
					if(led_option==1)
     940:	81 30       	cpi	r24, 0x01	; 1
     942:	29 f4       	brne	.+10     	; 0x94e <__stack+0xef>
					{
						LED_ON('A',4);
     944:	81 e4       	ldi	r24, 0x41	; 65
     946:	64 e0       	ldi	r22, 0x04	; 4
     948:	0e 94 b9 03 	call	0x772	; 0x772 <LED_ON>
						goto D;
     94c:	f4 cf       	rjmp	.-24     	; 0x936 <__stack+0xd7>
					}
					if(led_option==0)
     94e:	88 23       	and	r24, r24
     950:	29 f4       	brne	.+10     	; 0x95c <__stack+0xfd>
					{
						LED_OFF('A',4);
     952:	81 e4       	ldi	r24, 0x41	; 65
     954:	64 e0       	ldi	r22, 0x04	; 4
     956:	0e 94 bd 03 	call	0x77a	; 0x77a <LED_OFF>
						goto D;
     95a:	ed cf       	rjmp	.-38     	; 0x936 <__stack+0xd7>
					}
					if(led_option==3)
     95c:	83 30       	cpi	r24, 0x03	; 3
     95e:	b1 f2       	breq	.-84     	; 0x90c <__stack+0xad>
     960:	3e cf       	rjmp	.-388    	; 0x7de <main+0x50>
					{
						goto L;
					}
					break;
					case 2:
					status_check_r5=DIO_u8_READ_PIN('A',5);
     962:	81 e4       	ldi	r24, 0x41	; 65
     964:	65 e0       	ldi	r22, 0x05	; 5
     966:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_u8_READ_PIN>
     96a:	80 93 67 00 	sts	0x0067, r24
					SPI_SlaveReceivechar(status_check_r5);
     96e:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
					P:
					led_option=SPI_SlaveReceivechar(0x30);
     972:	80 e3       	ldi	r24, 0x30	; 48
     974:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
     978:	80 93 64 00 	sts	0x0064, r24
					if(led_option==1)
     97c:	81 30       	cpi	r24, 0x01	; 1
     97e:	29 f4       	brne	.+10     	; 0x98a <__stack+0x12b>
					{
						LED_ON('A',5);
     980:	81 e4       	ldi	r24, 0x41	; 65
     982:	65 e0       	ldi	r22, 0x05	; 5
     984:	0e 94 b9 03 	call	0x772	; 0x772 <LED_ON>
						goto P;
     988:	f4 cf       	rjmp	.-24     	; 0x972 <__stack+0x113>
					}
					if(led_option==0)
     98a:	88 23       	and	r24, r24
     98c:	29 f4       	brne	.+10     	; 0x998 <__stack+0x139>
					{
						LED_OFF('A',5);
     98e:	81 e4       	ldi	r24, 0x41	; 65
     990:	65 e0       	ldi	r22, 0x05	; 5
     992:	0e 94 bd 03 	call	0x77a	; 0x77a <LED_OFF>
						goto P;
     996:	ed cf       	rjmp	.-38     	; 0x972 <__stack+0x113>
					}
					if(led_option==3)
     998:	83 30       	cpi	r24, 0x03	; 3
     99a:	09 f4       	brne	.+2      	; 0x99e <__stack+0x13f>
     99c:	b7 cf       	rjmp	.-146    	; 0x90c <__stack+0xad>
     99e:	1f cf       	rjmp	.-450    	; 0x7de <main+0x50>
						goto L;
					}
					break;
					case 3:
					U:
					air_cond=SPI_SlaveReceivechar(0x50);
     9a0:	80 e5       	ldi	r24, 0x50	; 80
     9a2:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
     9a6:	80 93 63 00 	sts	0x0063, r24
					switch(air_cond)
     9aa:	81 30       	cpi	r24, 0x01	; 1
     9ac:	41 f0       	breq	.+16     	; 0x9be <__stack+0x15f>
     9ae:	81 30       	cpi	r24, 0x01	; 1
     9b0:	b8 f3       	brcs	.-18     	; 0x9a0 <__stack+0x141>
     9b2:	82 30       	cpi	r24, 0x02	; 2
     9b4:	79 f0       	breq	.+30     	; 0x9d4 <__stack+0x175>
     9b6:	83 30       	cpi	r24, 0x03	; 3
     9b8:	09 f0       	breq	.+2      	; 0x9bc <__stack+0x15d>
     9ba:	11 cf       	rjmp	.-478    	; 0x7de <main+0x50>
     9bc:	16 c0       	rjmp	.+44     	; 0x9ea <__stack+0x18b>
					{
						case 1:
						temp=SPI_SlaveReceivechar(0x60);
     9be:	80 e6       	ldi	r24, 0x60	; 96
     9c0:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
     9c4:	68 2f       	mov	r22, r24
     9c6:	80 93 62 00 	sts	0x0062, r24
						EEPROM_WRITE(5,temp);
     9ca:	85 e0       	ldi	r24, 0x05	; 5
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 a8 03 	call	0x750	; 0x750 <EEPROM_WRITE>
						goto U;
     9d2:	e6 cf       	rjmp	.-52     	; 0x9a0 <__stack+0x141>
						break;
						case 2:
						air_cond=SPI_SlaveReceivechar(0x60);
     9d4:	80 e6       	ldi	r24, 0x60	; 96
     9d6:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
     9da:	80 93 63 00 	sts	0x0063, r24
						air_on=SPI_SlaveReceivechar(0x30);
     9de:	80 e3       	ldi	r24, 0x30	; 48
     9e0:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
     9e4:	80 93 60 00 	sts	0x0060, r24
						goto U;
     9e8:	db cf       	rjmp	.-74     	; 0x9a0 <__stack+0x141>
						break;
						case 3:
						air_on=SPI_SlaveReceivechar(0x35);
     9ea:	85 e3       	ldi	r24, 0x35	; 53
     9ec:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
     9f0:	80 93 60 00 	sts	0x0060, r24
						goto U;
     9f4:	d5 cf       	rjmp	.-86     	; 0x9a0 <__stack+0x141>
				}
			}
			break;
			/*guest mode*/
			case '1':
			TIMER0_CTC_MODE_Init();
     9f6:	0e 94 b4 06 	call	0xd68	; 0xd68 <TIMER0_CTC_MODE_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
     9fc:	90 e7       	ldi	r25, 0x70	; 112
     9fe:	a2 e0       	ldi	r26, 0x02	; 2
     a00:	81 50       	subi	r24, 0x01	; 1
     a02:	90 40       	sbci	r25, 0x00	; 0
     a04:	a0 40       	sbci	r26, 0x00	; 0
     a06:	e1 f7       	brne	.-8      	; 0xa00 <__stack+0x1a1>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <__stack+0x1ab>
     a0a:	00 00       	nop
			_delay_ms(100);
			status_check_r1=DIO_u8_READ_PIN('A',1);
     a0c:	81 e4       	ldi	r24, 0x41	; 65
     a0e:	61 e0       	ldi	r22, 0x01	; 1
     a10:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_u8_READ_PIN>
     a14:	80 93 6b 00 	sts	0x006B, r24
			status_check_r2=DIO_u8_READ_PIN('A',2);
     a18:	81 e4       	ldi	r24, 0x41	; 65
     a1a:	62 e0       	ldi	r22, 0x02	; 2
     a1c:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_u8_READ_PIN>
     a20:	80 93 6a 00 	sts	0x006A, r24
			status_check_r3=DIO_u8_READ_PIN('A',3);
     a24:	81 e4       	ldi	r24, 0x41	; 65
     a26:	63 e0       	ldi	r22, 0x03	; 3
     a28:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_u8_READ_PIN>
     a2c:	80 93 69 00 	sts	0x0069, r24
			status_check_r4=DIO_u8_READ_PIN('A',4);
     a30:	81 e4       	ldi	r24, 0x41	; 65
     a32:	64 e0       	ldi	r22, 0x04	; 4
     a34:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_u8_READ_PIN>
     a38:	80 93 68 00 	sts	0x0068, r24
			switch(room_check)
     a3c:	80 91 6c 00 	lds	r24, 0x006C
     a40:	82 30       	cpi	r24, 0x02	; 2
     a42:	31 f1       	breq	.+76     	; 0xa90 <__stack+0x231>
     a44:	83 30       	cpi	r24, 0x03	; 3
     a46:	20 f4       	brcc	.+8      	; 0xa50 <__stack+0x1f1>
     a48:	81 30       	cpi	r24, 0x01	; 1
     a4a:	09 f0       	breq	.+2      	; 0xa4e <__stack+0x1ef>
     a4c:	c8 ce       	rjmp	.-624    	; 0x7de <main+0x50>
     a4e:	07 c0       	rjmp	.+14     	; 0xa5e <__stack+0x1ff>
     a50:	83 30       	cpi	r24, 0x03	; 3
     a52:	09 f4       	brne	.+2      	; 0xa56 <__stack+0x1f7>
     a54:	40 c0       	rjmp	.+128    	; 0xad6 <__stack+0x277>
     a56:	84 30       	cpi	r24, 0x04	; 4
     a58:	09 f0       	breq	.+2      	; 0xa5c <__stack+0x1fd>
     a5a:	c1 ce       	rjmp	.-638    	; 0x7de <main+0x50>
     a5c:	5f c0       	rjmp	.+190    	; 0xb1c <__stack+0x2bd>
			{
				case 1:
				option_check=SPI_SlaveReceivechar(0x30);
     a5e:	80 e3       	ldi	r24, 0x30	; 48
     a60:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
     a64:	80 93 66 00 	sts	0x0066, r24
				if(option_check==1)
     a68:	81 30       	cpi	r24, 0x01	; 1
     a6a:	21 f4       	brne	.+8      	; 0xa74 <__stack+0x215>
				{
					LED_ON('A',1);
     a6c:	81 e4       	ldi	r24, 0x41	; 65
     a6e:	61 e0       	ldi	r22, 0x01	; 1
     a70:	0e 94 b9 03 	call	0x772	; 0x772 <LED_ON>
				}
				if(option_check==0)
     a74:	80 91 66 00 	lds	r24, 0x0066
     a78:	88 23       	and	r24, r24
     a7a:	21 f4       	brne	.+8      	; 0xa84 <__stack+0x225>
				{
					LED_OFF('A',1);
     a7c:	81 e4       	ldi	r24, 0x41	; 65
     a7e:	61 e0       	ldi	r22, 0x01	; 1
     a80:	0e 94 bd 03 	call	0x77a	; 0x77a <LED_OFF>
				}
				if(option_check==3)
     a84:	80 91 66 00 	lds	r24, 0x0066
     a88:	83 30       	cpi	r24, 0x03	; 3
     a8a:	09 f0       	breq	.+2      	; 0xa8e <__stack+0x22f>
     a8c:	a8 ce       	rjmp	.-688    	; 0x7de <main+0x50>
     a8e:	a2 ce       	rjmp	.-700    	; 0x7d4 <main+0x46>
				{
					goto A;
				}
				break;
				case 2:
				status_check_r1=DIO_u8_READ_PIN('A',2);
     a90:	81 e4       	ldi	r24, 0x41	; 65
     a92:	62 e0       	ldi	r22, 0x02	; 2
     a94:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_u8_READ_PIN>
     a98:	80 93 6b 00 	sts	0x006B, r24
				SPI_SlaveReceivechar(status_check_r2);
     a9c:	80 91 6a 00 	lds	r24, 0x006A
     aa0:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
				option_check=SPI_SlaveReceivechar(0x30);
     aa4:	80 e3       	ldi	r24, 0x30	; 48
     aa6:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
     aaa:	80 93 66 00 	sts	0x0066, r24
				if(option_check==1)
     aae:	81 30       	cpi	r24, 0x01	; 1
     ab0:	21 f4       	brne	.+8      	; 0xaba <__stack+0x25b>
				{
					LED_ON('A',2);
     ab2:	81 e4       	ldi	r24, 0x41	; 65
     ab4:	62 e0       	ldi	r22, 0x02	; 2
     ab6:	0e 94 b9 03 	call	0x772	; 0x772 <LED_ON>
				}
				if(option_check==0)
     aba:	80 91 66 00 	lds	r24, 0x0066
     abe:	88 23       	and	r24, r24
     ac0:	21 f4       	brne	.+8      	; 0xaca <__stack+0x26b>
				{
					LED_OFF('A',2);
     ac2:	81 e4       	ldi	r24, 0x41	; 65
     ac4:	62 e0       	ldi	r22, 0x02	; 2
     ac6:	0e 94 bd 03 	call	0x77a	; 0x77a <LED_OFF>
				}
				if(option_check==3)
     aca:	80 91 66 00 	lds	r24, 0x0066
     ace:	83 30       	cpi	r24, 0x03	; 3
     ad0:	09 f0       	breq	.+2      	; 0xad4 <__stack+0x275>
     ad2:	85 ce       	rjmp	.-758    	; 0x7de <main+0x50>
     ad4:	7f ce       	rjmp	.-770    	; 0x7d4 <main+0x46>
				{
					goto A;
				}
				break;
				case 3:
				status_check_r1=DIO_u8_READ_PIN('A',3);
     ad6:	81 e4       	ldi	r24, 0x41	; 65
     ad8:	63 e0       	ldi	r22, 0x03	; 3
     ada:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_u8_READ_PIN>
     ade:	80 93 6b 00 	sts	0x006B, r24
				SPI_SlaveReceivechar(status_check_r3);
     ae2:	80 91 69 00 	lds	r24, 0x0069
     ae6:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
				option_check=SPI_SlaveReceivechar(0x30);
     aea:	80 e3       	ldi	r24, 0x30	; 48
     aec:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
     af0:	80 93 66 00 	sts	0x0066, r24
				if(option_check==1)
     af4:	81 30       	cpi	r24, 0x01	; 1
     af6:	21 f4       	brne	.+8      	; 0xb00 <__stack+0x2a1>
				{
					LED_ON('A',3);
     af8:	81 e4       	ldi	r24, 0x41	; 65
     afa:	63 e0       	ldi	r22, 0x03	; 3
     afc:	0e 94 b9 03 	call	0x772	; 0x772 <LED_ON>
				}
				if(option_check==0)
     b00:	80 91 66 00 	lds	r24, 0x0066
     b04:	88 23       	and	r24, r24
     b06:	21 f4       	brne	.+8      	; 0xb10 <__stack+0x2b1>
				{
					LED_OFF('A',3);
     b08:	81 e4       	ldi	r24, 0x41	; 65
     b0a:	63 e0       	ldi	r22, 0x03	; 3
     b0c:	0e 94 bd 03 	call	0x77a	; 0x77a <LED_OFF>
				}
				if(option_check==3)
     b10:	80 91 66 00 	lds	r24, 0x0066
     b14:	83 30       	cpi	r24, 0x03	; 3
     b16:	09 f0       	breq	.+2      	; 0xb1a <__stack+0x2bb>
     b18:	62 ce       	rjmp	.-828    	; 0x7de <main+0x50>
     b1a:	5c ce       	rjmp	.-840    	; 0x7d4 <main+0x46>
				{
					goto A;
				}
				break;
				case 4:
				status_check_r1=DIO_u8_READ_PIN('A',4);
     b1c:	81 e4       	ldi	r24, 0x41	; 65
     b1e:	64 e0       	ldi	r22, 0x04	; 4
     b20:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_u8_READ_PIN>
     b24:	80 93 6b 00 	sts	0x006B, r24
				SPI_SlaveReceivechar(status_check_r4);
     b28:	80 91 68 00 	lds	r24, 0x0068
     b2c:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
				option_check=SPI_SlaveReceivechar(0x30);
     b30:	80 e3       	ldi	r24, 0x30	; 48
     b32:	0e 94 97 06 	call	0xd2e	; 0xd2e <SPI_SlaveReceivechar>
     b36:	80 93 66 00 	sts	0x0066, r24
				if(option_check==1)
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	21 f4       	brne	.+8      	; 0xb46 <__stack+0x2e7>
				{
					LED_ON('A',4);
     b3e:	81 e4       	ldi	r24, 0x41	; 65
     b40:	64 e0       	ldi	r22, 0x04	; 4
     b42:	0e 94 b9 03 	call	0x772	; 0x772 <LED_ON>
				}
				if(option_check==0)
     b46:	80 91 66 00 	lds	r24, 0x0066
     b4a:	88 23       	and	r24, r24
     b4c:	21 f4       	brne	.+8      	; 0xb56 <__stack+0x2f7>
				{
					LED_OFF('A',4);
     b4e:	81 e4       	ldi	r24, 0x41	; 65
     b50:	64 e0       	ldi	r22, 0x04	; 4
     b52:	0e 94 bd 03 	call	0x77a	; 0x77a <LED_OFF>
				}
				if(option_check==3)
     b56:	80 91 66 00 	lds	r24, 0x0066
     b5a:	83 30       	cpi	r24, 0x03	; 3
     b5c:	09 f4       	brne	.+2      	; 0xb60 <__stack+0x301>
     b5e:	3a ce       	rjmp	.-908    	; 0x7d4 <main+0x46>
     b60:	3e ce       	rjmp	.-900    	; 0x7de <main+0x50>

00000b62 <__vector_10>:
			}
		}
    }
}
ISR(TIMER0_COMP_vect)
{
     b62:	1f 92       	push	r1
     b64:	0f 92       	push	r0
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	0f 92       	push	r0
     b6a:	11 24       	eor	r1, r1
     b6c:	2f 93       	push	r18
     b6e:	3f 93       	push	r19
     b70:	4f 93       	push	r20
     b72:	5f 93       	push	r21
     b74:	6f 93       	push	r22
     b76:	7f 93       	push	r23
     b78:	8f 93       	push	r24
     b7a:	9f 93       	push	r25
     b7c:	af 93       	push	r26
     b7e:	bf 93       	push	r27
     b80:	ef 93       	push	r30
     b82:	ff 93       	push	r31
	counter_timer0++;
     b84:	80 91 70 00 	lds	r24, 0x0070
     b88:	90 91 71 00 	lds	r25, 0x0071
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	90 93 71 00 	sts	0x0071, r25
     b92:	80 93 70 00 	sts	0x0070, r24
	if(counter_timer0==20000)
     b96:	80 91 70 00 	lds	r24, 0x0070
     b9a:	90 91 71 00 	lds	r25, 0x0071
     b9e:	2e e4       	ldi	r18, 0x4E	; 78
     ba0:	80 32       	cpi	r24, 0x20	; 32
     ba2:	92 07       	cpc	r25, r18
     ba4:	21 f5       	brne	.+72     	; 0xbee <__vector_10+0x8c>
	{
		counter_timer0=0;
     ba6:	10 92 71 00 	sts	0x0071, r1
     baa:	10 92 70 00 	sts	0x0070, r1
     bae:	8f ef       	ldi	r24, 0xFF	; 255
     bb0:	99 e6       	ldi	r25, 0x69	; 105
     bb2:	a8 e1       	ldi	r26, 0x18	; 24
     bb4:	81 50       	subi	r24, 0x01	; 1
     bb6:	90 40       	sbci	r25, 0x00	; 0
     bb8:	a0 40       	sbci	r26, 0x00	; 0
     bba:	e1 f7       	brne	.-8      	; 0xbb4 <__vector_10+0x52>
     bbc:	00 c0       	rjmp	.+0      	; 0xbbe <__vector_10+0x5c>
     bbe:	00 00       	nop
		_delay_ms(1000);
		room_check=0xff;
     bc0:	8f ef       	ldi	r24, 0xFF	; 255
     bc2:	80 93 6c 00 	sts	0x006C, r24
		status_check_r1=0xff;
     bc6:	80 93 6b 00 	sts	0x006B, r24
		status_check_r2=0xff;
     bca:	80 93 6a 00 	sts	0x006A, r24
		status_check_r3=0xff;
     bce:	80 93 69 00 	sts	0x0069, r24
		status_check_r4=0xff;
     bd2:	80 93 68 00 	sts	0x0068, r24
		status_check_r5=0xff;
     bd6:	80 93 67 00 	sts	0x0067, r24
		option_check=0xff;
     bda:	80 93 66 00 	sts	0x0066, r24
		check_mode=0xff;
     bde:	80 93 65 00 	sts	0x0065, r24
		led_option=0xff;
     be2:	80 93 64 00 	sts	0x0064, r24
		TIMER0_STOP();
     be6:	0e 94 c4 06 	call	0xd88	; 0xd88 <TIMER0_STOP>
		main();
     bea:	0e 94 c7 03 	call	0x78e	; 0x78e <main>
	}
}
     bee:	ff 91       	pop	r31
     bf0:	ef 91       	pop	r30
     bf2:	bf 91       	pop	r27
     bf4:	af 91       	pop	r26
     bf6:	9f 91       	pop	r25
     bf8:	8f 91       	pop	r24
     bfa:	7f 91       	pop	r23
     bfc:	6f 91       	pop	r22
     bfe:	5f 91       	pop	r21
     c00:	4f 91       	pop	r20
     c02:	3f 91       	pop	r19
     c04:	2f 91       	pop	r18
     c06:	0f 90       	pop	r0
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	0f 90       	pop	r0
     c0c:	1f 90       	pop	r1
     c0e:	18 95       	reti

00000c10 <__vector_4>:
ISR(TIMER2_COMP_vect)
{
     c10:	1f 92       	push	r1
     c12:	0f 92       	push	r0
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	0f 92       	push	r0
     c18:	11 24       	eor	r1, r1
     c1a:	2f 93       	push	r18
     c1c:	3f 93       	push	r19
     c1e:	4f 93       	push	r20
     c20:	5f 93       	push	r21
     c22:	6f 93       	push	r22
     c24:	7f 93       	push	r23
     c26:	8f 93       	push	r24
     c28:	9f 93       	push	r25
     c2a:	af 93       	push	r26
     c2c:	bf 93       	push	r27
     c2e:	ef 93       	push	r30
     c30:	ff 93       	push	r31
	counter_timer2++;
     c32:	80 91 6e 00 	lds	r24, 0x006E
     c36:	90 91 6f 00 	lds	r25, 0x006F
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	90 93 6f 00 	sts	0x006F, r25
     c40:	80 93 6e 00 	sts	0x006E, r24
	if(counter_timer2==10)
     c44:	80 91 6e 00 	lds	r24, 0x006E
     c48:	90 91 6f 00 	lds	r25, 0x006F
     c4c:	8a 30       	cpi	r24, 0x0A	; 10
     c4e:	91 05       	cpc	r25, r1
     c50:	89 f5       	brne	.+98     	; 0xcb4 <__vector_4+0xa4>
	{
		counter_timer2=0;
     c52:	10 92 6f 00 	sts	0x006F, r1
     c56:	10 92 6e 00 	sts	0x006E, r1
		adc_temp=((ADC_READ())*0.25);
     c5a:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC_READ>
     c5e:	bc 01       	movw	r22, r24
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 a2 08 	call	0x1144	; 0x1144 <__floatunsisf>
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	40 e8       	ldi	r20, 0x80	; 128
     c6e:	5e e3       	ldi	r21, 0x3E	; 62
     c70:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__mulsf3>
     c74:	0e 94 76 08 	call	0x10ec	; 0x10ec <__fixunssfsi>
     c78:	60 93 61 00 	sts	0x0061, r22
		EEPROM_WRITE(7,adc_temp);
     c7c:	87 e0       	ldi	r24, 0x07	; 7
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 a8 03 	call	0x750	; 0x750 <EEPROM_WRITE>
		if((adc_temp>=temp))
     c84:	90 91 61 00 	lds	r25, 0x0061
     c88:	80 91 62 00 	lds	r24, 0x0062
     c8c:	98 17       	cp	r25, r24
     c8e:	70 f0       	brcs	.+28     	; 0xcac <__vector_4+0x9c>
		{
			if(air_on==2)
     c90:	80 91 60 00 	lds	r24, 0x0060
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	29 f4       	brne	.+10     	; 0xca2 <__vector_4+0x92>
			{
				LED_ON('A',6);
     c98:	81 e4       	ldi	r24, 0x41	; 65
     c9a:	66 e0       	ldi	r22, 0x06	; 6
     c9c:	0e 94 b9 03 	call	0x772	; 0x772 <LED_ON>
     ca0:	09 c0       	rjmp	.+18     	; 0xcb4 <__vector_4+0xa4>
			}
			else if(air_on!=2)
			{
				LED_OFF('A',6);
     ca2:	81 e4       	ldi	r24, 0x41	; 65
     ca4:	66 e0       	ldi	r22, 0x06	; 6
     ca6:	0e 94 bd 03 	call	0x77a	; 0x77a <LED_OFF>
     caa:	04 c0       	rjmp	.+8      	; 0xcb4 <__vector_4+0xa4>
			}
		}
		else
		{
			LED_OFF('A',6);
     cac:	81 e4       	ldi	r24, 0x41	; 65
     cae:	66 e0       	ldi	r22, 0x06	; 6
     cb0:	0e 94 bd 03 	call	0x77a	; 0x77a <LED_OFF>
		}
	}
     cb4:	ff 91       	pop	r31
     cb6:	ef 91       	pop	r30
     cb8:	bf 91       	pop	r27
     cba:	af 91       	pop	r26
     cbc:	9f 91       	pop	r25
     cbe:	8f 91       	pop	r24
     cc0:	7f 91       	pop	r23
     cc2:	6f 91       	pop	r22
     cc4:	5f 91       	pop	r21
     cc6:	4f 91       	pop	r20
     cc8:	3f 91       	pop	r19
     cca:	2f 91       	pop	r18
     ccc:	0f 90       	pop	r0
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	0f 90       	pop	r0
     cd2:	1f 90       	pop	r1
     cd4:	18 95       	reti

00000cd6 <SPI_vMasterInit>:
#include <avr/io.h>
#define F_CPU 8000000UL
#include <util/delay.h>
void SPI_vMasterInit(void)
{
	DIO_SET_PIN_DIR('B',4,1);//set SS,MOSI and SCK as output
     cd6:	82 e4       	ldi	r24, 0x42	; 66
     cd8:	64 e0       	ldi	r22, 0x04	; 4
     cda:	41 e0       	ldi	r20, 0x01	; 1
     cdc:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('B',5,1);
     ce0:	82 e4       	ldi	r24, 0x42	; 66
     ce2:	65 e0       	ldi	r22, 0x05	; 5
     ce4:	41 e0       	ldi	r20, 0x01	; 1
     ce6:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('B',7,1);
     cea:	82 e4       	ldi	r24, 0x42	; 66
     cec:	67 e0       	ldi	r22, 0x07	; 7
     cee:	41 e0       	ldi	r20, 0x01	; 1
     cf0:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SET_PIN_DIR>
	
	SET_BIT(SPCR,MSTR);//Enable Master mode
     cf4:	6c 9a       	sbi	0x0d, 4	; 13
	
	SET_BIT(SPCR,SPR0);//Set clock fosc/16
     cf6:	68 9a       	sbi	0x0d, 0	; 13
	
	SET_BIT(SPCR,SPE);//Enable SPI
     cf8:	6e 9a       	sbi	0x0d, 6	; 13
	
	DIO_WRITE_PIN('B',4,1);//make ss=1
     cfa:	82 e4       	ldi	r24, 0x42	; 66
     cfc:	64 e0       	ldi	r22, 0x04	; 4
     cfe:	41 e0       	ldi	r20, 0x01	; 1
     d00:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_WRITE_PIN>
}
     d04:	08 95       	ret

00000d06 <SPI_vSlaveInit>:
void SPI_vSlaveInit(void)
{
	SET_BIT(SPCR,SPE);//Enable SPI
     d06:	6e 9a       	sbi	0x0d, 6	; 13
	
	DIO_SET_PIN_DIR('B',6,1);//Set MOSI as output
     d08:	82 e4       	ldi	r24, 0x42	; 66
     d0a:	66 e0       	ldi	r22, 0x06	; 6
     d0c:	41 e0       	ldi	r20, 0x01	; 1
     d0e:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_SET_PIN_DIR>
}
     d12:	08 95       	ret

00000d14 <SPI_MasterTransmitchar>:
unsigned char SPI_MasterTransmitchar(unsigned char data)
{
     d14:	cf 93       	push	r28
     d16:	c8 2f       	mov	r28, r24
	DIO_WRITE_PIN('B',4,0);//Clear SS to select specific SLAVE
     d18:	82 e4       	ldi	r24, 0x42	; 66
     d1a:	64 e0       	ldi	r22, 0x04	; 4
     d1c:	40 e0       	ldi	r20, 0x00	; 0
     d1e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DIO_WRITE_PIN>
	
	SPDR=data;
     d22:	cf b9       	out	0x0f, r28	; 15
	while(READ_BIT(SPSR,SPIF)==0);
     d24:	77 9b       	sbis	0x0e, 7	; 14
     d26:	fe cf       	rjmp	.-4      	; 0xd24 <SPI_MasterTransmitchar+0x10>
	return SPDR;
     d28:	8f b1       	in	r24, 0x0f	; 15
}
     d2a:	cf 91       	pop	r28
     d2c:	08 95       	ret

00000d2e <SPI_SlaveReceivechar>:
unsigned char SPI_SlaveReceivechar(unsigned char data)
{
	SPDR=data;
     d2e:	8f b9       	out	0x0f, r24	; 15
	while(READ_BIT(SPSR,SPIF)==0);
     d30:	77 9b       	sbis	0x0e, 7	; 14
     d32:	fe cf       	rjmp	.-4      	; 0xd30 <SPI_SlaveReceivechar+0x2>
	return SPDR;
     d34:	8f b1       	in	r24, 0x0f	; 15
}
     d36:	08 95       	ret

00000d38 <SPI_MasterTransmitString>:
void SPI_MasterTransmitString(unsigned char* ptr)
{
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	ec 01       	movw	r28, r24
	while((*ptr)!=0)
     d3e:	88 81       	ld	r24, Y
     d40:	88 23       	and	r24, r24
     d42:	79 f0       	breq	.+30     	; 0xd62 <SPI_MasterTransmitString+0x2a>
{
	SPDR=data;
	while(READ_BIT(SPSR,SPIF)==0);
	return SPDR;
}
void SPI_MasterTransmitString(unsigned char* ptr)
     d44:	21 96       	adiw	r28, 0x01	; 1
{
	while((*ptr)!=0)
	{
		SPI_MasterTransmitchar(*ptr);
     d46:	0e 94 8a 06 	call	0xd14	; 0xd14 <SPI_MasterTransmitchar>
     d4a:	8f ef       	ldi	r24, 0xFF	; 255
     d4c:	92 e5       	ldi	r25, 0x52	; 82
     d4e:	a7 e0       	ldi	r26, 0x07	; 7
     d50:	81 50       	subi	r24, 0x01	; 1
     d52:	90 40       	sbci	r25, 0x00	; 0
     d54:	a0 40       	sbci	r26, 0x00	; 0
     d56:	e1 f7       	brne	.-8      	; 0xd50 <SPI_MasterTransmitString+0x18>
     d58:	00 c0       	rjmp	.+0      	; 0xd5a <SPI_MasterTransmitString+0x22>
     d5a:	00 00       	nop
	while(READ_BIT(SPSR,SPIF)==0);
	return SPDR;
}
void SPI_MasterTransmitString(unsigned char* ptr)
{
	while((*ptr)!=0)
     d5c:	89 91       	ld	r24, Y+
     d5e:	88 23       	and	r24, r24
     d60:	91 f7       	brne	.-28     	; 0xd46 <SPI_MasterTransmitString+0xe>
	{
		SPI_MasterTransmitchar(*ptr);
		_delay_ms(300);
		ptr++;
	}
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	08 95       	ret

00000d68 <TIMER0_CTC_MODE_Init>:
#include "STD_MACROS.h"
#include <avr/io.h>
#include <avr/interrupt.h>
void TIMER0_CTC_MODE_Init(void)
{
	SET_BIT(TCCR0,WGM01);//Select CTC mode
     d68:	83 b7       	in	r24, 0x33	; 51
     d6a:	88 60       	ori	r24, 0x08	; 8
     d6c:	83 bf       	out	0x33, r24	; 51
	
	SET_BIT(TCCR0,CS02);//Select clock/1024
     d6e:	83 b7       	in	r24, 0x33	; 51
     d70:	84 60       	ori	r24, 0x04	; 4
     d72:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS00);
     d74:	83 b7       	in	r24, 0x33	; 51
     d76:	81 60       	ori	r24, 0x01	; 1
     d78:	83 bf       	out	0x33, r24	; 51
	
	OCR0=78;//Select tick time=10ms
     d7a:	8e e4       	ldi	r24, 0x4E	; 78
     d7c:	8c bf       	out	0x3c, r24	; 60
	
	sei();//Enable interrupt
     d7e:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
     d80:	89 b7       	in	r24, 0x39	; 57
     d82:	82 60       	ori	r24, 0x02	; 2
     d84:	89 bf       	out	0x39, r24	; 57
}
     d86:	08 95       	ret

00000d88 <TIMER0_STOP>:
void TIMER0_STOP(void)
{
	CLR_BIT(TCCR0,CS02);
     d88:	83 b7       	in	r24, 0x33	; 51
     d8a:	8b 7f       	andi	r24, 0xFB	; 251
     d8c:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS00);
     d8e:	83 b7       	in	r24, 0x33	; 51
     d90:	8e 7f       	andi	r24, 0xFE	; 254
     d92:	83 bf       	out	0x33, r24	; 51
}
     d94:	08 95       	ret

00000d96 <TIMER0_WAVE_nonPWM>:
void TIMER0_WAVE_nonPWM(void)
{
	SET_BIT(DDRB,3);//Set OC0 as output
     d96:	bb 9a       	sbi	0x17, 3	; 23
	
	SET_BIT(TCCR0,WGM01);//Select CTC mode
     d98:	83 b7       	in	r24, 0x33	; 51
     d9a:	88 60       	ori	r24, 0x08	; 8
     d9c:	83 bf       	out	0x33, r24	; 51
	
	OCR0=64;//Select tick time=10ms
     d9e:	80 e4       	ldi	r24, 0x40	; 64
     da0:	8c bf       	out	0x3c, r24	; 60
	
	SET_BIT(TCCR0,CS02);//Select clock/1024
     da2:	83 b7       	in	r24, 0x33	; 51
     da4:	84 60       	ori	r24, 0x04	; 4
     da6:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS00);
     da8:	83 b7       	in	r24, 0x33	; 51
     daa:	81 60       	ori	r24, 0x01	; 1
     dac:	83 bf       	out	0x33, r24	; 51
	
	SET_BIT(TCCR0,COM00);//Toggle OC0 on compare match
     dae:	83 b7       	in	r24, 0x33	; 51
     db0:	80 61       	ori	r24, 0x10	; 16
     db2:	83 bf       	out	0x33, r24	; 51
}
     db4:	08 95       	ret

00000db6 <TIMER0_WAVE_fastPWM>:
void TIMER0_WAVE_fastPWM(void)
{
	SET_BIT(DDRB,3);//set OC0 as output pin
     db6:	bb 9a       	sbi	0x17, 3	; 23
	
	SET_BIT(TCCR0,WGM00);//Select Fast PWM mode
     db8:	83 b7       	in	r24, 0x33	; 51
     dba:	80 64       	ori	r24, 0x40	; 64
     dbc:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);
     dbe:	83 b7       	in	r24, 0x33	; 51
     dc0:	88 60       	ori	r24, 0x08	; 8
     dc2:	83 bf       	out	0x33, r24	; 51
	
	OCR0=64;//load value in ORC0=64 (duty cycle=25%)
     dc4:	80 e4       	ldi	r24, 0x40	; 64
     dc6:	8c bf       	out	0x3c, r24	; 60
	
	SET_BIT(TCCR0,CS00);//Select timer clock/1024
     dc8:	83 b7       	in	r24, 0x33	; 51
     dca:	81 60       	ori	r24, 0x01	; 1
     dcc:	83 bf       	out	0x33, r24	; 51
	//SET_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS02);
     dce:	83 b7       	in	r24, 0x33	; 51
     dd0:	84 60       	ori	r24, 0x04	; 4
     dd2:	83 bf       	out	0x33, r24	; 51
	
	CLR_BIT(TCCR0,COM00);//Set OC0 on compare match and clear OC0 at Bottom
     dd4:	83 b7       	in	r24, 0x33	; 51
     dd6:	8f 7e       	andi	r24, 0xEF	; 239
     dd8:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
     dda:	83 b7       	in	r24, 0x33	; 51
     ddc:	80 62       	ori	r24, 0x20	; 32
     dde:	83 bf       	out	0x33, r24	; 51
}
     de0:	08 95       	ret

00000de2 <TIMER0_WAVE_phasecorrectPWM>:
void TIMER0_WAVE_phasecorrectPWM(void)
{
	SET_BIT(DDRB,3);//set OC0 as output pin
     de2:	bb 9a       	sbi	0x17, 3	; 23
	
	SET_BIT(TCCR0,WGM00);//Select Fast PWM mode
     de4:	83 b7       	in	r24, 0x33	; 51
     de6:	80 64       	ori	r24, 0x40	; 64
     de8:	83 bf       	out	0x33, r24	; 51
	
	OCR0=64;//load value in ORC0=64 (duty cycle=25%)
     dea:	80 e4       	ldi	r24, 0x40	; 64
     dec:	8c bf       	out	0x3c, r24	; 60
	
	SET_BIT(TCCR0,CS00);//Select timer clock/1024
     dee:	83 b7       	in	r24, 0x33	; 51
     df0:	81 60       	ori	r24, 0x01	; 1
     df2:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
     df4:	83 b7       	in	r24, 0x33	; 51
     df6:	84 60       	ori	r24, 0x04	; 4
     df8:	83 bf       	out	0x33, r24	; 51
	
	CLR_BIT(TCCR0,COM00);//Set OC0 on compare match and clear OC0 at Bottom
     dfa:	83 b7       	in	r24, 0x33	; 51
     dfc:	8f 7e       	andi	r24, 0xEF	; 239
     dfe:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
     e00:	83 b7       	in	r24, 0x33	; 51
     e02:	80 62       	ori	r24, 0x20	; 32
     e04:	83 bf       	out	0x33, r24	; 51
}
     e06:	08 95       	ret

00000e08 <TIMER2_CTC_init_interrupt>:
void TIMER2_CTC_init_interrupt(void)
{
	SET_BIT(TCCR2,WGM21);//Select CTC mode
     e08:	85 b5       	in	r24, 0x25	; 37
     e0a:	88 60       	ori	r24, 0x08	; 8
     e0c:	85 bd       	out	0x25, r24	; 37
	
	SET_BIT(TCCR2,CS22);//Select clock/1024
     e0e:	85 b5       	in	r24, 0x25	; 37
     e10:	84 60       	ori	r24, 0x04	; 4
     e12:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS20);
     e14:	85 b5       	in	r24, 0x25	; 37
     e16:	81 60       	ori	r24, 0x01	; 1
     e18:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS21);
     e1a:	85 b5       	in	r24, 0x25	; 37
     e1c:	82 60       	ori	r24, 0x02	; 2
     e1e:	85 bd       	out	0x25, r24	; 37
	OCR2=78;//Select tick time=10ms
     e20:	8e e4       	ldi	r24, 0x4E	; 78
     e22:	83 bd       	out	0x23, r24	; 35
	
	sei();//Enable interrupt
     e24:	78 94       	sei
	SET_BIT(TIMSK,OCIE2);
     e26:	89 b7       	in	r24, 0x39	; 57
     e28:	80 68       	ori	r24, 0x80	; 128
     e2a:	89 bf       	out	0x39, r24	; 57
}
     e2c:	08 95       	ret

00000e2e <TIMER2_STOP>:
void TIMER2_STOP(void)
{
	CLR_BIT(TCCR2,CS22);//Select clock/1024
     e2e:	85 b5       	in	r24, 0x25	; 37
     e30:	8b 7f       	andi	r24, 0xFB	; 251
     e32:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,CS20);
     e34:	85 b5       	in	r24, 0x25	; 37
     e36:	8e 7f       	andi	r24, 0xFE	; 254
     e38:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,CS21);
     e3a:	85 b5       	in	r24, 0x25	; 37
     e3c:	8d 7f       	andi	r24, 0xFD	; 253
     e3e:	85 bd       	out	0x25, r24	; 37
}
     e40:	08 95       	ret

00000e42 <TIMER1_wave_fastPWM>:
void TIMER1_wave_fastPWM(double x)
{
	SET_BIT(DDRD,5);
     e42:	8d 9a       	sbi	0x11, 5	; 17
	SET_BIT(TCCR1A,WGM11);//Select Fast PWM mode 14
     e44:	2f b5       	in	r18, 0x2f	; 47
     e46:	22 60       	ori	r18, 0x02	; 2
     e48:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
     e4a:	2e b5       	in	r18, 0x2e	; 46
     e4c:	28 60       	ori	r18, 0x08	; 8
     e4e:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
     e50:	2e b5       	in	r18, 0x2e	; 46
     e52:	20 61       	ori	r18, 0x10	; 16
     e54:	2e bd       	out	0x2e, r18	; 46
	
	ICR1=19999;
     e56:	2f e1       	ldi	r18, 0x1F	; 31
     e58:	3e e4       	ldi	r19, 0x4E	; 78
     e5a:	37 bd       	out	0x27, r19	; 39
     e5c:	26 bd       	out	0x26, r18	; 38
	OCR1A=x*1000;
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	4a e7       	ldi	r20, 0x7A	; 122
     e64:	54 e4       	ldi	r21, 0x44	; 68
     e66:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__mulsf3>
     e6a:	0e 94 76 08 	call	0x10ec	; 0x10ec <__fixunssfsi>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	9b bd       	out	0x2b, r25	; 43
     e74:	8a bd       	out	0x2a, r24	; 42
	
	SET_BIT(TCCR1B,CS10);//No prescaler
     e76:	8e b5       	in	r24, 0x2e	; 46
     e78:	81 60       	ori	r24, 0x01	; 1
     e7a:	8e bd       	out	0x2e, r24	; 46
	
	SET_BIT(TCCR1A,COM1A1);//Clear OCR1 on compare match , set in Bottom (non-inverting mode)
     e7c:	8f b5       	in	r24, 0x2f	; 47
     e7e:	80 68       	ori	r24, 0x80	; 128
     e80:	8f bd       	out	0x2f, r24	; 47
}
     e82:	08 95       	ret

00000e84 <TIMER1_wave_fastPWMservo>:
void TIMER1_wave_fastPWMservo(double angle)
{
     e84:	cf 92       	push	r12
     e86:	df 92       	push	r13
     e88:	ef 92       	push	r14
     e8a:	ff 92       	push	r15
     e8c:	6b 01       	movw	r12, r22
     e8e:	7c 01       	movw	r14, r24
	SET_BIT(DDRD,5);
     e90:	8d 9a       	sbi	0x11, 5	; 17
	SET_BIT(TCCR1A,WGM11);//Select Fast PWM mode 14
     e92:	8f b5       	in	r24, 0x2f	; 47
     e94:	82 60       	ori	r24, 0x02	; 2
     e96:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,WGM12);
     e98:	8e b5       	in	r24, 0x2e	; 46
     e9a:	88 60       	ori	r24, 0x08	; 8
     e9c:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,WGM13);
     e9e:	8e b5       	in	r24, 0x2e	; 46
     ea0:	80 61       	ori	r24, 0x10	; 16
     ea2:	8e bd       	out	0x2e, r24	; 46
	
	ICR1=19999;
     ea4:	8f e1       	ldi	r24, 0x1F	; 31
     ea6:	9e e4       	ldi	r25, 0x4E	; 78
     ea8:	97 bd       	out	0x27, r25	; 39
     eaa:	86 bd       	out	0x26, r24	; 38
	double x;
	if(angle>=0&&angle<=90)
     eac:	c7 01       	movw	r24, r14
     eae:	b6 01       	movw	r22, r12
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	a9 01       	movw	r20, r18
     eb6:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__gesf2>
     eba:	88 23       	and	r24, r24
     ebc:	cc f0       	brlt	.+50     	; 0xef0 <TIMER1_wave_fastPWMservo+0x6c>
     ebe:	c7 01       	movw	r24, r14
     ec0:	b6 01       	movw	r22, r12
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	44 eb       	ldi	r20, 0xB4	; 180
     ec8:	52 e4       	ldi	r21, 0x42	; 66
     eca:	0e 94 0a 08 	call	0x1014	; 0x1014 <__cmpsf2>
     ece:	18 16       	cp	r1, r24
     ed0:	7c f0       	brlt	.+30     	; 0xef0 <TIMER1_wave_fastPWMservo+0x6c>
	{
		x=1.5+(angle/180.0);
     ed2:	c7 01       	movw	r24, r14
     ed4:	b6 01       	movw	r22, r12
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	44 e3       	ldi	r20, 0x34	; 52
     edc:	53 e4       	ldi	r21, 0x43	; 67
     ede:	0e 94 0e 08 	call	0x101c	; 0x101c <__divsf3>
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	40 ec       	ldi	r20, 0xC0	; 192
     ee8:	5f e3       	ldi	r21, 0x3F	; 63
     eea:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__addsf3>
     eee:	0e c0       	rjmp	.+28     	; 0xf0c <TIMER1_wave_fastPWMservo+0x88>
	}
	else
	{
		x=1.5-(-angle/180.0);
     ef0:	c7 01       	movw	r24, r14
     ef2:	b6 01       	movw	r22, r12
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	44 e3       	ldi	r20, 0x34	; 52
     efa:	53 e4       	ldi	r21, 0x43	; 67
     efc:	0e 94 0e 08 	call	0x101c	; 0x101c <__divsf3>
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	40 ec       	ldi	r20, 0xC0	; 192
     f06:	5f e3       	ldi	r21, 0x3F	; 63
     f08:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__addsf3>
	}
	OCR1A=x*1000;
     f0c:	38 2f       	mov	r19, r24
     f0e:	29 2f       	mov	r18, r25
     f10:	86 2f       	mov	r24, r22
     f12:	97 2f       	mov	r25, r23
     f14:	a3 2f       	mov	r26, r19
     f16:	b2 2f       	mov	r27, r18
     f18:	bc 01       	movw	r22, r24
     f1a:	cd 01       	movw	r24, r26
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	4a e7       	ldi	r20, 0x7A	; 122
     f22:	54 e4       	ldi	r21, 0x44	; 68
     f24:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__mulsf3>
     f28:	0e 94 76 08 	call	0x10ec	; 0x10ec <__fixunssfsi>
     f2c:	dc 01       	movw	r26, r24
     f2e:	cb 01       	movw	r24, r22
     f30:	9b bd       	out	0x2b, r25	; 43
     f32:	8a bd       	out	0x2a, r24	; 42
	SET_BIT(TCCR1B,CS10);//No prescaler
     f34:	8e b5       	in	r24, 0x2e	; 46
     f36:	81 60       	ori	r24, 0x01	; 1
     f38:	8e bd       	out	0x2e, r24	; 46
	
	SET_BIT(TCCR1A,COM1A1);//Clear OCR1 on compare match , set in Bottom (non-inverting mode)
     f3a:	8f b5       	in	r24, 0x2f	; 47
     f3c:	80 68       	ori	r24, 0x80	; 128
     f3e:	8f bd       	out	0x2f, r24	; 47
     f40:	ff 90       	pop	r15
     f42:	ef 90       	pop	r14
     f44:	df 90       	pop	r13
     f46:	cf 90       	pop	r12
     f48:	08 95       	ret

00000f4a <__subsf3>:
     f4a:	50 58       	subi	r21, 0x80	; 128

00000f4c <__addsf3>:
     f4c:	bb 27       	eor	r27, r27
     f4e:	aa 27       	eor	r26, r26
     f50:	0e d0       	rcall	.+28     	; 0xf6e <__addsf3x>
     f52:	70 c1       	rjmp	.+736    	; 0x1234 <__fp_round>
     f54:	61 d1       	rcall	.+706    	; 0x1218 <__fp_pscA>
     f56:	30 f0       	brcs	.+12     	; 0xf64 <__addsf3+0x18>
     f58:	66 d1       	rcall	.+716    	; 0x1226 <__fp_pscB>
     f5a:	20 f0       	brcs	.+8      	; 0xf64 <__addsf3+0x18>
     f5c:	31 f4       	brne	.+12     	; 0xf6a <__addsf3+0x1e>
     f5e:	9f 3f       	cpi	r25, 0xFF	; 255
     f60:	11 f4       	brne	.+4      	; 0xf66 <__addsf3+0x1a>
     f62:	1e f4       	brtc	.+6      	; 0xf6a <__addsf3+0x1e>
     f64:	56 c1       	rjmp	.+684    	; 0x1212 <__fp_nan>
     f66:	0e f4       	brtc	.+2      	; 0xf6a <__addsf3+0x1e>
     f68:	e0 95       	com	r30
     f6a:	e7 fb       	bst	r30, 7
     f6c:	4c c1       	rjmp	.+664    	; 0x1206 <__fp_inf>

00000f6e <__addsf3x>:
     f6e:	e9 2f       	mov	r30, r25
     f70:	72 d1       	rcall	.+740    	; 0x1256 <__fp_split3>
     f72:	80 f3       	brcs	.-32     	; 0xf54 <__addsf3+0x8>
     f74:	ba 17       	cp	r27, r26
     f76:	62 07       	cpc	r22, r18
     f78:	73 07       	cpc	r23, r19
     f7a:	84 07       	cpc	r24, r20
     f7c:	95 07       	cpc	r25, r21
     f7e:	18 f0       	brcs	.+6      	; 0xf86 <__addsf3x+0x18>
     f80:	71 f4       	brne	.+28     	; 0xf9e <__addsf3x+0x30>
     f82:	9e f5       	brtc	.+102    	; 0xfea <__addsf3x+0x7c>
     f84:	8a c1       	rjmp	.+788    	; 0x129a <__fp_zero>
     f86:	0e f4       	brtc	.+2      	; 0xf8a <__addsf3x+0x1c>
     f88:	e0 95       	com	r30
     f8a:	0b 2e       	mov	r0, r27
     f8c:	ba 2f       	mov	r27, r26
     f8e:	a0 2d       	mov	r26, r0
     f90:	0b 01       	movw	r0, r22
     f92:	b9 01       	movw	r22, r18
     f94:	90 01       	movw	r18, r0
     f96:	0c 01       	movw	r0, r24
     f98:	ca 01       	movw	r24, r20
     f9a:	a0 01       	movw	r20, r0
     f9c:	11 24       	eor	r1, r1
     f9e:	ff 27       	eor	r31, r31
     fa0:	59 1b       	sub	r21, r25
     fa2:	99 f0       	breq	.+38     	; 0xfca <__addsf3x+0x5c>
     fa4:	59 3f       	cpi	r21, 0xF9	; 249
     fa6:	50 f4       	brcc	.+20     	; 0xfbc <__addsf3x+0x4e>
     fa8:	50 3e       	cpi	r21, 0xE0	; 224
     faa:	68 f1       	brcs	.+90     	; 0x1006 <__addsf3x+0x98>
     fac:	1a 16       	cp	r1, r26
     fae:	f0 40       	sbci	r31, 0x00	; 0
     fb0:	a2 2f       	mov	r26, r18
     fb2:	23 2f       	mov	r18, r19
     fb4:	34 2f       	mov	r19, r20
     fb6:	44 27       	eor	r20, r20
     fb8:	58 5f       	subi	r21, 0xF8	; 248
     fba:	f3 cf       	rjmp	.-26     	; 0xfa2 <__addsf3x+0x34>
     fbc:	46 95       	lsr	r20
     fbe:	37 95       	ror	r19
     fc0:	27 95       	ror	r18
     fc2:	a7 95       	ror	r26
     fc4:	f0 40       	sbci	r31, 0x00	; 0
     fc6:	53 95       	inc	r21
     fc8:	c9 f7       	brne	.-14     	; 0xfbc <__addsf3x+0x4e>
     fca:	7e f4       	brtc	.+30     	; 0xfea <__addsf3x+0x7c>
     fcc:	1f 16       	cp	r1, r31
     fce:	ba 0b       	sbc	r27, r26
     fd0:	62 0b       	sbc	r22, r18
     fd2:	73 0b       	sbc	r23, r19
     fd4:	84 0b       	sbc	r24, r20
     fd6:	ba f0       	brmi	.+46     	; 0x1006 <__addsf3x+0x98>
     fd8:	91 50       	subi	r25, 0x01	; 1
     fda:	a1 f0       	breq	.+40     	; 0x1004 <__addsf3x+0x96>
     fdc:	ff 0f       	add	r31, r31
     fde:	bb 1f       	adc	r27, r27
     fe0:	66 1f       	adc	r22, r22
     fe2:	77 1f       	adc	r23, r23
     fe4:	88 1f       	adc	r24, r24
     fe6:	c2 f7       	brpl	.-16     	; 0xfd8 <__addsf3x+0x6a>
     fe8:	0e c0       	rjmp	.+28     	; 0x1006 <__addsf3x+0x98>
     fea:	ba 0f       	add	r27, r26
     fec:	62 1f       	adc	r22, r18
     fee:	73 1f       	adc	r23, r19
     ff0:	84 1f       	adc	r24, r20
     ff2:	48 f4       	brcc	.+18     	; 0x1006 <__addsf3x+0x98>
     ff4:	87 95       	ror	r24
     ff6:	77 95       	ror	r23
     ff8:	67 95       	ror	r22
     ffa:	b7 95       	ror	r27
     ffc:	f7 95       	ror	r31
     ffe:	9e 3f       	cpi	r25, 0xFE	; 254
    1000:	08 f0       	brcs	.+2      	; 0x1004 <__addsf3x+0x96>
    1002:	b3 cf       	rjmp	.-154    	; 0xf6a <__addsf3+0x1e>
    1004:	93 95       	inc	r25
    1006:	88 0f       	add	r24, r24
    1008:	08 f0       	brcs	.+2      	; 0x100c <__addsf3x+0x9e>
    100a:	99 27       	eor	r25, r25
    100c:	ee 0f       	add	r30, r30
    100e:	97 95       	ror	r25
    1010:	87 95       	ror	r24
    1012:	08 95       	ret

00001014 <__cmpsf2>:
    1014:	d4 d0       	rcall	.+424    	; 0x11be <__fp_cmp>
    1016:	08 f4       	brcc	.+2      	; 0x101a <__cmpsf2+0x6>
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	08 95       	ret

0000101c <__divsf3>:
    101c:	0c d0       	rcall	.+24     	; 0x1036 <__divsf3x>
    101e:	0a c1       	rjmp	.+532    	; 0x1234 <__fp_round>
    1020:	02 d1       	rcall	.+516    	; 0x1226 <__fp_pscB>
    1022:	40 f0       	brcs	.+16     	; 0x1034 <__divsf3+0x18>
    1024:	f9 d0       	rcall	.+498    	; 0x1218 <__fp_pscA>
    1026:	30 f0       	brcs	.+12     	; 0x1034 <__divsf3+0x18>
    1028:	21 f4       	brne	.+8      	; 0x1032 <__divsf3+0x16>
    102a:	5f 3f       	cpi	r21, 0xFF	; 255
    102c:	19 f0       	breq	.+6      	; 0x1034 <__divsf3+0x18>
    102e:	eb c0       	rjmp	.+470    	; 0x1206 <__fp_inf>
    1030:	51 11       	cpse	r21, r1
    1032:	34 c1       	rjmp	.+616    	; 0x129c <__fp_szero>
    1034:	ee c0       	rjmp	.+476    	; 0x1212 <__fp_nan>

00001036 <__divsf3x>:
    1036:	0f d1       	rcall	.+542    	; 0x1256 <__fp_split3>
    1038:	98 f3       	brcs	.-26     	; 0x1020 <__divsf3+0x4>

0000103a <__divsf3_pse>:
    103a:	99 23       	and	r25, r25
    103c:	c9 f3       	breq	.-14     	; 0x1030 <__divsf3+0x14>
    103e:	55 23       	and	r21, r21
    1040:	b1 f3       	breq	.-20     	; 0x102e <__divsf3+0x12>
    1042:	95 1b       	sub	r25, r21
    1044:	55 0b       	sbc	r21, r21
    1046:	bb 27       	eor	r27, r27
    1048:	aa 27       	eor	r26, r26
    104a:	62 17       	cp	r22, r18
    104c:	73 07       	cpc	r23, r19
    104e:	84 07       	cpc	r24, r20
    1050:	38 f0       	brcs	.+14     	; 0x1060 <__divsf3_pse+0x26>
    1052:	9f 5f       	subi	r25, 0xFF	; 255
    1054:	5f 4f       	sbci	r21, 0xFF	; 255
    1056:	22 0f       	add	r18, r18
    1058:	33 1f       	adc	r19, r19
    105a:	44 1f       	adc	r20, r20
    105c:	aa 1f       	adc	r26, r26
    105e:	a9 f3       	breq	.-22     	; 0x104a <__divsf3_pse+0x10>
    1060:	33 d0       	rcall	.+102    	; 0x10c8 <__divsf3_pse+0x8e>
    1062:	0e 2e       	mov	r0, r30
    1064:	3a f0       	brmi	.+14     	; 0x1074 <__divsf3_pse+0x3a>
    1066:	e0 e8       	ldi	r30, 0x80	; 128
    1068:	30 d0       	rcall	.+96     	; 0x10ca <__divsf3_pse+0x90>
    106a:	91 50       	subi	r25, 0x01	; 1
    106c:	50 40       	sbci	r21, 0x00	; 0
    106e:	e6 95       	lsr	r30
    1070:	00 1c       	adc	r0, r0
    1072:	ca f7       	brpl	.-14     	; 0x1066 <__divsf3_pse+0x2c>
    1074:	29 d0       	rcall	.+82     	; 0x10c8 <__divsf3_pse+0x8e>
    1076:	fe 2f       	mov	r31, r30
    1078:	27 d0       	rcall	.+78     	; 0x10c8 <__divsf3_pse+0x8e>
    107a:	66 0f       	add	r22, r22
    107c:	77 1f       	adc	r23, r23
    107e:	88 1f       	adc	r24, r24
    1080:	bb 1f       	adc	r27, r27
    1082:	26 17       	cp	r18, r22
    1084:	37 07       	cpc	r19, r23
    1086:	48 07       	cpc	r20, r24
    1088:	ab 07       	cpc	r26, r27
    108a:	b0 e8       	ldi	r27, 0x80	; 128
    108c:	09 f0       	breq	.+2      	; 0x1090 <__divsf3_pse+0x56>
    108e:	bb 0b       	sbc	r27, r27
    1090:	80 2d       	mov	r24, r0
    1092:	bf 01       	movw	r22, r30
    1094:	ff 27       	eor	r31, r31
    1096:	93 58       	subi	r25, 0x83	; 131
    1098:	5f 4f       	sbci	r21, 0xFF	; 255
    109a:	2a f0       	brmi	.+10     	; 0x10a6 <__divsf3_pse+0x6c>
    109c:	9e 3f       	cpi	r25, 0xFE	; 254
    109e:	51 05       	cpc	r21, r1
    10a0:	68 f0       	brcs	.+26     	; 0x10bc <__divsf3_pse+0x82>
    10a2:	b1 c0       	rjmp	.+354    	; 0x1206 <__fp_inf>
    10a4:	fb c0       	rjmp	.+502    	; 0x129c <__fp_szero>
    10a6:	5f 3f       	cpi	r21, 0xFF	; 255
    10a8:	ec f3       	brlt	.-6      	; 0x10a4 <__divsf3_pse+0x6a>
    10aa:	98 3e       	cpi	r25, 0xE8	; 232
    10ac:	dc f3       	brlt	.-10     	; 0x10a4 <__divsf3_pse+0x6a>
    10ae:	86 95       	lsr	r24
    10b0:	77 95       	ror	r23
    10b2:	67 95       	ror	r22
    10b4:	b7 95       	ror	r27
    10b6:	f7 95       	ror	r31
    10b8:	9f 5f       	subi	r25, 0xFF	; 255
    10ba:	c9 f7       	brne	.-14     	; 0x10ae <__divsf3_pse+0x74>
    10bc:	88 0f       	add	r24, r24
    10be:	91 1d       	adc	r25, r1
    10c0:	96 95       	lsr	r25
    10c2:	87 95       	ror	r24
    10c4:	97 f9       	bld	r25, 7
    10c6:	08 95       	ret
    10c8:	e1 e0       	ldi	r30, 0x01	; 1
    10ca:	66 0f       	add	r22, r22
    10cc:	77 1f       	adc	r23, r23
    10ce:	88 1f       	adc	r24, r24
    10d0:	bb 1f       	adc	r27, r27
    10d2:	62 17       	cp	r22, r18
    10d4:	73 07       	cpc	r23, r19
    10d6:	84 07       	cpc	r24, r20
    10d8:	ba 07       	cpc	r27, r26
    10da:	20 f0       	brcs	.+8      	; 0x10e4 <__divsf3_pse+0xaa>
    10dc:	62 1b       	sub	r22, r18
    10de:	73 0b       	sbc	r23, r19
    10e0:	84 0b       	sbc	r24, r20
    10e2:	ba 0b       	sbc	r27, r26
    10e4:	ee 1f       	adc	r30, r30
    10e6:	88 f7       	brcc	.-30     	; 0x10ca <__divsf3_pse+0x90>
    10e8:	e0 95       	com	r30
    10ea:	08 95       	ret

000010ec <__fixunssfsi>:
    10ec:	bc d0       	rcall	.+376    	; 0x1266 <__fp_splitA>
    10ee:	88 f0       	brcs	.+34     	; 0x1112 <__fixunssfsi+0x26>
    10f0:	9f 57       	subi	r25, 0x7F	; 127
    10f2:	90 f0       	brcs	.+36     	; 0x1118 <__fixunssfsi+0x2c>
    10f4:	b9 2f       	mov	r27, r25
    10f6:	99 27       	eor	r25, r25
    10f8:	b7 51       	subi	r27, 0x17	; 23
    10fa:	a0 f0       	brcs	.+40     	; 0x1124 <__fixunssfsi+0x38>
    10fc:	d1 f0       	breq	.+52     	; 0x1132 <__fixunssfsi+0x46>
    10fe:	66 0f       	add	r22, r22
    1100:	77 1f       	adc	r23, r23
    1102:	88 1f       	adc	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	1a f0       	brmi	.+6      	; 0x110e <__fixunssfsi+0x22>
    1108:	ba 95       	dec	r27
    110a:	c9 f7       	brne	.-14     	; 0x10fe <__fixunssfsi+0x12>
    110c:	12 c0       	rjmp	.+36     	; 0x1132 <__fixunssfsi+0x46>
    110e:	b1 30       	cpi	r27, 0x01	; 1
    1110:	81 f0       	breq	.+32     	; 0x1132 <__fixunssfsi+0x46>
    1112:	c3 d0       	rcall	.+390    	; 0x129a <__fp_zero>
    1114:	b1 e0       	ldi	r27, 0x01	; 1
    1116:	08 95       	ret
    1118:	c0 c0       	rjmp	.+384    	; 0x129a <__fp_zero>
    111a:	67 2f       	mov	r22, r23
    111c:	78 2f       	mov	r23, r24
    111e:	88 27       	eor	r24, r24
    1120:	b8 5f       	subi	r27, 0xF8	; 248
    1122:	39 f0       	breq	.+14     	; 0x1132 <__fixunssfsi+0x46>
    1124:	b9 3f       	cpi	r27, 0xF9	; 249
    1126:	cc f3       	brlt	.-14     	; 0x111a <__fixunssfsi+0x2e>
    1128:	86 95       	lsr	r24
    112a:	77 95       	ror	r23
    112c:	67 95       	ror	r22
    112e:	b3 95       	inc	r27
    1130:	d9 f7       	brne	.-10     	; 0x1128 <__fixunssfsi+0x3c>
    1132:	3e f4       	brtc	.+14     	; 0x1142 <__fixunssfsi+0x56>
    1134:	90 95       	com	r25
    1136:	80 95       	com	r24
    1138:	70 95       	com	r23
    113a:	61 95       	neg	r22
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
    113e:	8f 4f       	sbci	r24, 0xFF	; 255
    1140:	9f 4f       	sbci	r25, 0xFF	; 255
    1142:	08 95       	ret

00001144 <__floatunsisf>:
    1144:	e8 94       	clt
    1146:	09 c0       	rjmp	.+18     	; 0x115a <__floatsisf+0x12>

00001148 <__floatsisf>:
    1148:	97 fb       	bst	r25, 7
    114a:	3e f4       	brtc	.+14     	; 0x115a <__floatsisf+0x12>
    114c:	90 95       	com	r25
    114e:	80 95       	com	r24
    1150:	70 95       	com	r23
    1152:	61 95       	neg	r22
    1154:	7f 4f       	sbci	r23, 0xFF	; 255
    1156:	8f 4f       	sbci	r24, 0xFF	; 255
    1158:	9f 4f       	sbci	r25, 0xFF	; 255
    115a:	99 23       	and	r25, r25
    115c:	a9 f0       	breq	.+42     	; 0x1188 <__floatsisf+0x40>
    115e:	f9 2f       	mov	r31, r25
    1160:	96 e9       	ldi	r25, 0x96	; 150
    1162:	bb 27       	eor	r27, r27
    1164:	93 95       	inc	r25
    1166:	f6 95       	lsr	r31
    1168:	87 95       	ror	r24
    116a:	77 95       	ror	r23
    116c:	67 95       	ror	r22
    116e:	b7 95       	ror	r27
    1170:	f1 11       	cpse	r31, r1
    1172:	f8 cf       	rjmp	.-16     	; 0x1164 <__floatsisf+0x1c>
    1174:	fa f4       	brpl	.+62     	; 0x11b4 <__floatsisf+0x6c>
    1176:	bb 0f       	add	r27, r27
    1178:	11 f4       	brne	.+4      	; 0x117e <__floatsisf+0x36>
    117a:	60 ff       	sbrs	r22, 0
    117c:	1b c0       	rjmp	.+54     	; 0x11b4 <__floatsisf+0x6c>
    117e:	6f 5f       	subi	r22, 0xFF	; 255
    1180:	7f 4f       	sbci	r23, 0xFF	; 255
    1182:	8f 4f       	sbci	r24, 0xFF	; 255
    1184:	9f 4f       	sbci	r25, 0xFF	; 255
    1186:	16 c0       	rjmp	.+44     	; 0x11b4 <__floatsisf+0x6c>
    1188:	88 23       	and	r24, r24
    118a:	11 f0       	breq	.+4      	; 0x1190 <__floatsisf+0x48>
    118c:	96 e9       	ldi	r25, 0x96	; 150
    118e:	11 c0       	rjmp	.+34     	; 0x11b2 <__floatsisf+0x6a>
    1190:	77 23       	and	r23, r23
    1192:	21 f0       	breq	.+8      	; 0x119c <__floatsisf+0x54>
    1194:	9e e8       	ldi	r25, 0x8E	; 142
    1196:	87 2f       	mov	r24, r23
    1198:	76 2f       	mov	r23, r22
    119a:	05 c0       	rjmp	.+10     	; 0x11a6 <__floatsisf+0x5e>
    119c:	66 23       	and	r22, r22
    119e:	71 f0       	breq	.+28     	; 0x11bc <__floatsisf+0x74>
    11a0:	96 e8       	ldi	r25, 0x86	; 134
    11a2:	86 2f       	mov	r24, r22
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	2a f0       	brmi	.+10     	; 0x11b4 <__floatsisf+0x6c>
    11aa:	9a 95       	dec	r25
    11ac:	66 0f       	add	r22, r22
    11ae:	77 1f       	adc	r23, r23
    11b0:	88 1f       	adc	r24, r24
    11b2:	da f7       	brpl	.-10     	; 0x11aa <__floatsisf+0x62>
    11b4:	88 0f       	add	r24, r24
    11b6:	96 95       	lsr	r25
    11b8:	87 95       	ror	r24
    11ba:	97 f9       	bld	r25, 7
    11bc:	08 95       	ret

000011be <__fp_cmp>:
    11be:	99 0f       	add	r25, r25
    11c0:	00 08       	sbc	r0, r0
    11c2:	55 0f       	add	r21, r21
    11c4:	aa 0b       	sbc	r26, r26
    11c6:	e0 e8       	ldi	r30, 0x80	; 128
    11c8:	fe ef       	ldi	r31, 0xFE	; 254
    11ca:	16 16       	cp	r1, r22
    11cc:	17 06       	cpc	r1, r23
    11ce:	e8 07       	cpc	r30, r24
    11d0:	f9 07       	cpc	r31, r25
    11d2:	c0 f0       	brcs	.+48     	; 0x1204 <__fp_cmp+0x46>
    11d4:	12 16       	cp	r1, r18
    11d6:	13 06       	cpc	r1, r19
    11d8:	e4 07       	cpc	r30, r20
    11da:	f5 07       	cpc	r31, r21
    11dc:	98 f0       	brcs	.+38     	; 0x1204 <__fp_cmp+0x46>
    11de:	62 1b       	sub	r22, r18
    11e0:	73 0b       	sbc	r23, r19
    11e2:	84 0b       	sbc	r24, r20
    11e4:	95 0b       	sbc	r25, r21
    11e6:	39 f4       	brne	.+14     	; 0x11f6 <__fp_cmp+0x38>
    11e8:	0a 26       	eor	r0, r26
    11ea:	61 f0       	breq	.+24     	; 0x1204 <__fp_cmp+0x46>
    11ec:	23 2b       	or	r18, r19
    11ee:	24 2b       	or	r18, r20
    11f0:	25 2b       	or	r18, r21
    11f2:	21 f4       	brne	.+8      	; 0x11fc <__fp_cmp+0x3e>
    11f4:	08 95       	ret
    11f6:	0a 26       	eor	r0, r26
    11f8:	09 f4       	brne	.+2      	; 0x11fc <__fp_cmp+0x3e>
    11fa:	a1 40       	sbci	r26, 0x01	; 1
    11fc:	a6 95       	lsr	r26
    11fe:	8f ef       	ldi	r24, 0xFF	; 255
    1200:	81 1d       	adc	r24, r1
    1202:	81 1d       	adc	r24, r1
    1204:	08 95       	ret

00001206 <__fp_inf>:
    1206:	97 f9       	bld	r25, 7
    1208:	9f 67       	ori	r25, 0x7F	; 127
    120a:	80 e8       	ldi	r24, 0x80	; 128
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	08 95       	ret

00001212 <__fp_nan>:
    1212:	9f ef       	ldi	r25, 0xFF	; 255
    1214:	80 ec       	ldi	r24, 0xC0	; 192
    1216:	08 95       	ret

00001218 <__fp_pscA>:
    1218:	00 24       	eor	r0, r0
    121a:	0a 94       	dec	r0
    121c:	16 16       	cp	r1, r22
    121e:	17 06       	cpc	r1, r23
    1220:	18 06       	cpc	r1, r24
    1222:	09 06       	cpc	r0, r25
    1224:	08 95       	ret

00001226 <__fp_pscB>:
    1226:	00 24       	eor	r0, r0
    1228:	0a 94       	dec	r0
    122a:	12 16       	cp	r1, r18
    122c:	13 06       	cpc	r1, r19
    122e:	14 06       	cpc	r1, r20
    1230:	05 06       	cpc	r0, r21
    1232:	08 95       	ret

00001234 <__fp_round>:
    1234:	09 2e       	mov	r0, r25
    1236:	03 94       	inc	r0
    1238:	00 0c       	add	r0, r0
    123a:	11 f4       	brne	.+4      	; 0x1240 <__fp_round+0xc>
    123c:	88 23       	and	r24, r24
    123e:	52 f0       	brmi	.+20     	; 0x1254 <__fp_round+0x20>
    1240:	bb 0f       	add	r27, r27
    1242:	40 f4       	brcc	.+16     	; 0x1254 <__fp_round+0x20>
    1244:	bf 2b       	or	r27, r31
    1246:	11 f4       	brne	.+4      	; 0x124c <__fp_round+0x18>
    1248:	60 ff       	sbrs	r22, 0
    124a:	04 c0       	rjmp	.+8      	; 0x1254 <__fp_round+0x20>
    124c:	6f 5f       	subi	r22, 0xFF	; 255
    124e:	7f 4f       	sbci	r23, 0xFF	; 255
    1250:	8f 4f       	sbci	r24, 0xFF	; 255
    1252:	9f 4f       	sbci	r25, 0xFF	; 255
    1254:	08 95       	ret

00001256 <__fp_split3>:
    1256:	57 fd       	sbrc	r21, 7
    1258:	90 58       	subi	r25, 0x80	; 128
    125a:	44 0f       	add	r20, r20
    125c:	55 1f       	adc	r21, r21
    125e:	59 f0       	breq	.+22     	; 0x1276 <__fp_splitA+0x10>
    1260:	5f 3f       	cpi	r21, 0xFF	; 255
    1262:	71 f0       	breq	.+28     	; 0x1280 <__fp_splitA+0x1a>
    1264:	47 95       	ror	r20

00001266 <__fp_splitA>:
    1266:	88 0f       	add	r24, r24
    1268:	97 fb       	bst	r25, 7
    126a:	99 1f       	adc	r25, r25
    126c:	61 f0       	breq	.+24     	; 0x1286 <__fp_splitA+0x20>
    126e:	9f 3f       	cpi	r25, 0xFF	; 255
    1270:	79 f0       	breq	.+30     	; 0x1290 <__fp_splitA+0x2a>
    1272:	87 95       	ror	r24
    1274:	08 95       	ret
    1276:	12 16       	cp	r1, r18
    1278:	13 06       	cpc	r1, r19
    127a:	14 06       	cpc	r1, r20
    127c:	55 1f       	adc	r21, r21
    127e:	f2 cf       	rjmp	.-28     	; 0x1264 <__fp_split3+0xe>
    1280:	46 95       	lsr	r20
    1282:	f1 df       	rcall	.-30     	; 0x1266 <__fp_splitA>
    1284:	08 c0       	rjmp	.+16     	; 0x1296 <__fp_splitA+0x30>
    1286:	16 16       	cp	r1, r22
    1288:	17 06       	cpc	r1, r23
    128a:	18 06       	cpc	r1, r24
    128c:	99 1f       	adc	r25, r25
    128e:	f1 cf       	rjmp	.-30     	; 0x1272 <__fp_splitA+0xc>
    1290:	86 95       	lsr	r24
    1292:	71 05       	cpc	r23, r1
    1294:	61 05       	cpc	r22, r1
    1296:	08 94       	sec
    1298:	08 95       	ret

0000129a <__fp_zero>:
    129a:	e8 94       	clt

0000129c <__fp_szero>:
    129c:	bb 27       	eor	r27, r27
    129e:	66 27       	eor	r22, r22
    12a0:	77 27       	eor	r23, r23
    12a2:	cb 01       	movw	r24, r22
    12a4:	97 f9       	bld	r25, 7
    12a6:	08 95       	ret

000012a8 <__gesf2>:
    12a8:	8a df       	rcall	.-236    	; 0x11be <__fp_cmp>
    12aa:	08 f4       	brcc	.+2      	; 0x12ae <__gesf2+0x6>
    12ac:	8f ef       	ldi	r24, 0xFF	; 255
    12ae:	08 95       	ret

000012b0 <__mulsf3>:
    12b0:	0b d0       	rcall	.+22     	; 0x12c8 <__mulsf3x>
    12b2:	c0 cf       	rjmp	.-128    	; 0x1234 <__fp_round>
    12b4:	b1 df       	rcall	.-158    	; 0x1218 <__fp_pscA>
    12b6:	28 f0       	brcs	.+10     	; 0x12c2 <__mulsf3+0x12>
    12b8:	b6 df       	rcall	.-148    	; 0x1226 <__fp_pscB>
    12ba:	18 f0       	brcs	.+6      	; 0x12c2 <__mulsf3+0x12>
    12bc:	95 23       	and	r25, r21
    12be:	09 f0       	breq	.+2      	; 0x12c2 <__mulsf3+0x12>
    12c0:	a2 cf       	rjmp	.-188    	; 0x1206 <__fp_inf>
    12c2:	a7 cf       	rjmp	.-178    	; 0x1212 <__fp_nan>
    12c4:	11 24       	eor	r1, r1
    12c6:	ea cf       	rjmp	.-44     	; 0x129c <__fp_szero>

000012c8 <__mulsf3x>:
    12c8:	c6 df       	rcall	.-116    	; 0x1256 <__fp_split3>
    12ca:	a0 f3       	brcs	.-24     	; 0x12b4 <__mulsf3+0x4>

000012cc <__mulsf3_pse>:
    12cc:	95 9f       	mul	r25, r21
    12ce:	d1 f3       	breq	.-12     	; 0x12c4 <__mulsf3+0x14>
    12d0:	95 0f       	add	r25, r21
    12d2:	50 e0       	ldi	r21, 0x00	; 0
    12d4:	55 1f       	adc	r21, r21
    12d6:	62 9f       	mul	r22, r18
    12d8:	f0 01       	movw	r30, r0
    12da:	72 9f       	mul	r23, r18
    12dc:	bb 27       	eor	r27, r27
    12de:	f0 0d       	add	r31, r0
    12e0:	b1 1d       	adc	r27, r1
    12e2:	63 9f       	mul	r22, r19
    12e4:	aa 27       	eor	r26, r26
    12e6:	f0 0d       	add	r31, r0
    12e8:	b1 1d       	adc	r27, r1
    12ea:	aa 1f       	adc	r26, r26
    12ec:	64 9f       	mul	r22, r20
    12ee:	66 27       	eor	r22, r22
    12f0:	b0 0d       	add	r27, r0
    12f2:	a1 1d       	adc	r26, r1
    12f4:	66 1f       	adc	r22, r22
    12f6:	82 9f       	mul	r24, r18
    12f8:	22 27       	eor	r18, r18
    12fa:	b0 0d       	add	r27, r0
    12fc:	a1 1d       	adc	r26, r1
    12fe:	62 1f       	adc	r22, r18
    1300:	73 9f       	mul	r23, r19
    1302:	b0 0d       	add	r27, r0
    1304:	a1 1d       	adc	r26, r1
    1306:	62 1f       	adc	r22, r18
    1308:	83 9f       	mul	r24, r19
    130a:	a0 0d       	add	r26, r0
    130c:	61 1d       	adc	r22, r1
    130e:	22 1f       	adc	r18, r18
    1310:	74 9f       	mul	r23, r20
    1312:	33 27       	eor	r19, r19
    1314:	a0 0d       	add	r26, r0
    1316:	61 1d       	adc	r22, r1
    1318:	23 1f       	adc	r18, r19
    131a:	84 9f       	mul	r24, r20
    131c:	60 0d       	add	r22, r0
    131e:	21 1d       	adc	r18, r1
    1320:	82 2f       	mov	r24, r18
    1322:	76 2f       	mov	r23, r22
    1324:	6a 2f       	mov	r22, r26
    1326:	11 24       	eor	r1, r1
    1328:	9f 57       	subi	r25, 0x7F	; 127
    132a:	50 40       	sbci	r21, 0x00	; 0
    132c:	8a f0       	brmi	.+34     	; 0x1350 <__mulsf3_pse+0x84>
    132e:	e1 f0       	breq	.+56     	; 0x1368 <__mulsf3_pse+0x9c>
    1330:	88 23       	and	r24, r24
    1332:	4a f0       	brmi	.+18     	; 0x1346 <__mulsf3_pse+0x7a>
    1334:	ee 0f       	add	r30, r30
    1336:	ff 1f       	adc	r31, r31
    1338:	bb 1f       	adc	r27, r27
    133a:	66 1f       	adc	r22, r22
    133c:	77 1f       	adc	r23, r23
    133e:	88 1f       	adc	r24, r24
    1340:	91 50       	subi	r25, 0x01	; 1
    1342:	50 40       	sbci	r21, 0x00	; 0
    1344:	a9 f7       	brne	.-22     	; 0x1330 <__mulsf3_pse+0x64>
    1346:	9e 3f       	cpi	r25, 0xFE	; 254
    1348:	51 05       	cpc	r21, r1
    134a:	70 f0       	brcs	.+28     	; 0x1368 <__mulsf3_pse+0x9c>
    134c:	5c cf       	rjmp	.-328    	; 0x1206 <__fp_inf>
    134e:	a6 cf       	rjmp	.-180    	; 0x129c <__fp_szero>
    1350:	5f 3f       	cpi	r21, 0xFF	; 255
    1352:	ec f3       	brlt	.-6      	; 0x134e <__mulsf3_pse+0x82>
    1354:	98 3e       	cpi	r25, 0xE8	; 232
    1356:	dc f3       	brlt	.-10     	; 0x134e <__mulsf3_pse+0x82>
    1358:	86 95       	lsr	r24
    135a:	77 95       	ror	r23
    135c:	67 95       	ror	r22
    135e:	b7 95       	ror	r27
    1360:	f7 95       	ror	r31
    1362:	e7 95       	ror	r30
    1364:	9f 5f       	subi	r25, 0xFF	; 255
    1366:	c1 f7       	brne	.-16     	; 0x1358 <__mulsf3_pse+0x8c>
    1368:	fe 2b       	or	r31, r30
    136a:	88 0f       	add	r24, r24
    136c:	91 1d       	adc	r25, r1
    136e:	96 95       	lsr	r25
    1370:	87 95       	ror	r24
    1372:	97 f9       	bld	r25, 7
    1374:	08 95       	ret

00001376 <_exit>:
    1376:	f8 94       	cli

00001378 <__stop_program>:
    1378:	ff cf       	rjmp	.-2      	; 0x1378 <__stop_program>
